<?php
/**
 * TaskWorkV2ApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * TaskWorkV2ApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskWorkV2ApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for taskWorkV2ActivateTaskwork
     *
     * This call returns a taskwork if active.
     *
     */
    public function testTaskWorkV2ActivateTaskwork()
    {
    }

    /**
     * Test case for taskWorkV2AutoAssign
     *
     * This call autoassigns the taskwork.
     *
     */
    public function testTaskWorkV2AutoAssign()
    {
    }

    /**
     * Test case for taskWorkV2CanFinalizeTaskByIds
     *
     * This call returns if is possible to close task work list.
     *
     */
    public function testTaskWorkV2CanFinalizeTaskByIds()
    {
    }

    /**
     * Test case for taskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPassword
     *
     * This call returns if is possible to close task work list by exit code and password.
     *
     */
    public function testTaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPassword()
    {
    }

    /**
     * Test case for taskWorkV2DeleteTaskWorkById
     *
     * This call deletes the task.
     *
     */
    public function testTaskWorkV2DeleteTaskWorkById()
    {
    }

    /**
     * Test case for taskWorkV2FinalizeTaskByIdsAndExitCodeAndPassword
     *
     * This call closes a task work list.
     *
     */
    public function testTaskWorkV2FinalizeTaskByIdsAndExitCodeAndPassword()
    {
    }

    /**
     * Test case for taskWorkV2GetActiveTaskWork
     *
     * This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber}.
     *
     */
    public function testTaskWorkV2GetActiveTaskWork()
    {
    }

    /**
     * Test case for taskWorkV2GetDefaultSelect
     *
     * This call provides default select for tasklist search.
     *
     */
    public function testTaskWorkV2GetDefaultSelect()
    {
    }

    /**
     * Test case for taskWorkV2GetDocumentsByProcessId
     *
     * This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId}.
     *
     */
    public function testTaskWorkV2GetDocumentsByProcessId()
    {
    }

    /**
     * Test case for taskWorkV2GetDocumentsFilenameByProcessId
     *
     * .
     *
     */
    public function testTaskWorkV2GetDocumentsFilenameByProcessId()
    {
    }

    /**
     * Test case for taskWorkV2GetExitCodesByTaskWorkIds
     *
     * This call returns all possible exit code for taskWorks list.
     *
     */
    public function testTaskWorkV2GetExitCodesByTaskWorkIds()
    {
    }

    /**
     * Test case for taskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation
     *
     * This call returns a document schema for a mask insert document taskWork operation.
     *
     */
    public function testTaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation()
    {
    }

    /**
     * Test case for taskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation
     *
     * This call returns a profile schema for a model insert document taskWork operation.
     *
     */
    public function testTaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation()
    {
    }

    /**
     * Test case for taskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation
     *
     * This call returns a profile schema for a standard insert document taskWork operation.
     *
     */
    public function testTaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation()
    {
    }

    /**
     * Test case for taskWorkV2GetTaskWorkById
     *
     * This call returns the task.
     *
     */
    public function testTaskWorkV2GetTaskWorkById()
    {
    }

    /**
     * Test case for taskWorkV2GetTaskWorkForAutoAssign
     *
     * This call returns all autoassigned taskwork associated with a document.
     *
     */
    public function testTaskWorkV2GetTaskWorkForAutoAssign()
    {
    }

    /**
     * Test case for taskWorkV2GetTasks
     *
     * This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork.
     *
     */
    public function testTaskWorkV2GetTasks()
    {
    }

    /**
     * Test case for taskWorkV2ReassignTaskById
     *
     * This call reassigns a task to selected users.
     *
     */
    public function testTaskWorkV2ReassignTaskById()
    {
    }

    /**
     * Test case for taskWorkV2ReassignUsersTaskById
     *
     * This call reassigns a task to selected users.
     *
     */
    public function testTaskWorkV2ReassignUsersTaskById()
    {
    }

    /**
     * Test case for taskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation
     *
     * This call adds a profile to process for a selection document taskwork operation.
     *
     */
    public function testTaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation()
    {
    }

    /**
     * Test case for taskWorkV2SetProfileForTaskWorkMaskDocumentOperation
     *
     * This call profiles a new document for a mask insert document taskwork operation.
     *
     */
    public function testTaskWorkV2SetProfileForTaskWorkMaskDocumentOperation()
    {
    }

    /**
     * Test case for taskWorkV2SetProfileForTaskWorkModelDocumentOperation
     *
     * This call profiles a new document for a model insert document taskwork operation.
     *
     */
    public function testTaskWorkV2SetProfileForTaskWorkModelDocumentOperation()
    {
    }

    /**
     * Test case for taskWorkV2SetProfileForTaskWorkStandardDocumentOperation
     *
     * This call profiles a new document for a standard insert document taskwork operation.
     *
     */
    public function testTaskWorkV2SetProfileForTaskWorkStandardDocumentOperation()
    {
    }

    /**
     * Test case for taskWorkV2SetTaskPriority
     *
     * This call sets the tasks priority.
     *
     */
    public function testTaskWorkV2SetTaskPriority()
    {
    }

    /**
     * Test case for taskWorkV2SetTaskRead
     *
     * This call sets the task as read.
     *
     */
    public function testTaskWorkV2SetTaskRead()
    {
    }

    /**
     * Test case for taskWorkV2SetTaskUnRead
     *
     * This call sets the tasks as unread.
     *
     */
    public function testTaskWorkV2SetTaskUnRead()
    {
    }

    /**
     * Test case for taskWorkV2TaskWorkTakeCharge
     *
     * This call takes charge of a taskwork.
     *
     */
    public function testTaskWorkV2TaskWorkTakeCharge()
    {
    }
}
