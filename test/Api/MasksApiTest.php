<?php
/**
 * MasksApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * MasksApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MasksApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for masksCloneMask
     *
     * This call clones a mask.
     *
     */
    public function testMasksCloneMask()
    {
    }

    /**
     * Test case for masksDelete
     *
     * This call deletes a mask.
     *
     */
    public function testMasksDelete()
    {
    }

    /**
     * Test case for masksGetById
     *
     * This call returns a mask by its identifier.
     *
     */
    public function testMasksGetById()
    {
    }

    /**
     * Test case for masksGetDocumentTypesByMaskId
     *
     * This call returns all possibile Document Types for a mask.
     *
     */
    public function testMasksGetDocumentTypesByMaskId()
    {
    }

    /**
     * Test case for masksGetDocumentTypesByMaskIdOld
     *
     * This call returns all possibile Document Types for a mask.
     *
     */
    public function testMasksGetDocumentTypesByMaskIdOld()
    {
    }

    /**
     * Test case for masksGetDocumentTypesTreeByMaskId
     *
     * This call returns all possibile Document Types for a mask (tree format).
     *
     */
    public function testMasksGetDocumentTypesTreeByMaskId()
    {
    }

    /**
     * Test case for masksGetDocumentTypesTreeByMaskIdOld
     *
     * This call returns all possibile Document Types for a mask (tree format).
     *
     */
    public function testMasksGetDocumentTypesTreeByMaskIdOld()
    {
    }

    /**
     * Test case for masksGetFieldsByClasse
     *
     * This call returns possibile fields by a Document Type.
     *
     */
    public function testMasksGetFieldsByClasse()
    {
    }

    /**
     * Test case for masksGetList
     *
     * This call returns all masks.
     *
     */
    public function testMasksGetList()
    {
    }

    /**
     * Test case for masksGetPermission
     *
     * This call returns the permissions for a mask.
     *
     */
    public function testMasksGetPermission()
    {
    }

    /**
     * Test case for masksGetProfileForClasseBox
     *
     * This calls returns the profile schema for a mask associated to a class additional field.
     *
     */
    public function testMasksGetProfileForClasseBox()
    {
    }

    /**
     * Test case for masksGetProfileSchemaByMaskId
     *
     * This call returns the profile schema by a mask.
     *
     */
    public function testMasksGetProfileSchemaByMaskId()
    {
    }

    /**
     * Test case for masksGetRoot
     *
     * This call returns the root mask.
     *
     */
    public function testMasksGetRoot()
    {
    }

    /**
     * Test case for masksInserMask
     *
     * This call inserts a new mask.
     *
     */
    public function testMasksInserMask()
    {
    }

    /**
     * Test case for masksPost
     *
     * This call executes a new profiling.
     *
     */
    public function testMasksPost()
    {
    }

    /**
     * Test case for masksSetPermission
     *
     * This call updates the permissions for a mask.
     *
     */
    public function testMasksSetPermission()
    {
    }

    /**
     * Test case for masksUpdateMask
     *
     * This call updates a mask.
     *
     */
    public function testMasksUpdateMask()
    {
    }
}
