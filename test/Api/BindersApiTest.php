<?php
/**
 * BindersApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * BindersApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BindersApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for bindersAddProfilesToBinder
     *
     * This call adds specified profiles to a binder container.
     *
     */
    public function testBindersAddProfilesToBinder()
    {
    }

    /**
     * Test case for bindersBinderComboValues
     *
     * This call updates the possible values for a combo custom binder field.
     *
     */
    public function testBindersBinderComboValues()
    {
    }

    /**
     * Test case for bindersBinderCustomFieldsTranslations
     *
     * This call updates custom field for a binder type.
     *
     */
    public function testBindersBinderCustomFieldsTranslations()
    {
    }

    /**
     * Test case for bindersBinderCustomFieldsTranslations_0
     *
     * This call updates translation custom field for a binder type.
     *
     */
    public function testBindersBinderCustomFieldsTranslations0()
    {
    }

    /**
     * Test case for bindersCanInsertNewBinderType
     *
     * This call returns if the connected user can insert a new binder type.
     *
     */
    public function testBindersCanInsertNewBinderType()
    {
    }

    /**
     * Test case for bindersDeleteBinderType
     *
     * This call creates delete a binder type.
     *
     */
    public function testBindersDeleteBinderType()
    {
    }

    /**
     * Test case for bindersDeleteById
     *
     * This call deletes a binder by the identifier.
     *
     */
    public function testBindersDeleteById()
    {
    }

    /**
     * Test case for bindersGetBinderComboValues
     *
     * This call returns the possible combo value of a binder combo custom field by field id.
     *
     */
    public function testBindersGetBinderComboValues()
    {
    }

    /**
     * Test case for bindersGetBinderCustomFields
     *
     * This call returns the custom fields by binder type.
     *
     */
    public function testBindersGetBinderCustomFields()
    {
    }

    /**
     * Test case for bindersGetBinderCustomFieldsTranslations
     *
     * This call returns translation custom field for a binder type.
     *
     */
    public function testBindersGetBinderCustomFieldsTranslations()
    {
    }

    /**
     * Test case for bindersGetBinderPermission
     *
     * This call returns the users permissions for a binder.
     *
     */
    public function testBindersGetBinderPermission()
    {
    }

    /**
     * Test case for bindersGetBinderStateForVisualization
     *
     * This call returns the possible states for binder visualization.
     *
     */
    public function testBindersGetBinderStateForVisualization()
    {
    }

    /**
     * Test case for bindersGetBinderStates
     *
     * This call returns the possible states for a binder.
     *
     */
    public function testBindersGetBinderStates()
    {
    }

    /**
     * Test case for bindersGetBinderTypeById
     *
     * This call returns a binder type by its identifier.
     *
     */
    public function testBindersGetBinderTypeById()
    {
    }

    /**
     * Test case for bindersGetBinderTypePermission
     *
     * This call returns the permission for a binder type.
     *
     */
    public function testBindersGetBinderTypePermission()
    {
    }

    /**
     * Test case for bindersGetBindersFieldsByType
     *
     * This call returns the binder custom fields by binder type.
     *
     */
    public function testBindersGetBindersFieldsByType()
    {
    }

    /**
     * Test case for bindersGetById
     *
     * This call search a binder by the given identifiers.
     *
     */
    public function testBindersGetById()
    {
    }

    /**
     * Test case for bindersGetByIds
     *
     * This call search a binder by the given identifiers.
     *
     */
    public function testBindersGetByIds()
    {
    }

    /**
     * Test case for bindersGetByNumero
     *
     * This call search a binder by the given number.
     *
     */
    public function testBindersGetByNumero()
    {
    }

    /**
     * Test case for bindersGetByNumeroOld
     *
     * This call search a binder by the given number.
     *
     */
    public function testBindersGetByNumeroOld()
    {
    }

    /**
     * Test case for bindersGetByTypeAndState
     *
     * This call retrieve binders of the given type and state.
     *
     */
    public function testBindersGetByTypeAndState()
    {
    }

    /**
     * Test case for bindersGetTypesOfPratiche
     *
     * This call returns the types of binders available.
     *
     */
    public function testBindersGetTypesOfPratiche()
    {
    }

    /**
     * Test case for bindersGetUserDefaultTypeAndStateSelection
     *
     * This call returns the default type and state for the user.
     *
     */
    public function testBindersGetUserDefaultTypeAndStateSelection()
    {
    }

    /**
     * Test case for bindersInsertNewBinder
     *
     * This call adds new binder.
     *
     */
    public function testBindersInsertNewBinder()
    {
    }

    /**
     * Test case for bindersInsertNewBinderType
     *
     * This call creates new binder type.
     *
     */
    public function testBindersInsertNewBinderType()
    {
    }

    /**
     * Test case for bindersRemoveProfilesFromBinder
     *
     * This call removes specified profiles from a binder container.
     *
     */
    public function testBindersRemoveProfilesFromBinder()
    {
    }

    /**
     * Test case for bindersSetBinderPermission
     *
     * This call updates permission for a binder.
     *
     */
    public function testBindersSetBinderPermission()
    {
    }

    /**
     * Test case for bindersSetBinderTypePermission
     *
     * This call updates permission for a binder type.
     *
     */
    public function testBindersSetBinderTypePermission()
    {
    }

    /**
     * Test case for bindersSetUserDefaultTypeAndStateSelection
     *
     * This call saves the user binder type and state default.
     *
     */
    public function testBindersSetUserDefaultTypeAndStateSelection()
    {
    }

    /**
     * Test case for bindersUpdateBinderById
     *
     * This call updates all binder values, also custom fields, by binder identifier.
     *
     */
    public function testBindersUpdateBinderById()
    {
    }

    /**
     * Test case for bindersUpdateBinderTypeById
     *
     * This call updates a binder type.
     *
     */
    public function testBindersUpdateBinderTypeById()
    {
    }
}
