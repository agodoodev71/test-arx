<?php
/**
 * ProfilesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * ProfilesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProfilesApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for profilesArchiveMonitoredFolderFileFromBufferAutomatic
     *
     * This call insert new profile from automatic monitored folder file.
     *
     */
    public function testProfilesArchiveMonitoredFolderFileFromBufferAutomatic()
    {
    }

    /**
     * Test case for profilesDeleteIdErpById
     *
     * This call deletes association between Docnumber and IdErp.
     *
     */
    public function testProfilesDeleteIdErpById()
    {
    }

    /**
     * Test case for profilesDeleteProfile
     *
     * This call deletes a document.
     *
     */
    public function testProfilesDeleteProfile()
    {
    }

    /**
     * Test case for profilesGet
     *
     * This call returns the mask schema of a document.
     *
     */
    public function testProfilesGet()
    {
    }

    /**
     * Test case for profilesGetAdditionalByClasse
     *
     * This call returns the list of the additional field for archiving by the given business unit and document class (including groups).
     *
     */
    public function testProfilesGetAdditionalByClasse()
    {
    }

    /**
     * Test case for profilesGetAdditionalByClasseOld
     *
     * This call returns the list of the additional field for archiving by the given business unit and document class (including groups).
     *
     */
    public function testProfilesGetAdditionalByClasseOld()
    {
    }

    /**
     * Test case for profilesGetByDocumentType
     *
     * This call allows the retrieval of the default profile for archiving by given document type.
     *
     */
    public function testProfilesGetByDocumentType()
    {
    }

    /**
     * Test case for profilesGetByIdErp
     *
     * This call returns the mask schema of documents by idErp.
     *
     */
    public function testProfilesGetByIdErp()
    {
    }

    /**
     * Test case for profilesGetByIdErp_0
     *
     * This call returns the mask schema of documents by idErp.
     *
     */
    public function testProfilesGetByIdErp0()
    {
    }

    /**
     * Test case for profilesGetDocnumberIdErpAssociationByDocnumber
     *
     * this call returns all association with idErps for a specific docnumber.
     *
     */
    public function testProfilesGetDocnumberIdErpAssociationByDocnumber()
    {
    }

    /**
     * Test case for profilesGetDocnumberIdErpAssociationByIdErp
     *
     * this call returns all association with docnumbers for a specific idErp.
     *
     */
    public function testProfilesGetDocnumberIdErpAssociationByIdErp()
    {
    }

    /**
     * Test case for profilesGetDocnumberIdErpAssociationByIdErp_0
     *
     * this call returns all association with docnumbers for a specific idErp.
     *
     */
    public function testProfilesGetDocnumberIdErpAssociationByIdErp0()
    {
    }

    /**
     * Test case for profilesGetFiltersForArchive
     *
     * This call returns the list of filter avaible for a specific additional field.
     *
     */
    public function testProfilesGetFiltersForArchive()
    {
    }

    /**
     * Test case for profilesGetForBarcode
     *
     * This call allows the retrieval of the default profile for archiving barcode.
     *
     */
    public function testProfilesGetForBarcode()
    {
    }

    /**
     * Test case for profilesGetForClone
     *
     * This call clones a document.
     *
     */
    public function testProfilesGetForClone()
    {
    }

    /**
     * Test case for profilesGetForTask
     *
     * This call returns the mask schema of a document in a taskwork.
     *
     */
    public function testProfilesGetForTask()
    {
    }

    /**
     * Test case for profilesGetForTask_0
     *
     * This call returns the mask schema of a document in a taskwork.
     *
     */
    public function testProfilesGetForTask0()
    {
    }

    /**
     * Test case for profilesGetFormulaForArchive
     *
     * This call returns the result of a formula given the array of fields of profile and their value.
     *
     */
    public function testProfilesGetFormulaForArchive()
    {
    }

    /**
     * Test case for profilesGetSchema
     *
     * This call returns the edit schema of a document.
     *
     */
    public function testProfilesGetSchema()
    {
    }

    /**
     * Test case for profilesGetSchema_0
     *
     * This call returns the edit schema of a document from a file for a monitored folder.
     *
     */
    public function testProfilesGetSchema0()
    {
    }

    /**
     * Test case for profilesGetValuesForArchive
     *
     * This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile.
     *
     */
    public function testProfilesGetValuesForArchive()
    {
    }

    /**
     * Test case for profilesGet_0
     *
     * This call allows the retrieval of the default profile for archiving.
     *
     */
    public function testProfilesGet0()
    {
    }

    /**
     * Test case for profilesInsertIdErp
     *
     * This call insert new association between Docnumber and IdErp.
     *
     */
    public function testProfilesInsertIdErp()
    {
    }

    /**
     * Test case for profilesLockProfile
     *
     * This call checks if a profile is lock.
     *
     */
    public function testProfilesLockProfile()
    {
    }

    /**
     * Test case for profilesLockProfile_0
     *
     * This call checks if a profile is lock.
     *
     */
    public function testProfilesLockProfile0()
    {
    }

    /**
     * Test case for profilesPost
     *
     * This call inserts a new profile.
     *
     */
    public function testProfilesPost()
    {
    }

    /**
     * Test case for profilesPostForBarcode
     *
     * This call allows the insertion of new profile for barcode purpose.
     *
     */
    public function testProfilesPostForBarcode()
    {
    }

    /**
     * Test case for profilesPut
     *
     * This call updates an existent profile.
     *
     */
    public function testProfilesPut()
    {
    }

    /**
     * Test case for profilesUnLockProfile
     *
     * This call checks if a profile is not lock.
     *
     */
    public function testProfilesUnLockProfile()
    {
    }

    /**
     * Test case for profilesUnLockProfile_0
     *
     * This call checks if a profile is not lock.
     *
     */
    public function testProfilesUnLockProfile0()
    {
    }

    /**
     * Test case for profilesValidateForArchive
     *
     * This call returns the result of a validation given the array of fields of profile and their value.
     *
     */
    public function testProfilesValidateForArchive()
    {
    }
}
