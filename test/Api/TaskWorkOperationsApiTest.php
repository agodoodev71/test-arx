<?php
/**
 * TaskWorkOperationsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * TaskWorkOperationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskWorkOperationsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for taskWorkOperationsExecuteSignOperation
     *
     * .
     *
     */
    public function testTaskWorkOperationsExecuteSignOperation()
    {
    }

    /**
     * Test case for taskWorkOperationsGetByTaskWorkId
     *
     * This call returns all the operations in a task work.
     *
     */
    public function testTaskWorkOperationsGetByTaskWorkId()
    {
    }

    /**
     * Test case for taskWorkOperationsGetDocumentForSignOperation
     *
     * .
     *
     */
    public function testTaskWorkOperationsGetDocumentForSignOperation()
    {
    }

    /**
     * Test case for taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds
     *
     * This call returns the dynamic job operation to execute for a taskwork list close action by an exit code.
     *
     */
    public function testTaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds()
    {
    }

    /**
     * Test case for taskWorkOperationsGetFieldValuesByProcessVariable
     *
     * This call returns the possibile values for a process variable (combo or table).
     *
     */
    public function testTaskWorkOperationsGetFieldValuesByProcessVariable()
    {
    }

    /**
     * Test case for taskWorkOperationsGetFiltersByProcessVariables
     *
     * This call returns the possibile filters for a table process variable.
     *
     */
    public function testTaskWorkOperationsGetFiltersByProcessVariables()
    {
    }

    /**
     * Test case for taskWorkOperationsGetProfessionalRoleByTaskIds
     *
     * This call returns all professional role operations by multiple TaskWork.
     *
     */
    public function testTaskWorkOperationsGetProfessionalRoleByTaskIds()
    {
    }

    /**
     * Test case for taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds
     *
     * This call returns the professional role operation to execute for a taskwork list close action by an exit code.
     *
     */
    public function testTaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds()
    {
    }

    /**
     * Test case for taskWorkOperationsGetSelectedUsersForDynamicJob
     *
     * This call returns the selected users list for a dynamic job in a process.
     *
     */
    public function testTaskWorkOperationsGetSelectedUsersForDynamicJob()
    {
    }

    /**
     * Test case for taskWorkOperationsGetUsersForDynamicJob
     *
     * This call returns al possibile user for a dynamic job attribution.
     *
     */
    public function testTaskWorkOperationsGetUsersForDynamicJob()
    {
    }

    /**
     * Test case for taskWorkOperationsGetUsersForProfessionalRoleSelection
     *
     * This call returns the professional role possibile users for a professional role operation.
     *
     */
    public function testTaskWorkOperationsGetUsersForProfessionalRoleSelection()
    {
    }

    /**
     * Test case for taskWorkOperationsSetDynamicJob
     *
     * This call sets the users for a process dynamic job.
     *
     */
    public function testTaskWorkOperationsSetDynamicJob()
    {
    }

    /**
     * Test case for taskWorkOperationsSetDynamicJobMultiple
     *
     * This call sets the users for multiple process dynamic job.
     *
     */
    public function testTaskWorkOperationsSetDynamicJobMultiple()
    {
    }

    /**
     * Test case for taskWorkOperationsSetProcessVariableValueByTaskWorkId
     *
     * This call sets the values for the process variables.
     *
     */
    public function testTaskWorkOperationsSetProcessVariableValueByTaskWorkId()
    {
    }

    /**
     * Test case for taskWorkOperationsSetProfessionalRoleByTaskIds
     *
     * This call sets the professional roles users for multiple TaskWork Ids.
     *
     */
    public function testTaskWorkOperationsSetProfessionalRoleByTaskIds()
    {
    }

    /**
     * Test case for taskWorkOperationsSetUsersForProfessionalRoleSelection
     *
     * This call sets the user for a professional role operation.
     *
     */
    public function testTaskWorkOperationsSetUsersForProfessionalRoleSelection()
    {
    }

    /**
     * Test case for taskWorkOperationsTaskWorkCommandExecute
     *
     * this call executes a command task operation.
     *
     */
    public function testTaskWorkOperationsTaskWorkCommandExecute()
    {
    }

    /**
     * Test case for taskWorkOperationsUnSetProfessionalRoleSelection
     *
     * This call deletes the professional role actual value.
     *
     */
    public function testTaskWorkOperationsUnSetProfessionalRoleSelection()
    {
    }

    /**
     * Test case for taskWorkOperationsValidateVariabile
     *
     * .
     *
     */
    public function testTaskWorkOperationsValidateVariabile()
    {
    }
}
