<?php
/**
 * DocumentsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for documentsCanWrite
     *
     * This call returns if the user can write the file..
     *
     */
    public function testDocumentsCanWrite()
    {
    }

    /**
     * Test case for documentsCanWriteForTask
     *
     * This call returns if the user can write the document under workflow process..
     *
     */
    public function testDocumentsCanWriteForTask()
    {
    }

    /**
     * Test case for documentsExportMassiveForProfile
     *
     * This call start new export procedure.
     *
     */
    public function testDocumentsExportMassiveForProfile()
    {
    }

    /**
     * Test case for documentsExportMassiveForProfile_0
     *
     * This call start new export procedure for processdoc.
     *
     */
    public function testDocumentsExportMassiveForProfile0()
    {
    }

    /**
     * Test case for documentsGetDocumentByRevisionId
     *
     * This call returns the document associated to a specified revision.
     *
     */
    public function testDocumentsGetDocumentByRevisionId()
    {
    }

    /**
     * Test case for documentsGetExtractP7M
     *
     * This call returns the file, contained in the signature, associated with the profile.
     *
     */
    public function testDocumentsGetExtractP7M()
    {
    }

    /**
     * Test case for documentsGetExtractedDocumentByRevisionId
     *
     * This call returns the document associated to a specified revision (extracted from cryptographic envelopes).
     *
     */
    public function testDocumentsGetExtractedDocumentByRevisionId()
    {
    }

    /**
     * Test case for documentsGetExtractedForProfile
     *
     * This call returns the file associated with a specified profile (extracted from cryptographic envelopes).
     *
     */
    public function testDocumentsGetExtractedForProfile()
    {
    }

    /**
     * Test case for documentsGetExtractedForTask
     *
     * This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes).
     *
     */
    public function testDocumentsGetExtractedForTask()
    {
    }

    /**
     * Test case for documentsGetExtractedForTaskAttachement
     *
     * This call returns the file associated with the task attachment (extracted from cryptographic envelopes).
     *
     */
    public function testDocumentsGetExtractedForTaskAttachement()
    {
    }

    /**
     * Test case for documentsGetExtractedProfileAttachment
     *
     * This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes).
     *
     */
    public function testDocumentsGetExtractedProfileAttachment()
    {
    }

    /**
     * Test case for documentsGetExtractedProfileAttachmentRevision
     *
     * This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes).
     *
     */
    public function testDocumentsGetExtractedProfileAttachmentRevision()
    {
    }

    /**
     * Test case for documentsGetForExternalAttachment
     *
     * This call retrieve a file for an external profile attachment.
     *
     */
    public function testDocumentsGetForExternalAttachment()
    {
    }

    /**
     * Test case for documentsGetForProcessAttachement
     *
     * This call returns the file associated with the attachment into in a process workflow.
     *
     */
    public function testDocumentsGetForProcessAttachement()
    {
    }

    /**
     * Test case for documentsGetForProcessDocument
     *
     * This call returns the file associated with the document process into in a process workflow.
     *
     */
    public function testDocumentsGetForProcessDocument()
    {
    }

    /**
     * Test case for documentsGetForProfile
     *
     * This call returns the file associated with a specified profile.
     *
     */
    public function testDocumentsGetForProfile()
    {
    }

    /**
     * Test case for documentsGetForTask
     *
     * This call returns the file associated with a taskwork and a document in process.
     *
     */
    public function testDocumentsGetForTask()
    {
    }

    /**
     * Test case for documentsGetForTaskAttachement
     *
     * This call returns the file associated with the task attachment.
     *
     */
    public function testDocumentsGetForTaskAttachement()
    {
    }

    /**
     * Test case for documentsGetForTaskHasDocument
     *
     * This call returns if the document process has a associated file.
     *
     */
    public function testDocumentsGetForTaskHasDocument()
    {
    }

    /**
     * Test case for documentsGetForTaskReadOnly
     *
     * This call returns the file associated with a taskwork and a document in process, for read-only management.
     *
     */
    public function testDocumentsGetForTaskReadOnly()
    {
    }

    /**
     * Test case for documentsGetHasDocumentForProfile
     *
     * This call returns if the profile has a associated file.
     *
     */
    public function testDocumentsGetHasDocumentForProfile()
    {
    }

    /**
     * Test case for documentsGetRevisionDocumentById
     *
     * This call retrieve the attachemnt file by its revision.
     *
     */
    public function testDocumentsGetRevisionDocumentById()
    {
    }

    /**
     * Test case for documentsSetDocument
     *
     * This call update a file associated to a profile.
     *
     */
    public function testDocumentsSetDocument()
    {
    }
}
