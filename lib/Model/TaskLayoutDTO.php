<?php
/**
 * TaskLayoutDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TaskLayoutDTO Class Doc Comment
 *
 * @category Class
 * @description Class of task layout
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskLayoutDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskLayoutDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'author' => 'int',
        'author_complete_name' => 'string',
        'creation_date' => '\DateTime',
        'details' => '\Swagger\Client\Model\TaskLayoutDetailDTO[]',
        'associations' => '\Swagger\Client\Model\TaskLayoutAssociationDTO[]',
        'users' => '\Swagger\Client\Model\UserDTO[]',
        'is_system' => 'bool',
        'priority' => 'int',
        'id_layout' => 'int',
        'is_user' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'author' => 'int32',
        'author_complete_name' => null,
        'creation_date' => 'date-time',
        'details' => null,
        'associations' => null,
        'users' => null,
        'is_system' => null,
        'priority' => 'int32',
        'id_layout' => 'int32',
        'is_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'author' => 'author',
        'author_complete_name' => 'authorCompleteName',
        'creation_date' => 'creationDate',
        'details' => 'details',
        'associations' => 'associations',
        'users' => 'users',
        'is_system' => 'isSystem',
        'priority' => 'priority',
        'id_layout' => 'idLayout',
        'is_user' => 'isUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'author' => 'setAuthor',
        'author_complete_name' => 'setAuthorCompleteName',
        'creation_date' => 'setCreationDate',
        'details' => 'setDetails',
        'associations' => 'setAssociations',
        'users' => 'setUsers',
        'is_system' => 'setIsSystem',
        'priority' => 'setPriority',
        'id_layout' => 'setIdLayout',
        'is_user' => 'setIsUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'author' => 'getAuthor',
        'author_complete_name' => 'getAuthorCompleteName',
        'creation_date' => 'getCreationDate',
        'details' => 'getDetails',
        'associations' => 'getAssociations',
        'users' => 'getUsers',
        'is_system' => 'getIsSystem',
        'priority' => 'getPriority',
        'id_layout' => 'getIdLayout',
        'is_user' => 'getIsUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['author_complete_name'] = isset($data['author_complete_name']) ? $data['author_complete_name'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['associations'] = isset($data['associations']) ? $data['associations'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['is_system'] = isset($data['is_system']) ? $data['is_system'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['id_layout'] = isset($data['id_layout']) ? $data['id_layout'] : null;
        $this->container['is_user'] = isset($data['is_user']) ? $data['is_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets author
     *
     * @return int
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param int $author Author Identifier
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets author_complete_name
     *
     * @return string
     */
    public function getAuthorCompleteName()
    {
        return $this->container['author_complete_name'];
    }

    /**
     * Sets author_complete_name
     *
     * @param string $author_complete_name Author Name
     *
     * @return $this
     */
    public function setAuthorCompleteName($author_complete_name)
    {
        $this->container['author_complete_name'] = $author_complete_name;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Creation Date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Swagger\Client\Model\TaskLayoutDetailDTO[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Swagger\Client\Model\TaskLayoutDetailDTO[] $details Details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets associations
     *
     * @return \Swagger\Client\Model\TaskLayoutAssociationDTO[]
     */
    public function getAssociations()
    {
        return $this->container['associations'];
    }

    /**
     * Sets associations
     *
     * @param \Swagger\Client\Model\TaskLayoutAssociationDTO[] $associations Association Fields
     *
     * @return $this
     */
    public function setAssociations($associations)
    {
        $this->container['associations'] = $associations;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Swagger\Client\Model\UserDTO[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Swagger\Client\Model\UserDTO[] $users Users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets is_system
     *
     * @return bool
     */
    public function getIsSystem()
    {
        return $this->container['is_system'];
    }

    /**
     * Sets is_system
     *
     * @param bool $is_system Task Layout is of system
     *
     * @return $this
     */
    public function setIsSystem($is_system)
    {
        $this->container['is_system'] = $is_system;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority Priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets id_layout
     *
     * @return int
     */
    public function getIdLayout()
    {
        return $this->container['id_layout'];
    }

    /**
     * Sets id_layout
     *
     * @param int $id_layout Layout Identifier
     *
     * @return $this
     */
    public function setIdLayout($id_layout)
    {
        $this->container['id_layout'] = $id_layout;

        return $this;
    }

    /**
     * Gets is_user
     *
     * @return bool
     */
    public function getIsUser()
    {
        return $this->container['is_user'];
    }

    /**
     * Sets is_user
     *
     * @param bool $is_user Task Layout is user layout
     *
     * @return $this
     */
    public function setIsUser($is_user)
    {
        $this->container['is_user'] = $is_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


