<?php
/**
 * AccumulationPackageDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccumulationPackageDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccumulationPackageDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccumulationPackageDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'ixce_accumulation_package_id' => 'string',
        'description' => 'string',
        'status' => 'int',
        'creation_date' => '\DateTime',
        'last_update' => '\DateTime',
        'document_type_system_id' => 'int',
        'document_type_description' => 'string',
        'service_type' => 'int',
        'business_unit_id' => 'string',
        'organization_unit_id' => 'string',
        'class_id' => 'string',
        'ixce_rule_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'ixce_accumulation_package_id' => null,
        'description' => null,
        'status' => 'int32',
        'creation_date' => 'date-time',
        'last_update' => 'date-time',
        'document_type_system_id' => 'int32',
        'document_type_description' => null,
        'service_type' => 'int32',
        'business_unit_id' => null,
        'organization_unit_id' => null,
        'class_id' => null,
        'ixce_rule_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ixce_accumulation_package_id' => 'ixceAccumulationPackageId',
        'description' => 'description',
        'status' => 'status',
        'creation_date' => 'creationDate',
        'last_update' => 'lastUpdate',
        'document_type_system_id' => 'documentTypeSystemId',
        'document_type_description' => 'documentTypeDescription',
        'service_type' => 'serviceType',
        'business_unit_id' => 'businessUnitId',
        'organization_unit_id' => 'organizationUnitId',
        'class_id' => 'classId',
        'ixce_rule_id' => 'ixceRuleId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ixce_accumulation_package_id' => 'setIxceAccumulationPackageId',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'creation_date' => 'setCreationDate',
        'last_update' => 'setLastUpdate',
        'document_type_system_id' => 'setDocumentTypeSystemId',
        'document_type_description' => 'setDocumentTypeDescription',
        'service_type' => 'setServiceType',
        'business_unit_id' => 'setBusinessUnitId',
        'organization_unit_id' => 'setOrganizationUnitId',
        'class_id' => 'setClassId',
        'ixce_rule_id' => 'setIxceRuleId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ixce_accumulation_package_id' => 'getIxceAccumulationPackageId',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'creation_date' => 'getCreationDate',
        'last_update' => 'getLastUpdate',
        'document_type_system_id' => 'getDocumentTypeSystemId',
        'document_type_description' => 'getDocumentTypeDescription',
        'service_type' => 'getServiceType',
        'business_unit_id' => 'getBusinessUnitId',
        'organization_unit_id' => 'getOrganizationUnitId',
        'class_id' => 'getClassId',
        'ixce_rule_id' => 'getIxceRuleId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ixce_accumulation_package_id'] = isset($data['ixce_accumulation_package_id']) ? $data['ixce_accumulation_package_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['document_type_system_id'] = isset($data['document_type_system_id']) ? $data['document_type_system_id'] : null;
        $this->container['document_type_description'] = isset($data['document_type_description']) ? $data['document_type_description'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['organization_unit_id'] = isset($data['organization_unit_id']) ? $data['organization_unit_id'] : null;
        $this->container['class_id'] = isset($data['class_id']) ? $data['class_id'] : null;
        $this->container['ixce_rule_id'] = isset($data['ixce_rule_id']) ? $data['ixce_rule_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ixce_accumulation_package_id
     *
     * @return string
     */
    public function getIxceAccumulationPackageId()
    {
        return $this->container['ixce_accumulation_package_id'];
    }

    /**
     * Sets ixce_accumulation_package_id
     *
     * @param string $ixce_accumulation_package_id ixce_accumulation_package_id
     *
     * @return $this
     */
    public function setIxceAccumulationPackageId($ixce_accumulation_package_id)
    {
        $this->container['ixce_accumulation_package_id'] = $ixce_accumulation_package_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Possible values:  0: Inserted  1: Created  2: Open  3: Closed  4: InProcessing  5: Error  6: Preserved  7: Reopened
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime $last_update last_update
     *
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets document_type_system_id
     *
     * @return int
     */
    public function getDocumentTypeSystemId()
    {
        return $this->container['document_type_system_id'];
    }

    /**
     * Sets document_type_system_id
     *
     * @param int $document_type_system_id document_type_system_id
     *
     * @return $this
     */
    public function setDocumentTypeSystemId($document_type_system_id)
    {
        $this->container['document_type_system_id'] = $document_type_system_id;

        return $this;
    }

    /**
     * Gets document_type_description
     *
     * @return string
     */
    public function getDocumentTypeDescription()
    {
        return $this->container['document_type_description'];
    }

    /**
     * Sets document_type_description
     *
     * @param string $document_type_description document_type_description
     *
     * @return $this
     */
    public function setDocumentTypeDescription($document_type_description)
    {
        $this->container['document_type_description'] = $document_type_description;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return int
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param int $service_type Possible values:  0: IX  1: IXCE  2: IXCE_V2  3: IX_V2
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return string
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param string $business_unit_id business_unit_id
     *
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets organization_unit_id
     *
     * @return string
     */
    public function getOrganizationUnitId()
    {
        return $this->container['organization_unit_id'];
    }

    /**
     * Sets organization_unit_id
     *
     * @param string $organization_unit_id organization_unit_id
     *
     * @return $this
     */
    public function setOrganizationUnitId($organization_unit_id)
    {
        $this->container['organization_unit_id'] = $organization_unit_id;

        return $this;
    }

    /**
     * Gets class_id
     *
     * @return string
     */
    public function getClassId()
    {
        return $this->container['class_id'];
    }

    /**
     * Sets class_id
     *
     * @param string $class_id class_id
     *
     * @return $this
     */
    public function setClassId($class_id)
    {
        $this->container['class_id'] = $class_id;

        return $this;
    }

    /**
     * Gets ixce_rule_id
     *
     * @return int
     */
    public function getIxceRuleId()
    {
        return $this->container['ixce_rule_id'];
    }

    /**
     * Sets ixce_rule_id
     *
     * @param int $ixce_rule_id ixce_rule_id
     *
     * @return $this
     */
    public function setIxceRuleId($ixce_rule_id)
    {
        $this->container['ixce_rule_id'] = $ixce_rule_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


