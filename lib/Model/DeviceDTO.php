<?php
/**
 * DeviceDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeviceDTO Class Doc Comment
 *
 * @category Class
 * @description Class of devise
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeviceDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'date' => '\DateTime',
        'user_id' => 'int',
        'capacity' => 'int',
        'qty_file' => 'int',
        'cpa_file' => 'int',
        'type' => 'int',
        'unit' => 'string',
        'description' => 'string',
        'operator' => 'string',
        'cod_fis_op' => 'string',
        'resp_aos' => 'string',
        'pub_buff' => 'string',
        'cod_fis_pu' => 'string',
        'comment' => 'string',
        'label' => 'string',
        'exp_date_mt' => '\DateTime',
        'is_lul' => 'bool',
        'linked_vol' => 'string',
        'aoo' => 'string',
        'scheduled_volum_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'date' => 'date-time',
        'user_id' => 'int32',
        'capacity' => 'int32',
        'qty_file' => 'int32',
        'cpa_file' => 'int32',
        'type' => 'int32',
        'unit' => null,
        'description' => null,
        'operator' => null,
        'cod_fis_op' => null,
        'resp_aos' => null,
        'pub_buff' => null,
        'cod_fis_pu' => null,
        'comment' => null,
        'label' => null,
        'exp_date_mt' => 'date-time',
        'is_lul' => null,
        'linked_vol' => null,
        'aoo' => null,
        'scheduled_volum_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'date' => 'date',
        'user_id' => 'userId',
        'capacity' => 'capacity',
        'qty_file' => 'qtyFile',
        'cpa_file' => 'cpaFile',
        'type' => 'type',
        'unit' => 'unit',
        'description' => 'description',
        'operator' => 'operator',
        'cod_fis_op' => 'codFisOp',
        'resp_aos' => 'respAos',
        'pub_buff' => 'pubBuff',
        'cod_fis_pu' => 'codFisPu',
        'comment' => 'comment',
        'label' => 'label',
        'exp_date_mt' => 'expDateMt',
        'is_lul' => 'isLul',
        'linked_vol' => 'linkedVol',
        'aoo' => 'aoo',
        'scheduled_volum_id' => 'scheduledVolumId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'date' => 'setDate',
        'user_id' => 'setUserId',
        'capacity' => 'setCapacity',
        'qty_file' => 'setQtyFile',
        'cpa_file' => 'setCpaFile',
        'type' => 'setType',
        'unit' => 'setUnit',
        'description' => 'setDescription',
        'operator' => 'setOperator',
        'cod_fis_op' => 'setCodFisOp',
        'resp_aos' => 'setRespAos',
        'pub_buff' => 'setPubBuff',
        'cod_fis_pu' => 'setCodFisPu',
        'comment' => 'setComment',
        'label' => 'setLabel',
        'exp_date_mt' => 'setExpDateMt',
        'is_lul' => 'setIsLul',
        'linked_vol' => 'setLinkedVol',
        'aoo' => 'setAoo',
        'scheduled_volum_id' => 'setScheduledVolumId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'date' => 'getDate',
        'user_id' => 'getUserId',
        'capacity' => 'getCapacity',
        'qty_file' => 'getQtyFile',
        'cpa_file' => 'getCpaFile',
        'type' => 'getType',
        'unit' => 'getUnit',
        'description' => 'getDescription',
        'operator' => 'getOperator',
        'cod_fis_op' => 'getCodFisOp',
        'resp_aos' => 'getRespAos',
        'pub_buff' => 'getPubBuff',
        'cod_fis_pu' => 'getCodFisPu',
        'comment' => 'getComment',
        'label' => 'getLabel',
        'exp_date_mt' => 'getExpDateMt',
        'is_lul' => 'getIsLul',
        'linked_vol' => 'getLinkedVol',
        'aoo' => 'getAoo',
        'scheduled_volum_id' => 'getScheduledVolumId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['qty_file'] = isset($data['qty_file']) ? $data['qty_file'] : null;
        $this->container['cpa_file'] = isset($data['cpa_file']) ? $data['cpa_file'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['cod_fis_op'] = isset($data['cod_fis_op']) ? $data['cod_fis_op'] : null;
        $this->container['resp_aos'] = isset($data['resp_aos']) ? $data['resp_aos'] : null;
        $this->container['pub_buff'] = isset($data['pub_buff']) ? $data['pub_buff'] : null;
        $this->container['cod_fis_pu'] = isset($data['cod_fis_pu']) ? $data['cod_fis_pu'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['exp_date_mt'] = isset($data['exp_date_mt']) ? $data['exp_date_mt'] : null;
        $this->container['is_lul'] = isset($data['is_lul']) ? $data['is_lul'] : null;
        $this->container['linked_vol'] = isset($data['linked_vol']) ? $data['linked_vol'] : null;
        $this->container['aoo'] = isset($data['aoo']) ? $data['aoo'] : null;
        $this->container['scheduled_volum_id'] = isset($data['scheduled_volum_id']) ? $data['scheduled_volum_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id User Identifier
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return int
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param int $capacity Capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets qty_file
     *
     * @return int
     */
    public function getQtyFile()
    {
        return $this->container['qty_file'];
    }

    /**
     * Sets qty_file
     *
     * @param int $qty_file Files Quantity
     *
     * @return $this
     */
    public function setQtyFile($qty_file)
    {
        $this->container['qty_file'] = $qty_file;

        return $this;
    }

    /**
     * Gets cpa_file
     *
     * @return int
     */
    public function getCpaFile()
    {
        return $this->container['cpa_file'];
    }

    /**
     * Sets cpa_file
     *
     * @param int $cpa_file CPA file
     *
     * @return $this
     */
    public function setCpaFile($cpa_file)
    {
        $this->container['cpa_file'] = $cpa_file;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Possible values:  0: Conservazione  1: Outsourcing  2: ExternalEngine
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit Unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator Operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets cod_fis_op
     *
     * @return string
     */
    public function getCodFisOp()
    {
        return $this->container['cod_fis_op'];
    }

    /**
     * Sets cod_fis_op
     *
     * @param string $cod_fis_op Fiscal Code Operator
     *
     * @return $this
     */
    public function setCodFisOp($cod_fis_op)
    {
        $this->container['cod_fis_op'] = $cod_fis_op;

        return $this;
    }

    /**
     * Gets resp_aos
     *
     * @return string
     */
    public function getRespAos()
    {
        return $this->container['resp_aos'];
    }

    /**
     * Sets resp_aos
     *
     * @param string $resp_aos Person in charge about Aos
     *
     * @return $this
     */
    public function setRespAos($resp_aos)
    {
        $this->container['resp_aos'] = $resp_aos;

        return $this;
    }

    /**
     * Gets pub_buff
     *
     * @return string
     */
    public function getPubBuff()
    {
        return $this->container['pub_buff'];
    }

    /**
     * Sets pub_buff
     *
     * @param string $pub_buff PubBuff
     *
     * @return $this
     */
    public function setPubBuff($pub_buff)
    {
        $this->container['pub_buff'] = $pub_buff;

        return $this;
    }

    /**
     * Gets cod_fis_pu
     *
     * @return string
     */
    public function getCodFisPu()
    {
        return $this->container['cod_fis_pu'];
    }

    /**
     * Sets cod_fis_pu
     *
     * @param string $cod_fis_pu Fiscal Code Public
     *
     * @return $this
     */
    public function setCodFisPu($cod_fis_pu)
    {
        $this->container['cod_fis_pu'] = $cod_fis_pu;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment of volume
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets exp_date_mt
     *
     * @return \DateTime
     */
    public function getExpDateMt()
    {
        return $this->container['exp_date_mt'];
    }

    /**
     * Sets exp_date_mt
     *
     * @param \DateTime $exp_date_mt Expiry Time Stamp
     *
     * @return $this
     */
    public function setExpDateMt($exp_date_mt)
    {
        $this->container['exp_date_mt'] = $exp_date_mt;

        return $this;
    }

    /**
     * Gets is_lul
     *
     * @return bool
     */
    public function getIsLul()
    {
        return $this->container['is_lul'];
    }

    /**
     * Sets is_lul
     *
     * @param bool $is_lul Single Book Class of Job
     *
     * @return $this
     */
    public function setIsLul($is_lul)
    {
        $this->container['is_lul'] = $is_lul;

        return $this;
    }

    /**
     * Gets linked_vol
     *
     * @return string
     */
    public function getLinkedVol()
    {
        return $this->container['linked_vol'];
    }

    /**
     * Sets linked_vol
     *
     * @param string $linked_vol Last volume for the single book class document
     *
     * @return $this
     */
    public function setLinkedVol($linked_vol)
    {
        $this->container['linked_vol'] = $linked_vol;

        return $this;
    }

    /**
     * Gets aoo
     *
     * @return string
     */
    public function getAoo()
    {
        return $this->container['aoo'];
    }

    /**
     * Sets aoo
     *
     * @param string $aoo Business Unit
     *
     * @return $this
     */
    public function setAoo($aoo)
    {
        $this->container['aoo'] = $aoo;

        return $this;
    }

    /**
     * Gets scheduled_volum_id
     *
     * @return string
     */
    public function getScheduledVolumId()
    {
        return $this->container['scheduled_volum_id'];
    }

    /**
     * Sets scheduled_volum_id
     *
     * @param string $scheduled_volum_id Last Scheduled Volume
     *
     * @return $this
     */
    public function setScheduledVolumId($scheduled_volum_id)
    {
        $this->container['scheduled_volum_id'] = $scheduled_volum_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


