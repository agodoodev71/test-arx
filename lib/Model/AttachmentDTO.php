<?php
/**
 * AttachmentDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AttachmentDTO Class Doc Comment
 *
 * @category Class
 * @description Class of Attachment
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AttachmentDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AttachmentDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'docnumber' => 'int',
        'revision' => 'int',
        'filename' => 'string',
        'filepath' => 'string',
        'originalname' => 'string',
        'device' => 'int',
        'cdlabel' => 'string',
        'comment' => 'string',
        'importdate' => '\DateTime',
        'user' => 'int',
        'user_complete_name' => 'string',
        'block' => 'int',
        'compliantcopy' => 'bool',
        'footprint' => 'string',
        'checksend' => 'bool',
        'aosflag' => 'bool',
        'access' => 'int',
        'save_type' => 'int',
        'filesize' => 'int',
        'kind' => 'int',
        'attached_docnumber' => 'int',
        'ix_check' => 'bool',
        'attachment_revision' => 'int',
        'compression_mode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'docnumber' => 'int32',
        'revision' => 'int32',
        'filename' => null,
        'filepath' => null,
        'originalname' => null,
        'device' => 'int32',
        'cdlabel' => null,
        'comment' => null,
        'importdate' => 'date-time',
        'user' => 'int32',
        'user_complete_name' => null,
        'block' => 'int32',
        'compliantcopy' => null,
        'footprint' => null,
        'checksend' => null,
        'aosflag' => null,
        'access' => 'int32',
        'save_type' => 'int32',
        'filesize' => 'int64',
        'kind' => 'int32',
        'attached_docnumber' => 'int32',
        'ix_check' => null,
        'attachment_revision' => 'int32',
        'compression_mode' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'docnumber' => 'docnumber',
        'revision' => 'revision',
        'filename' => 'filename',
        'filepath' => 'filepath',
        'originalname' => 'originalname',
        'device' => 'device',
        'cdlabel' => 'cdlabel',
        'comment' => 'comment',
        'importdate' => 'importdate',
        'user' => 'user',
        'user_complete_name' => 'userCompleteName',
        'block' => 'block',
        'compliantcopy' => 'compliantcopy',
        'footprint' => 'footprint',
        'checksend' => 'checksend',
        'aosflag' => 'aosflag',
        'access' => 'access',
        'save_type' => 'saveType',
        'filesize' => 'filesize',
        'kind' => 'kind',
        'attached_docnumber' => 'attachedDocnumber',
        'ix_check' => 'ixCheck',
        'attachment_revision' => 'attachmentRevision',
        'compression_mode' => 'compressionMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'docnumber' => 'setDocnumber',
        'revision' => 'setRevision',
        'filename' => 'setFilename',
        'filepath' => 'setFilepath',
        'originalname' => 'setOriginalname',
        'device' => 'setDevice',
        'cdlabel' => 'setCdlabel',
        'comment' => 'setComment',
        'importdate' => 'setImportdate',
        'user' => 'setUser',
        'user_complete_name' => 'setUserCompleteName',
        'block' => 'setBlock',
        'compliantcopy' => 'setCompliantcopy',
        'footprint' => 'setFootprint',
        'checksend' => 'setChecksend',
        'aosflag' => 'setAosflag',
        'access' => 'setAccess',
        'save_type' => 'setSaveType',
        'filesize' => 'setFilesize',
        'kind' => 'setKind',
        'attached_docnumber' => 'setAttachedDocnumber',
        'ix_check' => 'setIxCheck',
        'attachment_revision' => 'setAttachmentRevision',
        'compression_mode' => 'setCompressionMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'docnumber' => 'getDocnumber',
        'revision' => 'getRevision',
        'filename' => 'getFilename',
        'filepath' => 'getFilepath',
        'originalname' => 'getOriginalname',
        'device' => 'getDevice',
        'cdlabel' => 'getCdlabel',
        'comment' => 'getComment',
        'importdate' => 'getImportdate',
        'user' => 'getUser',
        'user_complete_name' => 'getUserCompleteName',
        'block' => 'getBlock',
        'compliantcopy' => 'getCompliantcopy',
        'footprint' => 'getFootprint',
        'checksend' => 'getChecksend',
        'aosflag' => 'getAosflag',
        'access' => 'getAccess',
        'save_type' => 'getSaveType',
        'filesize' => 'getFilesize',
        'kind' => 'getKind',
        'attached_docnumber' => 'getAttachedDocnumber',
        'ix_check' => 'getIxCheck',
        'attachment_revision' => 'getAttachmentRevision',
        'compression_mode' => 'getCompressionMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['docnumber'] = isset($data['docnumber']) ? $data['docnumber'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['filepath'] = isset($data['filepath']) ? $data['filepath'] : null;
        $this->container['originalname'] = isset($data['originalname']) ? $data['originalname'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['cdlabel'] = isset($data['cdlabel']) ? $data['cdlabel'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['importdate'] = isset($data['importdate']) ? $data['importdate'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['user_complete_name'] = isset($data['user_complete_name']) ? $data['user_complete_name'] : null;
        $this->container['block'] = isset($data['block']) ? $data['block'] : null;
        $this->container['compliantcopy'] = isset($data['compliantcopy']) ? $data['compliantcopy'] : null;
        $this->container['footprint'] = isset($data['footprint']) ? $data['footprint'] : null;
        $this->container['checksend'] = isset($data['checksend']) ? $data['checksend'] : null;
        $this->container['aosflag'] = isset($data['aosflag']) ? $data['aosflag'] : null;
        $this->container['access'] = isset($data['access']) ? $data['access'] : null;
        $this->container['save_type'] = isset($data['save_type']) ? $data['save_type'] : null;
        $this->container['filesize'] = isset($data['filesize']) ? $data['filesize'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['attached_docnumber'] = isset($data['attached_docnumber']) ? $data['attached_docnumber'] : null;
        $this->container['ix_check'] = isset($data['ix_check']) ? $data['ix_check'] : null;
        $this->container['attachment_revision'] = isset($data['attachment_revision']) ? $data['attachment_revision'] : null;
        $this->container['compression_mode'] = isset($data['compression_mode']) ? $data['compression_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets docnumber
     *
     * @return int
     */
    public function getDocnumber()
    {
        return $this->container['docnumber'];
    }

    /**
     * Sets docnumber
     *
     * @param int $docnumber Document Identifier
     *
     * @return $this
     */
    public function setDocnumber($docnumber)
    {
        $this->container['docnumber'] = $docnumber;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision Revision number
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename Name for the zip file.
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets filepath
     *
     * @return string
     */
    public function getFilepath()
    {
        return $this->container['filepath'];
    }

    /**
     * Sets filepath
     *
     * @param string $filepath Path of compressed file.
     *
     * @return $this
     */
    public function setFilepath($filepath)
    {
        $this->container['filepath'] = $filepath;

        return $this;
    }

    /**
     * Gets originalname
     *
     * @return string
     */
    public function getOriginalname()
    {
        return $this->container['originalname'];
    }

    /**
     * Sets originalname
     *
     * @param string $originalname Name of the file.
     *
     * @return $this
     */
    public function setOriginalname($originalname)
    {
        $this->container['originalname'] = $originalname;

        return $this;
    }

    /**
     * Gets device
     *
     * @return int
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param int $device Possible values:  0: Hd  1: Cd
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets cdlabel
     *
     * @return string
     */
    public function getCdlabel()
    {
        return $this->container['cdlabel'];
    }

    /**
     * Sets cdlabel
     *
     * @param string $cdlabel CD Label
     *
     * @return $this
     */
    public function setCdlabel($cdlabel)
    {
        $this->container['cdlabel'] = $cdlabel;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Description
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets importdate
     *
     * @return \DateTime
     */
    public function getImportdate()
    {
        return $this->container['importdate'];
    }

    /**
     * Sets importdate
     *
     * @param \DateTime $importdate Creation Date
     *
     * @return $this
     */
    public function setImportdate($importdate)
    {
        $this->container['importdate'] = $importdate;

        return $this;
    }

    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user Identifier of the author
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_complete_name
     *
     * @return string
     */
    public function getUserCompleteName()
    {
        return $this->container['user_complete_name'];
    }

    /**
     * Sets user_complete_name
     *
     * @param string $user_complete_name Full name of the author
     *
     * @return $this
     */
    public function setUserCompleteName($user_complete_name)
    {
        $this->container['user_complete_name'] = $user_complete_name;

        return $this;
    }

    /**
     * Gets block
     *
     * @return int
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param int $block Possible values:  0: None  1: Active  2: Marked
     *
     * @return $this
     */
    public function setBlock($block)
    {
        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets compliantcopy
     *
     * @return bool
     */
    public function getCompliantcopy()
    {
        return $this->container['compliantcopy'];
    }

    /**
     * Sets compliantcopy
     *
     * @param bool $compliantcopy Replace with the profile data for web visualization
     *
     * @return $this
     */
    public function setCompliantcopy($compliantcopy)
    {
        $this->container['compliantcopy'] = $compliantcopy;

        return $this;
    }

    /**
     * Gets footprint
     *
     * @return string
     */
    public function getFootprint()
    {
        return $this->container['footprint'];
    }

    /**
     * Sets footprint
     *
     * @param string $footprint Hash of the file
     *
     * @return $this
     */
    public function setFootprint($footprint)
    {
        $this->container['footprint'] = $footprint;

        return $this;
    }

    /**
     * Gets checksend
     *
     * @return bool
     */
    public function getChecksend()
    {
        return $this->container['checksend'];
    }

    /**
     * Sets checksend
     *
     * @param bool $checksend Send the file in the case of email shipment
     *
     * @return $this
     */
    public function setChecksend($checksend)
    {
        $this->container['checksend'] = $checksend;

        return $this;
    }

    /**
     * Gets aosflag
     *
     * @return bool
     */
    public function getAosflag()
    {
        return $this->container['aosflag'];
    }

    /**
     * Sets aosflag
     *
     * @param bool $aosflag Kept in the replacement mode with the document profile
     *
     * @return $this
     */
    public function setAosflag($aosflag)
    {
        $this->container['aosflag'] = $aosflag;

        return $this;
    }

    /**
     * Gets access
     *
     * @return int
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param int $access Possible values:  0: Access_Denied  1: Read_Only  2: Edit  4: Full_Trust  -1: None
     *
     * @return $this
     */
    public function setAccess($access)
    {
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets save_type
     *
     * @return int
     */
    public function getSaveType()
    {
        return $this->container['save_type'];
    }

    /**
     * Sets save_type
     *
     * @param int $save_type Possible values:  0: File_System  1: Database
     *
     * @return $this
     */
    public function setSaveType($save_type)
    {
        $this->container['save_type'] = $save_type;

        return $this;
    }

    /**
     * Gets filesize
     *
     * @return int
     */
    public function getFilesize()
    {
        return $this->container['filesize'];
    }

    /**
     * Sets filesize
     *
     * @param int $filesize File Size
     *
     * @return $this
     */
    public function setFilesize($filesize)
    {
        $this->container['filesize'] = $filesize;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return int
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param int $kind Possible values:  0: ExternalAttachement  1: InternalAttachement
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets attached_docnumber
     *
     * @return int
     */
    public function getAttachedDocnumber()
    {
        return $this->container['attached_docnumber'];
    }

    /**
     * Sets attached_docnumber
     *
     * @param int $attached_docnumber Document Identifier if the internal attachment
     *
     * @return $this
     */
    public function setAttachedDocnumber($attached_docnumber)
    {
        $this->container['attached_docnumber'] = $attached_docnumber;

        return $this;
    }

    /**
     * Gets ix_check
     *
     * @return bool
     */
    public function getIxCheck()
    {
        return $this->container['ix_check'];
    }

    /**
     * Sets ix_check
     *
     * @param bool $ix_check Send the file to IX service in the case of shipment
     *
     * @return $this
     */
    public function setIxCheck($ix_check)
    {
        $this->container['ix_check'] = $ix_check;

        return $this;
    }

    /**
     * Gets attachment_revision
     *
     * @return int
     */
    public function getAttachmentRevision()
    {
        return $this->container['attachment_revision'];
    }

    /**
     * Sets attachment_revision
     *
     * @param int $attachment_revision 
     *
     * @return $this
     */
    public function setAttachmentRevision($attachment_revision)
    {
        $this->container['attachment_revision'] = $attachment_revision;

        return $this;
    }

    /**
     * Gets compression_mode
     *
     * @return int
     */
    public function getCompressionMode()
    {
        return $this->container['compression_mode'];
    }

    /**
     * Sets compression_mode
     *
     * @param int $compression_mode Possible values:  0: None  1: CompressChilkat91  2: CompressChilkat95  3: CompressChilkat95AndCryptoAes256
     *
     * @return $this
     */
    public function setCompressionMode($compression_mode)
    {
        $this->container['compression_mode'] = $compression_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


