<?php
/**
 * SharingOperationDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SharingOperationDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SharingOperationDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SharingOperationDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sharing_operation_id' => 'string',
        'sharing_receiver_id' => 'string',
        'sharing_detail_id' => 'string',
        'operation_kind' => 'int',
        'operation_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sharing_operation_id' => null,
        'sharing_receiver_id' => null,
        'sharing_detail_id' => null,
        'operation_kind' => 'int32',
        'operation_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sharing_operation_id' => 'sharingOperationId',
        'sharing_receiver_id' => 'sharingReceiverId',
        'sharing_detail_id' => 'sharingDetailId',
        'operation_kind' => 'operationKind',
        'operation_time' => 'operationTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sharing_operation_id' => 'setSharingOperationId',
        'sharing_receiver_id' => 'setSharingReceiverId',
        'sharing_detail_id' => 'setSharingDetailId',
        'operation_kind' => 'setOperationKind',
        'operation_time' => 'setOperationTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sharing_operation_id' => 'getSharingOperationId',
        'sharing_receiver_id' => 'getSharingReceiverId',
        'sharing_detail_id' => 'getSharingDetailId',
        'operation_kind' => 'getOperationKind',
        'operation_time' => 'getOperationTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sharing_operation_id'] = isset($data['sharing_operation_id']) ? $data['sharing_operation_id'] : null;
        $this->container['sharing_receiver_id'] = isset($data['sharing_receiver_id']) ? $data['sharing_receiver_id'] : null;
        $this->container['sharing_detail_id'] = isset($data['sharing_detail_id']) ? $data['sharing_detail_id'] : null;
        $this->container['operation_kind'] = isset($data['operation_kind']) ? $data['operation_kind'] : null;
        $this->container['operation_time'] = isset($data['operation_time']) ? $data['operation_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets sharing_operation_id
     *
     * @return string
     */
    public function getSharingOperationId()
    {
        return $this->container['sharing_operation_id'];
    }

    /**
     * Sets sharing_operation_id
     *
     * @param string $sharing_operation_id Unique id for the operation.
     *
     * @return $this
     */
    public function setSharingOperationId($sharing_operation_id)
    {
        $this->container['sharing_operation_id'] = $sharing_operation_id;

        return $this;
    }

    /**
     * Gets sharing_receiver_id
     *
     * @return string
     */
    public function getSharingReceiverId()
    {
        return $this->container['sharing_receiver_id'];
    }

    /**
     * Sets sharing_receiver_id
     *
     * @param string $sharing_receiver_id Unique id for the receiver
     *
     * @return $this
     */
    public function setSharingReceiverId($sharing_receiver_id)
    {
        $this->container['sharing_receiver_id'] = $sharing_receiver_id;

        return $this;
    }

    /**
     * Gets sharing_detail_id
     *
     * @return string
     */
    public function getSharingDetailId()
    {
        return $this->container['sharing_detail_id'];
    }

    /**
     * Sets sharing_detail_id
     *
     * @param string $sharing_detail_id Unique id for the sharing detail.
     *
     * @return $this
     */
    public function setSharingDetailId($sharing_detail_id)
    {
        $this->container['sharing_detail_id'] = $sharing_detail_id;

        return $this;
    }

    /**
     * Gets operation_kind
     *
     * @return int
     */
    public function getOperationKind()
    {
        return $this->container['operation_kind'];
    }

    /**
     * Sets operation_kind
     *
     * @param int $operation_kind Possible values:  0: ReadDocument
     *
     * @return $this
     */
    public function setOperationKind($operation_kind)
    {
        $this->container['operation_kind'] = $operation_kind;

        return $this;
    }

    /**
     * Gets operation_time
     *
     * @return \DateTime
     */
    public function getOperationTime()
    {
        return $this->container['operation_time'];
    }

    /**
     * Sets operation_time
     *
     * @param \DateTime $operation_time DateTime of the operation.
     *
     * @return $this
     */
    public function setOperationTime($operation_time)
    {
        $this->container['operation_time'] = $operation_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


