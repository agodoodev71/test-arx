<?php
/**
 * UserCompleteDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserCompleteDTO Class Doc Comment
 *
 * @category Class
 * @description Class of user
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserCompleteDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserCompleteDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user' => 'int',
        'group' => 'int',
        'description' => 'string',
        'email' => 'string',
        'business_unit' => 'string',
        'password' => 'string',
        'password_new' => 'string',
        'default_type' => 'int',
        'type2' => 'int',
        'type3' => 'int',
        'internal_fax' => 'string',
        'last_mail' => '\DateTime',
        'category' => 'int',
        'workflow' => 'bool',
        'default_state' => 'string',
        'address_book' => 'bool',
        'user_state' => 'int',
        'mail_server' => 'string',
        'web_access' => 'bool',
        'upload' => 'bool',
        'folders' => 'bool',
        'flow' => 'bool',
        'sign' => 'bool',
        'viewer' => 'int',
        'protocol' => 'bool',
        'models' => 'bool',
        'domain' => 'string',
        'out_state' => 'string',
        'mail_body' => 'string',
        'notify' => 'bool',
        'mail_client' => 'string',
        'html_body' => 'int',
        'resp_aos' => 'bool',
        'ass_aos' => 'bool',
        'cod_fis' => 'string',
        'pin' => 'string',
        'guest' => 'bool',
        'password_change' => 'bool',
        'marking' => 'string',
        'type' => 'int',
        'mail_out_default' => 'bool',
        'barcode_access' => 'bool',
        'must_change_password' => 'int',
        'lang' => 'string',
        'profile_default_id' => 'int',
        'ws' => 'bool',
        'psw_fail_count' => 'int',
        'psw_last_fail_date' => '\DateTime',
        'psw_fail_ip_caller' => 'string',
        'disable_psw_expired' => 'bool',
        'lock_out_date_time_utc' => '\DateTime',
        'complete_name' => 'string',
        'complete_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user' => 'int32',
        'group' => 'int32',
        'description' => null,
        'email' => null,
        'business_unit' => null,
        'password' => null,
        'password_new' => null,
        'default_type' => 'int32',
        'type2' => 'int32',
        'type3' => 'int32',
        'internal_fax' => null,
        'last_mail' => 'date-time',
        'category' => 'int32',
        'workflow' => null,
        'default_state' => null,
        'address_book' => null,
        'user_state' => 'int32',
        'mail_server' => null,
        'web_access' => null,
        'upload' => null,
        'folders' => null,
        'flow' => null,
        'sign' => null,
        'viewer' => 'int32',
        'protocol' => null,
        'models' => null,
        'domain' => null,
        'out_state' => null,
        'mail_body' => null,
        'notify' => null,
        'mail_client' => null,
        'html_body' => 'int32',
        'resp_aos' => null,
        'ass_aos' => null,
        'cod_fis' => null,
        'pin' => null,
        'guest' => null,
        'password_change' => null,
        'marking' => 'byte',
        'type' => 'int32',
        'mail_out_default' => null,
        'barcode_access' => null,
        'must_change_password' => 'int32',
        'lang' => null,
        'profile_default_id' => 'int32',
        'ws' => null,
        'psw_fail_count' => 'int32',
        'psw_last_fail_date' => 'date-time',
        'psw_fail_ip_caller' => null,
        'disable_psw_expired' => null,
        'lock_out_date_time_utc' => 'date-time',
        'complete_name' => null,
        'complete_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'group' => 'group',
        'description' => 'description',
        'email' => 'email',
        'business_unit' => 'businessUnit',
        'password' => 'password',
        'password_new' => 'passwordNew',
        'default_type' => 'defaultType',
        'type2' => 'type2',
        'type3' => 'type3',
        'internal_fax' => 'internalFax',
        'last_mail' => 'lastMail',
        'category' => 'category',
        'workflow' => 'workflow',
        'default_state' => 'defaultState',
        'address_book' => 'addressBook',
        'user_state' => 'userState',
        'mail_server' => 'mailServer',
        'web_access' => 'webAccess',
        'upload' => 'upload',
        'folders' => 'folders',
        'flow' => 'flow',
        'sign' => 'sign',
        'viewer' => 'viewer',
        'protocol' => 'protocol',
        'models' => 'models',
        'domain' => 'domain',
        'out_state' => 'outState',
        'mail_body' => 'mailBody',
        'notify' => 'notify',
        'mail_client' => 'mailClient',
        'html_body' => 'htmlBody',
        'resp_aos' => 'respAos',
        'ass_aos' => 'assAos',
        'cod_fis' => 'codFis',
        'pin' => 'pin',
        'guest' => 'guest',
        'password_change' => 'passwordChange',
        'marking' => 'marking',
        'type' => 'type',
        'mail_out_default' => 'mailOutDefault',
        'barcode_access' => 'barcodeAccess',
        'must_change_password' => 'mustChangePassword',
        'lang' => 'lang',
        'profile_default_id' => 'profileDefault_Id',
        'ws' => 'ws',
        'psw_fail_count' => 'pswFailCount',
        'psw_last_fail_date' => 'pswLastFailDate',
        'psw_fail_ip_caller' => 'pswFailIpCaller',
        'disable_psw_expired' => 'disablePswExpired',
        'lock_out_date_time_utc' => 'lockOutDateTimeUtc',
        'complete_name' => 'completeName',
        'complete_description' => 'completeDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'group' => 'setGroup',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'business_unit' => 'setBusinessUnit',
        'password' => 'setPassword',
        'password_new' => 'setPasswordNew',
        'default_type' => 'setDefaultType',
        'type2' => 'setType2',
        'type3' => 'setType3',
        'internal_fax' => 'setInternalFax',
        'last_mail' => 'setLastMail',
        'category' => 'setCategory',
        'workflow' => 'setWorkflow',
        'default_state' => 'setDefaultState',
        'address_book' => 'setAddressBook',
        'user_state' => 'setUserState',
        'mail_server' => 'setMailServer',
        'web_access' => 'setWebAccess',
        'upload' => 'setUpload',
        'folders' => 'setFolders',
        'flow' => 'setFlow',
        'sign' => 'setSign',
        'viewer' => 'setViewer',
        'protocol' => 'setProtocol',
        'models' => 'setModels',
        'domain' => 'setDomain',
        'out_state' => 'setOutState',
        'mail_body' => 'setMailBody',
        'notify' => 'setNotify',
        'mail_client' => 'setMailClient',
        'html_body' => 'setHtmlBody',
        'resp_aos' => 'setRespAos',
        'ass_aos' => 'setAssAos',
        'cod_fis' => 'setCodFis',
        'pin' => 'setPin',
        'guest' => 'setGuest',
        'password_change' => 'setPasswordChange',
        'marking' => 'setMarking',
        'type' => 'setType',
        'mail_out_default' => 'setMailOutDefault',
        'barcode_access' => 'setBarcodeAccess',
        'must_change_password' => 'setMustChangePassword',
        'lang' => 'setLang',
        'profile_default_id' => 'setProfileDefaultId',
        'ws' => 'setWs',
        'psw_fail_count' => 'setPswFailCount',
        'psw_last_fail_date' => 'setPswLastFailDate',
        'psw_fail_ip_caller' => 'setPswFailIpCaller',
        'disable_psw_expired' => 'setDisablePswExpired',
        'lock_out_date_time_utc' => 'setLockOutDateTimeUtc',
        'complete_name' => 'setCompleteName',
        'complete_description' => 'setCompleteDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'group' => 'getGroup',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'business_unit' => 'getBusinessUnit',
        'password' => 'getPassword',
        'password_new' => 'getPasswordNew',
        'default_type' => 'getDefaultType',
        'type2' => 'getType2',
        'type3' => 'getType3',
        'internal_fax' => 'getInternalFax',
        'last_mail' => 'getLastMail',
        'category' => 'getCategory',
        'workflow' => 'getWorkflow',
        'default_state' => 'getDefaultState',
        'address_book' => 'getAddressBook',
        'user_state' => 'getUserState',
        'mail_server' => 'getMailServer',
        'web_access' => 'getWebAccess',
        'upload' => 'getUpload',
        'folders' => 'getFolders',
        'flow' => 'getFlow',
        'sign' => 'getSign',
        'viewer' => 'getViewer',
        'protocol' => 'getProtocol',
        'models' => 'getModels',
        'domain' => 'getDomain',
        'out_state' => 'getOutState',
        'mail_body' => 'getMailBody',
        'notify' => 'getNotify',
        'mail_client' => 'getMailClient',
        'html_body' => 'getHtmlBody',
        'resp_aos' => 'getRespAos',
        'ass_aos' => 'getAssAos',
        'cod_fis' => 'getCodFis',
        'pin' => 'getPin',
        'guest' => 'getGuest',
        'password_change' => 'getPasswordChange',
        'marking' => 'getMarking',
        'type' => 'getType',
        'mail_out_default' => 'getMailOutDefault',
        'barcode_access' => 'getBarcodeAccess',
        'must_change_password' => 'getMustChangePassword',
        'lang' => 'getLang',
        'profile_default_id' => 'getProfileDefaultId',
        'ws' => 'getWs',
        'psw_fail_count' => 'getPswFailCount',
        'psw_last_fail_date' => 'getPswLastFailDate',
        'psw_fail_ip_caller' => 'getPswFailIpCaller',
        'disable_psw_expired' => 'getDisablePswExpired',
        'lock_out_date_time_utc' => 'getLockOutDateTimeUtc',
        'complete_name' => 'getCompleteName',
        'complete_description' => 'getCompleteDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['business_unit'] = isset($data['business_unit']) ? $data['business_unit'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['password_new'] = isset($data['password_new']) ? $data['password_new'] : null;
        $this->container['default_type'] = isset($data['default_type']) ? $data['default_type'] : null;
        $this->container['type2'] = isset($data['type2']) ? $data['type2'] : null;
        $this->container['type3'] = isset($data['type3']) ? $data['type3'] : null;
        $this->container['internal_fax'] = isset($data['internal_fax']) ? $data['internal_fax'] : null;
        $this->container['last_mail'] = isset($data['last_mail']) ? $data['last_mail'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['workflow'] = isset($data['workflow']) ? $data['workflow'] : null;
        $this->container['default_state'] = isset($data['default_state']) ? $data['default_state'] : null;
        $this->container['address_book'] = isset($data['address_book']) ? $data['address_book'] : null;
        $this->container['user_state'] = isset($data['user_state']) ? $data['user_state'] : null;
        $this->container['mail_server'] = isset($data['mail_server']) ? $data['mail_server'] : null;
        $this->container['web_access'] = isset($data['web_access']) ? $data['web_access'] : null;
        $this->container['upload'] = isset($data['upload']) ? $data['upload'] : null;
        $this->container['folders'] = isset($data['folders']) ? $data['folders'] : null;
        $this->container['flow'] = isset($data['flow']) ? $data['flow'] : null;
        $this->container['sign'] = isset($data['sign']) ? $data['sign'] : null;
        $this->container['viewer'] = isset($data['viewer']) ? $data['viewer'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['models'] = isset($data['models']) ? $data['models'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['out_state'] = isset($data['out_state']) ? $data['out_state'] : null;
        $this->container['mail_body'] = isset($data['mail_body']) ? $data['mail_body'] : null;
        $this->container['notify'] = isset($data['notify']) ? $data['notify'] : null;
        $this->container['mail_client'] = isset($data['mail_client']) ? $data['mail_client'] : null;
        $this->container['html_body'] = isset($data['html_body']) ? $data['html_body'] : null;
        $this->container['resp_aos'] = isset($data['resp_aos']) ? $data['resp_aos'] : null;
        $this->container['ass_aos'] = isset($data['ass_aos']) ? $data['ass_aos'] : null;
        $this->container['cod_fis'] = isset($data['cod_fis']) ? $data['cod_fis'] : null;
        $this->container['pin'] = isset($data['pin']) ? $data['pin'] : null;
        $this->container['guest'] = isset($data['guest']) ? $data['guest'] : null;
        $this->container['password_change'] = isset($data['password_change']) ? $data['password_change'] : null;
        $this->container['marking'] = isset($data['marking']) ? $data['marking'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['mail_out_default'] = isset($data['mail_out_default']) ? $data['mail_out_default'] : null;
        $this->container['barcode_access'] = isset($data['barcode_access']) ? $data['barcode_access'] : null;
        $this->container['must_change_password'] = isset($data['must_change_password']) ? $data['must_change_password'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['profile_default_id'] = isset($data['profile_default_id']) ? $data['profile_default_id'] : null;
        $this->container['ws'] = isset($data['ws']) ? $data['ws'] : null;
        $this->container['psw_fail_count'] = isset($data['psw_fail_count']) ? $data['psw_fail_count'] : null;
        $this->container['psw_last_fail_date'] = isset($data['psw_last_fail_date']) ? $data['psw_last_fail_date'] : null;
        $this->container['psw_fail_ip_caller'] = isset($data['psw_fail_ip_caller']) ? $data['psw_fail_ip_caller'] : null;
        $this->container['disable_psw_expired'] = isset($data['disable_psw_expired']) ? $data['disable_psw_expired'] : null;
        $this->container['lock_out_date_time_utc'] = isset($data['lock_out_date_time_utc']) ? $data['lock_out_date_time_utc'] : null;
        $this->container['complete_name'] = isset($data['complete_name']) ? $data['complete_name'] : null;
        $this->container['complete_description'] = isset($data['complete_description']) ? $data['complete_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['marking']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['marking'])) {
            $invalidProperties[] = "invalid value for 'marking', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['marking'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user Identifier
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets group
     *
     * @return int
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param int $group Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return string
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param string $business_unit Business Unit
     *
     * @return $this
     */
    public function setBusinessUnit($business_unit)
    {
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets password_new
     *
     * @return string
     */
    public function getPasswordNew()
    {
        return $this->container['password_new'];
    }

    /**
     * Sets password_new
     *
     * @param string $password_new New Password
     *
     * @return $this
     */
    public function setPasswordNew($password_new)
    {
        $this->container['password_new'] = $password_new;

        return $this;
    }

    /**
     * Gets default_type
     *
     * @return int
     */
    public function getDefaultType()
    {
        return $this->container['default_type'];
    }

    /**
     * Sets default_type
     *
     * @param int $default_type Default Document Type of First Level
     *
     * @return $this
     */
    public function setDefaultType($default_type)
    {
        $this->container['default_type'] = $default_type;

        return $this;
    }

    /**
     * Gets type2
     *
     * @return int
     */
    public function getType2()
    {
        return $this->container['type2'];
    }

    /**
     * Sets type2
     *
     * @param int $type2 Default Document Type of Second Level
     *
     * @return $this
     */
    public function setType2($type2)
    {
        $this->container['type2'] = $type2;

        return $this;
    }

    /**
     * Gets type3
     *
     * @return int
     */
    public function getType3()
    {
        return $this->container['type3'];
    }

    /**
     * Sets type3
     *
     * @param int $type3 Default Document Type of Third Level
     *
     * @return $this
     */
    public function setType3($type3)
    {
        $this->container['type3'] = $type3;

        return $this;
    }

    /**
     * Gets internal_fax
     *
     * @return string
     */
    public function getInternalFax()
    {
        return $this->container['internal_fax'];
    }

    /**
     * Sets internal_fax
     *
     * @param string $internal_fax Personal Fax
     *
     * @return $this
     */
    public function setInternalFax($internal_fax)
    {
        $this->container['internal_fax'] = $internal_fax;

        return $this;
    }

    /**
     * Gets last_mail
     *
     * @return \DateTime
     */
    public function getLastMail()
    {
        return $this->container['last_mail'];
    }

    /**
     * Sets last_mail
     *
     * @param \DateTime $last_mail Date of last reading email
     *
     * @return $this
     */
    public function setLastMail($last_mail)
    {
        $this->container['last_mail'] = $last_mail;

        return $this;
    }

    /**
     * Gets category
     *
     * @return int
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int $category Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets workflow
     *
     * @return bool
     */
    public function getWorkflow()
    {
        return $this->container['workflow'];
    }

    /**
     * Sets workflow
     *
     * @param bool $workflow Enabling Workflow Management
     *
     * @return $this
     */
    public function setWorkflow($workflow)
    {
        $this->container['workflow'] = $workflow;

        return $this;
    }

    /**
     * Gets default_state
     *
     * @return string
     */
    public function getDefaultState()
    {
        return $this->container['default_state'];
    }

    /**
     * Sets default_state
     *
     * @param string $default_state Default Document Status
     *
     * @return $this
     */
    public function setDefaultState($default_state)
    {
        $this->container['default_state'] = $default_state;

        return $this;
    }

    /**
     * Gets address_book
     *
     * @return bool
     */
    public function getAddressBook()
    {
        return $this->container['address_book'];
    }

    /**
     * Sets address_book
     *
     * @param bool $address_book Enabling to insert new address book items into profiling
     *
     * @return $this
     */
    public function setAddressBook($address_book)
    {
        $this->container['address_book'] = $address_book;

        return $this;
    }

    /**
     * Gets user_state
     *
     * @return int
     */
    public function getUserState()
    {
        return $this->container['user_state'];
    }

    /**
     * Sets user_state
     *
     * @param int $user_state Possible values:  0: NonAttivo  1: Attivo  2: Nascosto
     *
     * @return $this
     */
    public function setUserState($user_state)
    {
        $this->container['user_state'] = $user_state;

        return $this;
    }

    /**
     * Gets mail_server
     *
     * @return string
     */
    public function getMailServer()
    {
        return $this->container['mail_server'];
    }

    /**
     * Sets mail_server
     *
     * @param string $mail_server Email Server
     *
     * @return $this
     */
    public function setMailServer($mail_server)
    {
        $this->container['mail_server'] = $mail_server;

        return $this;
    }

    /**
     * Gets web_access
     *
     * @return bool
     */
    public function getWebAccess()
    {
        return $this->container['web_access'];
    }

    /**
     * Sets web_access
     *
     * @param bool $web_access Access via Web
     *
     * @return $this
     */
    public function setWebAccess($web_access)
    {
        $this->container['web_access'] = $web_access;

        return $this;
    }

    /**
     * Gets upload
     *
     * @return bool
     */
    public function getUpload()
    {
        return $this->container['upload'];
    }

    /**
     * Sets upload
     *
     * @param bool $upload Enabled to Import
     *
     * @return $this
     */
    public function setUpload($upload)
    {
        $this->container['upload'] = $upload;

        return $this;
    }

    /**
     * Gets folders
     *
     * @return bool
     */
    public function getFolders()
    {
        return $this->container['folders'];
    }

    /**
     * Sets folders
     *
     * @param bool $folders Enabled to OCR
     *
     * @return $this
     */
    public function setFolders($folders)
    {
        $this->container['folders'] = $folders;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return bool
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param bool $flow Enabled to Workflow
     *
     * @return $this
     */
    public function setFlow($flow)
    {
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets sign
     *
     * @return bool
     */
    public function getSign()
    {
        return $this->container['sign'];
    }

    /**
     * Sets sign
     *
     * @param bool $sign Enabled to Sign
     *
     * @return $this
     */
    public function setSign($sign)
    {
        $this->container['sign'] = $sign;

        return $this;
    }

    /**
     * Gets viewer
     *
     * @return int
     */
    public function getViewer()
    {
        return $this->container['viewer'];
    }

    /**
     * Sets viewer
     *
     * @param int $viewer Possible values:  0: Standard  1: Lite  2: Comunicazioni  3: Portal
     *
     * @return $this
     */
    public function setViewer($viewer)
    {
        $this->container['viewer'] = $viewer;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return bool
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param bool $protocol Enabled to Public Amministration (PA) Protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets models
     *
     * @return bool
     */
    public function getModels()
    {
        return $this->container['models'];
    }

    /**
     * Sets models
     *
     * @param bool $models Enabled to Templates
     *
     * @return $this
     */
    public function setModels($models)
    {
        $this->container['models'] = $models;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain Domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets out_state
     *
     * @return string
     */
    public function getOutState()
    {
        return $this->container['out_state'];
    }

    /**
     * Sets out_state
     *
     * @param string $out_state Out Status
     *
     * @return $this
     */
    public function setOutState($out_state)
    {
        $this->container['out_state'] = $out_state;

        return $this;
    }

    /**
     * Gets mail_body
     *
     * @return string
     */
    public function getMailBody()
    {
        return $this->container['mail_body'];
    }

    /**
     * Sets mail_body
     *
     * @param string $mail_body Email Body
     *
     * @return $this
     */
    public function setMailBody($mail_body)
    {
        $this->container['mail_body'] = $mail_body;

        return $this;
    }

    /**
     * Gets notify
     *
     * @return bool
     */
    public function getNotify()
    {
        return $this->container['notify'];
    }

    /**
     * Sets notify
     *
     * @param bool $notify Enabled to Notify
     *
     * @return $this
     */
    public function setNotify($notify)
    {
        $this->container['notify'] = $notify;

        return $this;
    }

    /**
     * Gets mail_client
     *
     * @return string
     */
    public function getMailClient()
    {
        return $this->container['mail_client'];
    }

    /**
     * Sets mail_client
     *
     * @param string $mail_client Mailer client
     *
     * @return $this
     */
    public function setMailClient($mail_client)
    {
        $this->container['mail_client'] = $mail_client;

        return $this;
    }

    /**
     * Gets html_body
     *
     * @return int
     */
    public function getHtmlBody()
    {
        return $this->container['html_body'];
    }

    /**
     * Sets html_body
     *
     * @param int $html_body Possible values:  0: Disabilitato  1: SoloSpedizione  2: SoloRicezione  3: SpedizioneRicezione
     *
     * @return $this
     */
    public function setHtmlBody($html_body)
    {
        $this->container['html_body'] = $html_body;

        return $this;
    }

    /**
     * Gets resp_aos
     *
     * @return bool
     */
    public function getRespAos()
    {
        return $this->container['resp_aos'];
    }

    /**
     * Sets resp_aos
     *
     * @param bool $resp_aos Person in Charge of AOS
     *
     * @return $this
     */
    public function setRespAos($resp_aos)
    {
        $this->container['resp_aos'] = $resp_aos;

        return $this;
    }

    /**
     * Gets ass_aos
     *
     * @return bool
     */
    public function getAssAos()
    {
        return $this->container['ass_aos'];
    }

    /**
     * Sets ass_aos
     *
     * @param bool $ass_aos Enabled to Profile Manual Emails
     *
     * @return $this
     */
    public function setAssAos($ass_aos)
    {
        $this->container['ass_aos'] = $ass_aos;

        return $this;
    }

    /**
     * Gets cod_fis
     *
     * @return string
     */
    public function getCodFis()
    {
        return $this->container['cod_fis'];
    }

    /**
     * Sets cod_fis
     *
     * @param string $cod_fis Fiscal Code
     *
     * @return $this
     */
    public function setCodFis($cod_fis)
    {
        $this->container['cod_fis'] = $cod_fis;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string $pin Pin
     *
     * @return $this
     */
    public function setPin($pin)
    {
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets guest
     *
     * @return bool
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param bool $guest Guest
     *
     * @return $this
     */
    public function setGuest($guest)
    {
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets password_change
     *
     * @return bool
     */
    public function getPasswordChange()
    {
        return $this->container['password_change'];
    }

    /**
     * Sets password_change
     *
     * @param bool $password_change Change Password
     *
     * @return $this
     */
    public function setPasswordChange($password_change)
    {
        $this->container['password_change'] = $password_change;

        return $this;
    }

    /**
     * Gets marking
     *
     * @return string
     */
    public function getMarking()
    {
        return $this->container['marking'];
    }

    /**
     * Sets marking
     *
     * @param string $marking Imagine for the Digital Signature
     *
     * @return $this
     */
    public function setMarking($marking)
    {

        if (!is_null($marking) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $marking))) {
            throw new \InvalidArgumentException("invalid value for $marking when calling UserCompleteDTO., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['marking'] = $marking;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets mail_out_default
     *
     * @return bool
     */
    public function getMailOutDefault()
    {
        return $this->container['mail_out_default'];
    }

    /**
     * Sets mail_out_default
     *
     * @param bool $mail_out_default Enabled to Profile Manual Outgoing Emails
     *
     * @return $this
     */
    public function setMailOutDefault($mail_out_default)
    {
        $this->container['mail_out_default'] = $mail_out_default;

        return $this;
    }

    /**
     * Gets barcode_access
     *
     * @return bool
     */
    public function getBarcodeAccess()
    {
        return $this->container['barcode_access'];
    }

    /**
     * Sets barcode_access
     *
     * @param bool $barcode_access Enabled to Barcode
     *
     * @return $this
     */
    public function setBarcodeAccess($barcode_access)
    {
        $this->container['barcode_access'] = $barcode_access;

        return $this;
    }

    /**
     * Gets must_change_password
     *
     * @return int
     */
    public function getMustChangePassword()
    {
        return $this->container['must_change_password'];
    }

    /**
     * Sets must_change_password
     *
     * @param int $must_change_password Possible values:  0: No  1: Yes  2: YesForChangePasswordNew
     *
     * @return $this
     */
    public function setMustChangePassword($must_change_password)
    {
        $this->container['must_change_password'] = $must_change_password;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang Language
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets profile_default_id
     *
     * @return int
     */
    public function getProfileDefaultId()
    {
        return $this->container['profile_default_id'];
    }

    /**
     * Sets profile_default_id
     *
     * @param int $profile_default_id Predefined Profile Identifier
     *
     * @return $this
     */
    public function setProfileDefaultId($profile_default_id)
    {
        $this->container['profile_default_id'] = $profile_default_id;

        return $this;
    }

    /**
     * Gets ws
     *
     * @return bool
     */
    public function getWs()
    {
        return $this->container['ws'];
    }

    /**
     * Sets ws
     *
     * @param bool $ws Enabled to IX service.
     *
     * @return $this
     */
    public function setWs($ws)
    {
        $this->container['ws'] = $ws;

        return $this;
    }

    /**
     * Gets psw_fail_count
     *
     * @return int
     */
    public function getPswFailCount()
    {
        return $this->container['psw_fail_count'];
    }

    /**
     * Sets psw_fail_count
     *
     * @param int $psw_fail_count Count of the failed attempts to change password
     *
     * @return $this
     */
    public function setPswFailCount($psw_fail_count)
    {
        $this->container['psw_fail_count'] = $psw_fail_count;

        return $this;
    }

    /**
     * Gets psw_last_fail_date
     *
     * @return \DateTime
     */
    public function getPswLastFailDate()
    {
        return $this->container['psw_last_fail_date'];
    }

    /**
     * Sets psw_last_fail_date
     *
     * @param \DateTime $psw_last_fail_date Last failed Attempt to change password
     *
     * @return $this
     */
    public function setPswLastFailDate($psw_last_fail_date)
    {
        $this->container['psw_last_fail_date'] = $psw_last_fail_date;

        return $this;
    }

    /**
     * Gets psw_fail_ip_caller
     *
     * @return string
     */
    public function getPswFailIpCaller()
    {
        return $this->container['psw_fail_ip_caller'];
    }

    /**
     * Sets psw_fail_ip_caller
     *
     * @param string $psw_fail_ip_caller Ip Address used by failed change password
     *
     * @return $this
     */
    public function setPswFailIpCaller($psw_fail_ip_caller)
    {
        $this->container['psw_fail_ip_caller'] = $psw_fail_ip_caller;

        return $this;
    }

    /**
     * Gets disable_psw_expired
     *
     * @return bool
     */
    public function getDisablePswExpired()
    {
        return $this->container['disable_psw_expired'];
    }

    /**
     * Sets disable_psw_expired
     *
     * @param bool $disable_psw_expired Disabled Expired Password
     *
     * @return $this
     */
    public function setDisablePswExpired($disable_psw_expired)
    {
        $this->container['disable_psw_expired'] = $disable_psw_expired;

        return $this;
    }

    /**
     * Gets lock_out_date_time_utc
     *
     * @return \DateTime
     */
    public function getLockOutDateTimeUtc()
    {
        return $this->container['lock_out_date_time_utc'];
    }

    /**
     * Sets lock_out_date_time_utc
     *
     * @param \DateTime $lock_out_date_time_utc User Date Blocked
     *
     * @return $this
     */
    public function setLockOutDateTimeUtc($lock_out_date_time_utc)
    {
        $this->container['lock_out_date_time_utc'] = $lock_out_date_time_utc;

        return $this;
    }

    /**
     * Gets complete_name
     *
     * @return string
     */
    public function getCompleteName()
    {
        return $this->container['complete_name'];
    }

    /**
     * Sets complete_name
     *
     * @param string $complete_name Full Name
     *
     * @return $this
     */
    public function setCompleteName($complete_name)
    {
        $this->container['complete_name'] = $complete_name;

        return $this;
    }

    /**
     * Gets complete_description
     *
     * @return string
     */
    public function getCompleteDescription()
    {
        return $this->container['complete_description'];
    }

    /**
     * Sets complete_description
     *
     * @param string $complete_description Full Description
     *
     * @return $this
     */
    public function setCompleteDescription($complete_description)
    {
        $this->container['complete_description'] = $complete_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


