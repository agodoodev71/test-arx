<?php
/**
 * QueueAggregationStatusInfoDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QueueAggregationStatusInfoDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueueAggregationStatusInfoDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueueAggregationStatusInfoDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'working_progress' => 'int',
        'queue_status' => 'int',
        'is_completed' => 'bool',
        'queue_id' => 'string',
        'queue_name' => 'string',
        'queue_type' => 'string',
        'created_at' => '\DateTime',
        'expire_at' => '\DateTime',
        'work_item_count' => 'int',
        'state_count' => '\Swagger\Client\Model\QueueStateAggregationInfoDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'working_progress' => 'int32',
        'queue_status' => 'int32',
        'is_completed' => null,
        'queue_id' => null,
        'queue_name' => null,
        'queue_type' => null,
        'created_at' => 'date-time',
        'expire_at' => 'date-time',
        'work_item_count' => 'int32',
        'state_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'working_progress' => 'workingProgress',
        'queue_status' => 'queueStatus',
        'is_completed' => 'isCompleted',
        'queue_id' => 'queueId',
        'queue_name' => 'queueName',
        'queue_type' => 'queueType',
        'created_at' => 'createdAt',
        'expire_at' => 'expireAt',
        'work_item_count' => 'workItemCount',
        'state_count' => 'stateCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'working_progress' => 'setWorkingProgress',
        'queue_status' => 'setQueueStatus',
        'is_completed' => 'setIsCompleted',
        'queue_id' => 'setQueueId',
        'queue_name' => 'setQueueName',
        'queue_type' => 'setQueueType',
        'created_at' => 'setCreatedAt',
        'expire_at' => 'setExpireAt',
        'work_item_count' => 'setWorkItemCount',
        'state_count' => 'setStateCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'working_progress' => 'getWorkingProgress',
        'queue_status' => 'getQueueStatus',
        'is_completed' => 'getIsCompleted',
        'queue_id' => 'getQueueId',
        'queue_name' => 'getQueueName',
        'queue_type' => 'getQueueType',
        'created_at' => 'getCreatedAt',
        'expire_at' => 'getExpireAt',
        'work_item_count' => 'getWorkItemCount',
        'state_count' => 'getStateCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['working_progress'] = isset($data['working_progress']) ? $data['working_progress'] : null;
        $this->container['queue_status'] = isset($data['queue_status']) ? $data['queue_status'] : null;
        $this->container['is_completed'] = isset($data['is_completed']) ? $data['is_completed'] : null;
        $this->container['queue_id'] = isset($data['queue_id']) ? $data['queue_id'] : null;
        $this->container['queue_name'] = isset($data['queue_name']) ? $data['queue_name'] : null;
        $this->container['queue_type'] = isset($data['queue_type']) ? $data['queue_type'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['expire_at'] = isset($data['expire_at']) ? $data['expire_at'] : null;
        $this->container['work_item_count'] = isset($data['work_item_count']) ? $data['work_item_count'] : null;
        $this->container['state_count'] = isset($data['state_count']) ? $data['state_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets working_progress
     *
     * @return int
     */
    public function getWorkingProgress()
    {
        return $this->container['working_progress'];
    }

    /**
     * Sets working_progress
     *
     * @param int $working_progress working_progress
     *
     * @return $this
     */
    public function setWorkingProgress($working_progress)
    {
        $this->container['working_progress'] = $working_progress;

        return $this;
    }

    /**
     * Gets queue_status
     *
     * @return int
     */
    public function getQueueStatus()
    {
        return $this->container['queue_status'];
    }

    /**
     * Sets queue_status
     *
     * @param int $queue_status Possible values:  0: CompletedOk  1: CompletedPartialOk  2: CompletedKo  3: Deleted  4: Processing  5: Enqueued  6: Waiting  7: Failed
     *
     * @return $this
     */
    public function setQueueStatus($queue_status)
    {
        $this->container['queue_status'] = $queue_status;

        return $this;
    }

    /**
     * Gets is_completed
     *
     * @return bool
     */
    public function getIsCompleted()
    {
        return $this->container['is_completed'];
    }

    /**
     * Sets is_completed
     *
     * @param bool $is_completed is_completed
     *
     * @return $this
     */
    public function setIsCompleted($is_completed)
    {
        $this->container['is_completed'] = $is_completed;

        return $this;
    }

    /**
     * Gets queue_id
     *
     * @return string
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     *
     * @param string $queue_id Queue Identifier
     *
     * @return $this
     */
    public function setQueueId($queue_id)
    {
        $this->container['queue_id'] = $queue_id;

        return $this;
    }

    /**
     * Gets queue_name
     *
     * @return string
     */
    public function getQueueName()
    {
        return $this->container['queue_name'];
    }

    /**
     * Sets queue_name
     *
     * @param string $queue_name Queue Name
     *
     * @return $this
     */
    public function setQueueName($queue_name)
    {
        $this->container['queue_name'] = $queue_name;

        return $this;
    }

    /**
     * Gets queue_type
     *
     * @return string
     */
    public function getQueueType()
    {
        return $this->container['queue_type'];
    }

    /**
     * Sets queue_type
     *
     * @param string $queue_type Queue Type
     *
     * @return $this
     */
    public function setQueueType($queue_type)
    {
        $this->container['queue_type'] = $queue_type;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation Date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime $expire_at Expiration Date
     *
     * @return $this
     */
    public function setExpireAt($expire_at)
    {
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets work_item_count
     *
     * @return int
     */
    public function getWorkItemCount()
    {
        return $this->container['work_item_count'];
    }

    /**
     * Sets work_item_count
     *
     * @param int $work_item_count Items
     *
     * @return $this
     */
    public function setWorkItemCount($work_item_count)
    {
        $this->container['work_item_count'] = $work_item_count;

        return $this;
    }

    /**
     * Gets state_count
     *
     * @return \Swagger\Client\Model\QueueStateAggregationInfoDto
     */
    public function getStateCount()
    {
        return $this->container['state_count'];
    }

    /**
     * Sets state_count
     *
     * @param \Swagger\Client\Model\QueueStateAggregationInfoDto $state_count Status of items
     *
     * @return $this
     */
    public function setStateCount($state_count)
    {
        $this->container['state_count'] = $state_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


