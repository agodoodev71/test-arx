<?php
/**
 * ViewEditDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ViewEditDTO Class Doc Comment
 *
 * @category Class
 * @description Class of edit of View
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ViewEditDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ViewEditDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'description' => 'string',
        'user' => 'int',
        'user_complete_name' => 'string',
        'document_type' => 'int',
        'type2' => 'int',
        'type3' => 'int',
        'select_fields' => '\Swagger\Client\Model\SelectDTO',
        'edit_fields' => '\Swagger\Client\Model\SearchDTO',
        'lock_fields' => '\Swagger\Client\Model\SearchDTO',
        'show_fields' => 'bool',
        'form_open' => 'bool',
        'allow_empty_filter_mode' => 'int',
        'show_groups_mode' => 'int',
        'can_execute' => 'bool',
        'can_update' => 'bool',
        'can_delete' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'description' => null,
        'user' => 'int32',
        'user_complete_name' => null,
        'document_type' => 'int32',
        'type2' => 'int32',
        'type3' => 'int32',
        'select_fields' => null,
        'edit_fields' => null,
        'lock_fields' => null,
        'show_fields' => null,
        'form_open' => null,
        'allow_empty_filter_mode' => 'int32',
        'show_groups_mode' => 'int32',
        'can_execute' => null,
        'can_update' => null,
        'can_delete' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'user' => 'user',
        'user_complete_name' => 'userCompleteName',
        'document_type' => 'documentType',
        'type2' => 'type2',
        'type3' => 'type3',
        'select_fields' => 'selectFields',
        'edit_fields' => 'editFields',
        'lock_fields' => 'lockFields',
        'show_fields' => 'showFields',
        'form_open' => 'formOpen',
        'allow_empty_filter_mode' => 'allowEmptyFilterMode',
        'show_groups_mode' => 'showGroupsMode',
        'can_execute' => 'canExecute',
        'can_update' => 'canUpdate',
        'can_delete' => 'canDelete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'user' => 'setUser',
        'user_complete_name' => 'setUserCompleteName',
        'document_type' => 'setDocumentType',
        'type2' => 'setType2',
        'type3' => 'setType3',
        'select_fields' => 'setSelectFields',
        'edit_fields' => 'setEditFields',
        'lock_fields' => 'setLockFields',
        'show_fields' => 'setShowFields',
        'form_open' => 'setFormOpen',
        'allow_empty_filter_mode' => 'setAllowEmptyFilterMode',
        'show_groups_mode' => 'setShowGroupsMode',
        'can_execute' => 'setCanExecute',
        'can_update' => 'setCanUpdate',
        'can_delete' => 'setCanDelete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'user' => 'getUser',
        'user_complete_name' => 'getUserCompleteName',
        'document_type' => 'getDocumentType',
        'type2' => 'getType2',
        'type3' => 'getType3',
        'select_fields' => 'getSelectFields',
        'edit_fields' => 'getEditFields',
        'lock_fields' => 'getLockFields',
        'show_fields' => 'getShowFields',
        'form_open' => 'getFormOpen',
        'allow_empty_filter_mode' => 'getAllowEmptyFilterMode',
        'show_groups_mode' => 'getShowGroupsMode',
        'can_execute' => 'getCanExecute',
        'can_update' => 'getCanUpdate',
        'can_delete' => 'getCanDelete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['user_complete_name'] = isset($data['user_complete_name']) ? $data['user_complete_name'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['type2'] = isset($data['type2']) ? $data['type2'] : null;
        $this->container['type3'] = isset($data['type3']) ? $data['type3'] : null;
        $this->container['select_fields'] = isset($data['select_fields']) ? $data['select_fields'] : null;
        $this->container['edit_fields'] = isset($data['edit_fields']) ? $data['edit_fields'] : null;
        $this->container['lock_fields'] = isset($data['lock_fields']) ? $data['lock_fields'] : null;
        $this->container['show_fields'] = isset($data['show_fields']) ? $data['show_fields'] : null;
        $this->container['form_open'] = isset($data['form_open']) ? $data['form_open'] : null;
        $this->container['allow_empty_filter_mode'] = isset($data['allow_empty_filter_mode']) ? $data['allow_empty_filter_mode'] : null;
        $this->container['show_groups_mode'] = isset($data['show_groups_mode']) ? $data['show_groups_mode'] : null;
        $this->container['can_execute'] = isset($data['can_execute']) ? $data['can_execute'] : null;
        $this->container['can_update'] = isset($data['can_update']) ? $data['can_update'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user User Identifier
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_complete_name
     *
     * @return string
     */
    public function getUserCompleteName()
    {
        return $this->container['user_complete_name'];
    }

    /**
     * Sets user_complete_name
     *
     * @param string $user_complete_name User Description
     *
     * @return $this
     */
    public function setUserCompleteName($user_complete_name)
    {
        $this->container['user_complete_name'] = $user_complete_name;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return int
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param int $document_type Document Type Identifier for first level
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets type2
     *
     * @return int
     */
    public function getType2()
    {
        return $this->container['type2'];
    }

    /**
     * Sets type2
     *
     * @param int $type2 Document Type Identifier for second level
     *
     * @return $this
     */
    public function setType2($type2)
    {
        $this->container['type2'] = $type2;

        return $this;
    }

    /**
     * Gets type3
     *
     * @return int
     */
    public function getType3()
    {
        return $this->container['type3'];
    }

    /**
     * Sets type3
     *
     * @param int $type3 Document Type Identifier for third level
     *
     * @return $this
     */
    public function setType3($type3)
    {
        $this->container['type3'] = $type3;

        return $this;
    }

    /**
     * Gets select_fields
     *
     * @return \Swagger\Client\Model\SelectDTO
     */
    public function getSelectFields()
    {
        return $this->container['select_fields'];
    }

    /**
     * Sets select_fields
     *
     * @param \Swagger\Client\Model\SelectDTO $select_fields Lista dei campi da visualizzare nel risultato di ricerca.
     *
     * @return $this
     */
    public function setSelectFields($select_fields)
    {
        $this->container['select_fields'] = $select_fields;

        return $this;
    }

    /**
     * Gets edit_fields
     *
     * @return \Swagger\Client\Model\SearchDTO
     */
    public function getEditFields()
    {
        return $this->container['edit_fields'];
    }

    /**
     * Sets edit_fields
     *
     * @param \Swagger\Client\Model\SearchDTO $edit_fields List of edit fields
     *
     * @return $this
     */
    public function setEditFields($edit_fields)
    {
        $this->container['edit_fields'] = $edit_fields;

        return $this;
    }

    /**
     * Gets lock_fields
     *
     * @return \Swagger\Client\Model\SearchDTO
     */
    public function getLockFields()
    {
        return $this->container['lock_fields'];
    }

    /**
     * Sets lock_fields
     *
     * @param \Swagger\Client\Model\SearchDTO $lock_fields List of lock fields
     *
     * @return $this
     */
    public function setLockFields($lock_fields)
    {
        $this->container['lock_fields'] = $lock_fields;

        return $this;
    }

    /**
     * Gets show_fields
     *
     * @return bool
     */
    public function getShowFields()
    {
        return $this->container['show_fields'];
    }

    /**
     * Sets show_fields
     *
     * @param bool $show_fields Mode of show fields
     *
     * @return $this
     */
    public function setShowFields($show_fields)
    {
        $this->container['show_fields'] = $show_fields;

        return $this;
    }

    /**
     * Gets form_open
     *
     * @return bool
     */
    public function getFormOpen()
    {
        return $this->container['form_open'];
    }

    /**
     * Sets form_open
     *
     * @param bool $form_open Mode of show search form
     *
     * @return $this
     */
    public function setFormOpen($form_open)
    {
        $this->container['form_open'] = $form_open;

        return $this;
    }

    /**
     * Gets allow_empty_filter_mode
     *
     * @return int
     */
    public function getAllowEmptyFilterMode()
    {
        return $this->container['allow_empty_filter_mode'];
    }

    /**
     * Sets allow_empty_filter_mode
     *
     * @param int $allow_empty_filter_mode Possible values:  0: Yes  1: No  2: OnDemand
     *
     * @return $this
     */
    public function setAllowEmptyFilterMode($allow_empty_filter_mode)
    {
        $this->container['allow_empty_filter_mode'] = $allow_empty_filter_mode;

        return $this;
    }

    /**
     * Gets show_groups_mode
     *
     * @return int
     */
    public function getShowGroupsMode()
    {
        return $this->container['show_groups_mode'];
    }

    /**
     * Sets show_groups_mode
     *
     * @param int $show_groups_mode Possible values:  0: No  1: Yes
     *
     * @return $this
     */
    public function setShowGroupsMode($show_groups_mode)
    {
        $this->container['show_groups_mode'] = $show_groups_mode;

        return $this;
    }

    /**
     * Gets can_execute
     *
     * @return bool
     */
    public function getCanExecute()
    {
        return $this->container['can_execute'];
    }

    /**
     * Sets can_execute
     *
     * @param bool $can_execute Can Search
     *
     * @return $this
     */
    public function setCanExecute($can_execute)
    {
        $this->container['can_execute'] = $can_execute;

        return $this;
    }

    /**
     * Gets can_update
     *
     * @return bool
     */
    public function getCanUpdate()
    {
        return $this->container['can_update'];
    }

    /**
     * Sets can_update
     *
     * @param bool $can_update Can Update
     *
     * @return $this
     */
    public function setCanUpdate($can_update)
    {
        $this->container['can_update'] = $can_update;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool $can_delete Can Delete
     *
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


