<?php
/**
 * ProcessVariablesFieldsDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProcessVariablesFieldsDTO Class Doc Comment
 *
 * @category Class
 * @description Class of fields of process variable
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessVariablesFieldsDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProcessVariablesFieldsDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'boolean_variables' => '\Swagger\Client\Model\AdditionalFieldBooleanDTO[]',
        'string_variables' => '\Swagger\Client\Model\AdditionalFieldStringDTO[]',
        'combo_variables' => '\Swagger\Client\Model\AdditionalFieldComboDTO[]',
        'date_time_variables' => '\Swagger\Client\Model\AdditionalFieldDateTimeDTO[]',
        'double_variables' => '\Swagger\Client\Model\AdditionalFieldDoubleDTO[]',
        'table_variables' => '\Swagger\Client\Model\AdditionalFieldTableDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'boolean_variables' => null,
        'string_variables' => null,
        'combo_variables' => null,
        'date_time_variables' => null,
        'double_variables' => null,
        'table_variables' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'boolean_variables' => 'booleanVariables',
        'string_variables' => 'stringVariables',
        'combo_variables' => 'comboVariables',
        'date_time_variables' => 'dateTimeVariables',
        'double_variables' => 'doubleVariables',
        'table_variables' => 'tableVariables'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'boolean_variables' => 'setBooleanVariables',
        'string_variables' => 'setStringVariables',
        'combo_variables' => 'setComboVariables',
        'date_time_variables' => 'setDateTimeVariables',
        'double_variables' => 'setDoubleVariables',
        'table_variables' => 'setTableVariables'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'boolean_variables' => 'getBooleanVariables',
        'string_variables' => 'getStringVariables',
        'combo_variables' => 'getComboVariables',
        'date_time_variables' => 'getDateTimeVariables',
        'double_variables' => 'getDoubleVariables',
        'table_variables' => 'getTableVariables'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['boolean_variables'] = isset($data['boolean_variables']) ? $data['boolean_variables'] : null;
        $this->container['string_variables'] = isset($data['string_variables']) ? $data['string_variables'] : null;
        $this->container['combo_variables'] = isset($data['combo_variables']) ? $data['combo_variables'] : null;
        $this->container['date_time_variables'] = isset($data['date_time_variables']) ? $data['date_time_variables'] : null;
        $this->container['double_variables'] = isset($data['double_variables']) ? $data['double_variables'] : null;
        $this->container['table_variables'] = isset($data['table_variables']) ? $data['table_variables'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets boolean_variables
     *
     * @return \Swagger\Client\Model\AdditionalFieldBooleanDTO[]
     */
    public function getBooleanVariables()
    {
        return $this->container['boolean_variables'];
    }

    /**
     * Sets boolean_variables
     *
     * @param \Swagger\Client\Model\AdditionalFieldBooleanDTO[] $boolean_variables List of variables in boolean format
     *
     * @return $this
     */
    public function setBooleanVariables($boolean_variables)
    {
        $this->container['boolean_variables'] = $boolean_variables;

        return $this;
    }

    /**
     * Gets string_variables
     *
     * @return \Swagger\Client\Model\AdditionalFieldStringDTO[]
     */
    public function getStringVariables()
    {
        return $this->container['string_variables'];
    }

    /**
     * Sets string_variables
     *
     * @param \Swagger\Client\Model\AdditionalFieldStringDTO[] $string_variables List of variables in string format
     *
     * @return $this
     */
    public function setStringVariables($string_variables)
    {
        $this->container['string_variables'] = $string_variables;

        return $this;
    }

    /**
     * Gets combo_variables
     *
     * @return \Swagger\Client\Model\AdditionalFieldComboDTO[]
     */
    public function getComboVariables()
    {
        return $this->container['combo_variables'];
    }

    /**
     * Sets combo_variables
     *
     * @param \Swagger\Client\Model\AdditionalFieldComboDTO[] $combo_variables List of variables in list format
     *
     * @return $this
     */
    public function setComboVariables($combo_variables)
    {
        $this->container['combo_variables'] = $combo_variables;

        return $this;
    }

    /**
     * Gets date_time_variables
     *
     * @return \Swagger\Client\Model\AdditionalFieldDateTimeDTO[]
     */
    public function getDateTimeVariables()
    {
        return $this->container['date_time_variables'];
    }

    /**
     * Sets date_time_variables
     *
     * @param \Swagger\Client\Model\AdditionalFieldDateTimeDTO[] $date_time_variables List of variables in datetime format
     *
     * @return $this
     */
    public function setDateTimeVariables($date_time_variables)
    {
        $this->container['date_time_variables'] = $date_time_variables;

        return $this;
    }

    /**
     * Gets double_variables
     *
     * @return \Swagger\Client\Model\AdditionalFieldDoubleDTO[]
     */
    public function getDoubleVariables()
    {
        return $this->container['double_variables'];
    }

    /**
     * Sets double_variables
     *
     * @param \Swagger\Client\Model\AdditionalFieldDoubleDTO[] $double_variables List of variables in decimal format
     *
     * @return $this
     */
    public function setDoubleVariables($double_variables)
    {
        $this->container['double_variables'] = $double_variables;

        return $this;
    }

    /**
     * Gets table_variables
     *
     * @return \Swagger\Client\Model\AdditionalFieldTableDTO[]
     */
    public function getTableVariables()
    {
        return $this->container['table_variables'];
    }

    /**
     * Sets table_variables
     *
     * @param \Swagger\Client\Model\AdditionalFieldTableDTO[] $table_variables List of variables in table format
     *
     * @return $this
     */
    public function setTableVariables($table_variables)
    {
        $this->container['table_variables'] = $table_variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


