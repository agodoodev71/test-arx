<?php
/**
 * MonitoredFolderDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MonitoredFolderDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MonitoredFolderDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MonitoredFolderDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'user_id' => 'int',
        'type' => 'int',
        'mask_id' => 'string',
        'predefined_profile_id' => 'int',
        'use_sub_folders' => 'bool',
        'path' => 'string',
        'parse_mode' => 'int',
        'character_separator' => 'string',
        'software_type' => 'int',
        'operativity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'user_id' => 'int32',
        'type' => 'int32',
        'mask_id' => null,
        'predefined_profile_id' => 'int32',
        'use_sub_folders' => null,
        'path' => null,
        'parse_mode' => 'int32',
        'character_separator' => null,
        'software_type' => 'int32',
        'operativity' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_id' => 'userId',
        'type' => 'type',
        'mask_id' => 'maskId',
        'predefined_profile_id' => 'predefinedProfileId',
        'use_sub_folders' => 'useSubFolders',
        'path' => 'path',
        'parse_mode' => 'parseMode',
        'character_separator' => 'characterSeparator',
        'software_type' => 'softwareType',
        'operativity' => 'operativity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_id' => 'setUserId',
        'type' => 'setType',
        'mask_id' => 'setMaskId',
        'predefined_profile_id' => 'setPredefinedProfileId',
        'use_sub_folders' => 'setUseSubFolders',
        'path' => 'setPath',
        'parse_mode' => 'setParseMode',
        'character_separator' => 'setCharacterSeparator',
        'software_type' => 'setSoftwareType',
        'operativity' => 'setOperativity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_id' => 'getUserId',
        'type' => 'getType',
        'mask_id' => 'getMaskId',
        'predefined_profile_id' => 'getPredefinedProfileId',
        'use_sub_folders' => 'getUseSubFolders',
        'path' => 'getPath',
        'parse_mode' => 'getParseMode',
        'character_separator' => 'getCharacterSeparator',
        'software_type' => 'getSoftwareType',
        'operativity' => 'getOperativity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['mask_id'] = isset($data['mask_id']) ? $data['mask_id'] : null;
        $this->container['predefined_profile_id'] = isset($data['predefined_profile_id']) ? $data['predefined_profile_id'] : null;
        $this->container['use_sub_folders'] = isset($data['use_sub_folders']) ? $data['use_sub_folders'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['parse_mode'] = isset($data['parse_mode']) ? $data['parse_mode'] : null;
        $this->container['character_separator'] = isset($data['character_separator']) ? $data['character_separator'] : null;
        $this->container['software_type'] = isset($data['software_type']) ? $data['software_type'] : null;
        $this->container['operativity'] = isset($data['operativity']) ? $data['operativity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Possible values:  0: Manual  1: Automatic  2: Wizard
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets mask_id
     *
     * @return string
     */
    public function getMaskId()
    {
        return $this->container['mask_id'];
    }

    /**
     * Sets mask_id
     *
     * @param string $mask_id mask_id
     *
     * @return $this
     */
    public function setMaskId($mask_id)
    {
        $this->container['mask_id'] = $mask_id;

        return $this;
    }

    /**
     * Gets predefined_profile_id
     *
     * @return int
     */
    public function getPredefinedProfileId()
    {
        return $this->container['predefined_profile_id'];
    }

    /**
     * Sets predefined_profile_id
     *
     * @param int $predefined_profile_id predefined_profile_id
     *
     * @return $this
     */
    public function setPredefinedProfileId($predefined_profile_id)
    {
        $this->container['predefined_profile_id'] = $predefined_profile_id;

        return $this;
    }

    /**
     * Gets use_sub_folders
     *
     * @return bool
     */
    public function getUseSubFolders()
    {
        return $this->container['use_sub_folders'];
    }

    /**
     * Sets use_sub_folders
     *
     * @param bool $use_sub_folders use_sub_folders
     *
     * @return $this
     */
    public function setUseSubFolders($use_sub_folders)
    {
        $this->container['use_sub_folders'] = $use_sub_folders;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets parse_mode
     *
     * @return int
     */
    public function getParseMode()
    {
        return $this->container['parse_mode'];
    }

    /**
     * Sets parse_mode
     *
     * @param int $parse_mode Possible values:  0: ByPosition  1: BySeparator  2: None
     *
     * @return $this
     */
    public function setParseMode($parse_mode)
    {
        $this->container['parse_mode'] = $parse_mode;

        return $this;
    }

    /**
     * Gets character_separator
     *
     * @return string
     */
    public function getCharacterSeparator()
    {
        return $this->container['character_separator'];
    }

    /**
     * Sets character_separator
     *
     * @param string $character_separator character_separator
     *
     * @return $this
     */
    public function setCharacterSeparator($character_separator)
    {
        $this->container['character_separator'] = $character_separator;

        return $this;
    }

    /**
     * Gets software_type
     *
     * @return int
     */
    public function getSoftwareType()
    {
        return $this->container['software_type'];
    }

    /**
     * Sets software_type
     *
     * @param int $software_type Possible values:  0: Generic  1: ArxivarServer  2: ArxivarOcr  3: ArxivarFax  4: ArxivarBarcode  5: ArxivarSpoolRecPro  6: ArxivarSpoolPdf  7: ArxivarSpoolConsole  8: ArxivarWeb  9: ArxivarPmArchiviazione  10: ArxivarPmRubrica  11: ArxivarPmUsersAndGroups  12: ArxivarPmAllegati  13: ArxivarUnitTest  14: ArxivarStartWorkflow  15: ArxivarMailer  16: ArxivarArxService  17: ArxivarPostalizzatore  18: ArxivarSigner  19: ArxivarSdk  20: SAPR3  21: ArxivarThumbnail  22: ArxivarSharedDocument  23: ArxivarDownloaderDocument  24: ArxivarClient  25: ArxivarAWP  26: ArxivarPmOrganizationChart  27: ArxivarMobile  28: Credemtel  29: ArxivarRelationService  30: ArxivarPmLogonProviderAssoc  31: ArxivarMassiveUpdates  32: ArxivarMobileService  33: ArxivarMobileApp  34: ArxivarFasciculationService  35: ArxivarPushNotificationsService  36: ArxivarIX  37: ArxivarPmDocumentDeleting  38: ArxivarMobileOfficeSign  39: GenericWebService  40: ArxivarIndex  41: ArxDrive  42: ArxDriveExtension  43: ArxivarSmartTaskApp  44: ArxDriveMobile  45: Unimatica  46: Eni  47: ArxivarSwapOutService  48: ArxivarSuiteClient  49: ArxivarServerWcf  50: ArxAuthService  51: ArxivarSuiteServer  52: ArxivarSetup  53: ImapPlugin  54: ArxLinkClient  55: BiometricSign  56: ArxCommand  57: ArxivarPmFlatFileTextWriter  58: ArxAssistant  59: ArxLocalSign  60: ArxNode
     *
     * @return $this
     */
    public function setSoftwareType($software_type)
    {
        $this->container['software_type'] = $software_type;

        return $this;
    }

    /**
     * Gets operativity
     *
     * @return int
     */
    public function getOperativity()
    {
        return $this->container['operativity'];
    }

    /**
     * Sets operativity
     *
     * @param int $operativity Possible values:  0: AskConfirm  1: Proceed  2: Buffer
     *
     * @return $this
     */
    public function setOperativity($operativity)
    {
        $this->container['operativity'] = $operativity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


