<?php
/**
 * MaskDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MaskDTO Class Doc Comment
 *
 * @category Class
 * @description Class of mask to archive documents
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaskDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaskDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'mask_name' => 'string',
        'mask_description' => 'string',
        'predefined_profile_id' => 'int',
        'user' => 'int',
        'external_id' => 'string',
        'is_root' => 'bool',
        'type' => 'int',
        'pa_mode' => 'int',
        'show_additional' => 'bool',
        'kind' => 'int',
        'show_groups' => 'bool',
        'user_complete_name' => 'string',
        'predefined_profile' => '\Swagger\Client\Model\PredefinedProfileDTO',
        'mask_details' => '\Swagger\Client\Model\MaskDetailDTO[]',
        'mask_class_options' => '\Swagger\Client\Model\MaskClassOptionsDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'mask_name' => null,
        'mask_description' => null,
        'predefined_profile_id' => 'int32',
        'user' => 'int32',
        'external_id' => null,
        'is_root' => null,
        'type' => 'int32',
        'pa_mode' => 'int32',
        'show_additional' => null,
        'kind' => 'int32',
        'show_groups' => null,
        'user_complete_name' => null,
        'predefined_profile' => null,
        'mask_details' => null,
        'mask_class_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'mask_name' => 'maskName',
        'mask_description' => 'maskDescription',
        'predefined_profile_id' => 'predefinedProfileId',
        'user' => 'user',
        'external_id' => 'externalId',
        'is_root' => 'isRoot',
        'type' => 'type',
        'pa_mode' => 'paMode',
        'show_additional' => 'showAdditional',
        'kind' => 'kind',
        'show_groups' => 'showGroups',
        'user_complete_name' => 'userCompleteName',
        'predefined_profile' => 'predefinedProfile',
        'mask_details' => 'maskDetails',
        'mask_class_options' => 'maskClassOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'mask_name' => 'setMaskName',
        'mask_description' => 'setMaskDescription',
        'predefined_profile_id' => 'setPredefinedProfileId',
        'user' => 'setUser',
        'external_id' => 'setExternalId',
        'is_root' => 'setIsRoot',
        'type' => 'setType',
        'pa_mode' => 'setPaMode',
        'show_additional' => 'setShowAdditional',
        'kind' => 'setKind',
        'show_groups' => 'setShowGroups',
        'user_complete_name' => 'setUserCompleteName',
        'predefined_profile' => 'setPredefinedProfile',
        'mask_details' => 'setMaskDetails',
        'mask_class_options' => 'setMaskClassOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'mask_name' => 'getMaskName',
        'mask_description' => 'getMaskDescription',
        'predefined_profile_id' => 'getPredefinedProfileId',
        'user' => 'getUser',
        'external_id' => 'getExternalId',
        'is_root' => 'getIsRoot',
        'type' => 'getType',
        'pa_mode' => 'getPaMode',
        'show_additional' => 'getShowAdditional',
        'kind' => 'getKind',
        'show_groups' => 'getShowGroups',
        'user_complete_name' => 'getUserCompleteName',
        'predefined_profile' => 'getPredefinedProfile',
        'mask_details' => 'getMaskDetails',
        'mask_class_options' => 'getMaskClassOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['mask_name'] = isset($data['mask_name']) ? $data['mask_name'] : null;
        $this->container['mask_description'] = isset($data['mask_description']) ? $data['mask_description'] : null;
        $this->container['predefined_profile_id'] = isset($data['predefined_profile_id']) ? $data['predefined_profile_id'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['is_root'] = isset($data['is_root']) ? $data['is_root'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['pa_mode'] = isset($data['pa_mode']) ? $data['pa_mode'] : null;
        $this->container['show_additional'] = isset($data['show_additional']) ? $data['show_additional'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['show_groups'] = isset($data['show_groups']) ? $data['show_groups'] : null;
        $this->container['user_complete_name'] = isset($data['user_complete_name']) ? $data['user_complete_name'] : null;
        $this->container['predefined_profile'] = isset($data['predefined_profile']) ? $data['predefined_profile'] : null;
        $this->container['mask_details'] = isset($data['mask_details']) ? $data['mask_details'] : null;
        $this->container['mask_class_options'] = isset($data['mask_class_options']) ? $data['mask_class_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets mask_name
     *
     * @return string
     */
    public function getMaskName()
    {
        return $this->container['mask_name'];
    }

    /**
     * Sets mask_name
     *
     * @param string $mask_name Name
     *
     * @return $this
     */
    public function setMaskName($mask_name)
    {
        $this->container['mask_name'] = $mask_name;

        return $this;
    }

    /**
     * Gets mask_description
     *
     * @return string
     */
    public function getMaskDescription()
    {
        return $this->container['mask_description'];
    }

    /**
     * Sets mask_description
     *
     * @param string $mask_description Description
     *
     * @return $this
     */
    public function setMaskDescription($mask_description)
    {
        $this->container['mask_description'] = $mask_description;

        return $this;
    }

    /**
     * Gets predefined_profile_id
     *
     * @return int
     */
    public function getPredefinedProfileId()
    {
        return $this->container['predefined_profile_id'];
    }

    /**
     * Sets predefined_profile_id
     *
     * @param int $predefined_profile_id Predefined Profile Identifier
     *
     * @return $this
     */
    public function setPredefinedProfileId($predefined_profile_id)
    {
        $this->container['predefined_profile_id'] = $predefined_profile_id;

        return $this;
    }

    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user Author Identifier
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id External Identifier
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets is_root
     *
     * @return bool
     */
    public function getIsRoot()
    {
        return $this->container['is_root'];
    }

    /**
     * Sets is_root
     *
     * @param bool $is_root Root
     *
     * @return $this
     */
    public function setIsRoot($is_root)
    {
        $this->container['is_root'] = $is_root;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Possible values:  0: Nothing  1: Barcode  2: Archiviazione
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pa_mode
     *
     * @return int
     */
    public function getPaMode()
    {
        return $this->container['pa_mode'];
    }

    /**
     * Sets pa_mode
     *
     * @param int $pa_mode Possible values:  0: None  1: OnlyNever  2: OnlyOptionally  3: NeverOrOptionally  4: OnlyAlways  5: AlwaysOrNever  6: AlwaysOrOptionally  7: All
     *
     * @return $this
     */
    public function setPaMode($pa_mode)
    {
        $this->container['pa_mode'] = $pa_mode;

        return $this;
    }

    /**
     * Gets show_additional
     *
     * @return bool
     */
    public function getShowAdditional()
    {
        return $this->container['show_additional'];
    }

    /**
     * Sets show_additional
     *
     * @param bool $show_additional Show Additional
     *
     * @return $this
     */
    public function setShowAdditional($show_additional)
    {
        $this->container['show_additional'] = $show_additional;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return int
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param int $kind Possible values:  0: UserMask  1: SystemMask
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets show_groups
     *
     * @return bool
     */
    public function getShowGroups()
    {
        return $this->container['show_groups'];
    }

    /**
     * Sets show_groups
     *
     * @param bool $show_groups Show Groups
     *
     * @return $this
     */
    public function setShowGroups($show_groups)
    {
        $this->container['show_groups'] = $show_groups;

        return $this;
    }

    /**
     * Gets user_complete_name
     *
     * @return string
     */
    public function getUserCompleteName()
    {
        return $this->container['user_complete_name'];
    }

    /**
     * Sets user_complete_name
     *
     * @param string $user_complete_name Author Complete Name
     *
     * @return $this
     */
    public function setUserCompleteName($user_complete_name)
    {
        $this->container['user_complete_name'] = $user_complete_name;

        return $this;
    }

    /**
     * Gets predefined_profile
     *
     * @return \Swagger\Client\Model\PredefinedProfileDTO
     */
    public function getPredefinedProfile()
    {
        return $this->container['predefined_profile'];
    }

    /**
     * Sets predefined_profile
     *
     * @param \Swagger\Client\Model\PredefinedProfileDTO $predefined_profile Predefined Profile associated with the mask
     *
     * @return $this
     */
    public function setPredefinedProfile($predefined_profile)
    {
        $this->container['predefined_profile'] = $predefined_profile;

        return $this;
    }

    /**
     * Gets mask_details
     *
     * @return \Swagger\Client\Model\MaskDetailDTO[]
     */
    public function getMaskDetails()
    {
        return $this->container['mask_details'];
    }

    /**
     * Sets mask_details
     *
     * @param \Swagger\Client\Model\MaskDetailDTO[] $mask_details Details
     *
     * @return $this
     */
    public function setMaskDetails($mask_details)
    {
        $this->container['mask_details'] = $mask_details;

        return $this;
    }

    /**
     * Gets mask_class_options
     *
     * @return \Swagger\Client\Model\MaskClassOptionsDTO[]
     */
    public function getMaskClassOptions()
    {
        return $this->container['mask_class_options'];
    }

    /**
     * Sets mask_class_options
     *
     * @param \Swagger\Client\Model\MaskClassOptionsDTO[] $mask_class_options Options on document type
     *
     * @return $this
     */
    public function setMaskClassOptions($mask_class_options)
    {
        $this->container['mask_class_options'] = $mask_class_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


