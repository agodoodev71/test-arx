<?php
/**
 * AddressBookSearchCriteriaDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AddressBookSearchCriteriaDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressBookSearchCriteriaDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddressBookSearchCriteriaDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_book_category_id' => 'int',
        'filter_fields' => '\Swagger\Client\Model\RubricaFieldDTO[]',
        'select_fields' => '\Swagger\Client\Model\RubricaFieldDTO[]',
        'filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_book_category_id' => 'int32',
        'filter_fields' => null,
        'select_fields' => null,
        'filter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_book_category_id' => 'addressBookCategoryId',
        'filter_fields' => 'filterFields',
        'select_fields' => 'selectFields',
        'filter' => 'filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_book_category_id' => 'setAddressBookCategoryId',
        'filter_fields' => 'setFilterFields',
        'select_fields' => 'setSelectFields',
        'filter' => 'setFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_book_category_id' => 'getAddressBookCategoryId',
        'filter_fields' => 'getFilterFields',
        'select_fields' => 'getSelectFields',
        'filter' => 'getFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_book_category_id'] = isset($data['address_book_category_id']) ? $data['address_book_category_id'] : null;
        $this->container['filter_fields'] = isset($data['filter_fields']) ? $data['filter_fields'] : null;
        $this->container['select_fields'] = isset($data['select_fields']) ? $data['select_fields'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets address_book_category_id
     *
     * @return int
     */
    public function getAddressBookCategoryId()
    {
        return $this->container['address_book_category_id'];
    }

    /**
     * Sets address_book_category_id
     *
     * @param int $address_book_category_id address_book_category_id
     *
     * @return $this
     */
    public function setAddressBookCategoryId($address_book_category_id)
    {
        $this->container['address_book_category_id'] = $address_book_category_id;

        return $this;
    }

    /**
     * Gets filter_fields
     *
     * @return \Swagger\Client\Model\RubricaFieldDTO[]
     */
    public function getFilterFields()
    {
        return $this->container['filter_fields'];
    }

    /**
     * Sets filter_fields
     *
     * @param \Swagger\Client\Model\RubricaFieldDTO[] $filter_fields filter_fields
     *
     * @return $this
     */
    public function setFilterFields($filter_fields)
    {
        $this->container['filter_fields'] = $filter_fields;

        return $this;
    }

    /**
     * Gets select_fields
     *
     * @return \Swagger\Client\Model\RubricaFieldDTO[]
     */
    public function getSelectFields()
    {
        return $this->container['select_fields'];
    }

    /**
     * Sets select_fields
     *
     * @param \Swagger\Client\Model\RubricaFieldDTO[] $select_fields select_fields
     *
     * @return $this
     */
    public function setSelectFields($select_fields)
    {
        $this->container['select_fields'] = $select_fields;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string $filter filter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


