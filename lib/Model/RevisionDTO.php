<?php
/**
 * RevisionDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RevisionDTO Class Doc Comment
 *
 * @category Class
 * @description Class of revision
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RevisionDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RevisionDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'docnumber' => 'int',
        'revision' => 'int',
        'user' => 'int',
        'user_description' => 'string',
        'document_date' => '\DateTime',
        'profile_date' => '\DateTime',
        'path' => 'string',
        'file_name' => 'string',
        'original_name' => 'string',
        'file_date' => '\DateTime',
        'attachments' => 'bool',
        'hash' => 'string',
        'zip_password' => 'string',
        'device' => 'int',
        'cd_label' => 'string',
        'cstring' => 'string',
        'save_type' => 'int',
        'compressed' => 'bool',
        'compression_mode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'docnumber' => 'int32',
        'revision' => 'int32',
        'user' => 'int32',
        'user_description' => null,
        'document_date' => 'date-time',
        'profile_date' => 'date-time',
        'path' => null,
        'file_name' => null,
        'original_name' => null,
        'file_date' => 'date-time',
        'attachments' => null,
        'hash' => null,
        'zip_password' => null,
        'device' => 'int32',
        'cd_label' => null,
        'cstring' => null,
        'save_type' => 'int32',
        'compressed' => null,
        'compression_mode' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'docnumber' => 'docnumber',
        'revision' => 'revision',
        'user' => 'user',
        'user_description' => 'userDescription',
        'document_date' => 'documentDate',
        'profile_date' => 'profileDate',
        'path' => 'path',
        'file_name' => 'fileName',
        'original_name' => 'originalName',
        'file_date' => 'fileDate',
        'attachments' => 'attachments',
        'hash' => 'hash',
        'zip_password' => 'zipPassword',
        'device' => 'device',
        'cd_label' => 'cdLabel',
        'cstring' => 'cstring',
        'save_type' => 'saveType',
        'compressed' => 'compressed',
        'compression_mode' => 'compressionMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'docnumber' => 'setDocnumber',
        'revision' => 'setRevision',
        'user' => 'setUser',
        'user_description' => 'setUserDescription',
        'document_date' => 'setDocumentDate',
        'profile_date' => 'setProfileDate',
        'path' => 'setPath',
        'file_name' => 'setFileName',
        'original_name' => 'setOriginalName',
        'file_date' => 'setFileDate',
        'attachments' => 'setAttachments',
        'hash' => 'setHash',
        'zip_password' => 'setZipPassword',
        'device' => 'setDevice',
        'cd_label' => 'setCdLabel',
        'cstring' => 'setCstring',
        'save_type' => 'setSaveType',
        'compressed' => 'setCompressed',
        'compression_mode' => 'setCompressionMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'docnumber' => 'getDocnumber',
        'revision' => 'getRevision',
        'user' => 'getUser',
        'user_description' => 'getUserDescription',
        'document_date' => 'getDocumentDate',
        'profile_date' => 'getProfileDate',
        'path' => 'getPath',
        'file_name' => 'getFileName',
        'original_name' => 'getOriginalName',
        'file_date' => 'getFileDate',
        'attachments' => 'getAttachments',
        'hash' => 'getHash',
        'zip_password' => 'getZipPassword',
        'device' => 'getDevice',
        'cd_label' => 'getCdLabel',
        'cstring' => 'getCstring',
        'save_type' => 'getSaveType',
        'compressed' => 'getCompressed',
        'compression_mode' => 'getCompressionMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['docnumber'] = isset($data['docnumber']) ? $data['docnumber'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['user_description'] = isset($data['user_description']) ? $data['user_description'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['profile_date'] = isset($data['profile_date']) ? $data['profile_date'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['original_name'] = isset($data['original_name']) ? $data['original_name'] : null;
        $this->container['file_date'] = isset($data['file_date']) ? $data['file_date'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['zip_password'] = isset($data['zip_password']) ? $data['zip_password'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['cd_label'] = isset($data['cd_label']) ? $data['cd_label'] : null;
        $this->container['cstring'] = isset($data['cstring']) ? $data['cstring'] : null;
        $this->container['save_type'] = isset($data['save_type']) ? $data['save_type'] : null;
        $this->container['compressed'] = isset($data['compressed']) ? $data['compressed'] : null;
        $this->container['compression_mode'] = isset($data['compression_mode']) ? $data['compression_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets docnumber
     *
     * @return int
     */
    public function getDocnumber()
    {
        return $this->container['docnumber'];
    }

    /**
     * Sets docnumber
     *
     * @param int $docnumber Document Identifier
     *
     * @return $this
     */
    public function setDocnumber($docnumber)
    {
        $this->container['docnumber'] = $docnumber;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision Revision Number
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user User Identifier
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_description
     *
     * @return string
     */
    public function getUserDescription()
    {
        return $this->container['user_description'];
    }

    /**
     * Sets user_description
     *
     * @param string $user_description User Description
     *
     * @return $this
     */
    public function setUserDescription($user_description)
    {
        $this->container['user_description'] = $user_description;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date Document Date
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets profile_date
     *
     * @return \DateTime
     */
    public function getProfileDate()
    {
        return $this->container['profile_date'];
    }

    /**
     * Sets profile_date
     *
     * @param \DateTime $profile_date Document Creation Date
     *
     * @return $this
     */
    public function setProfileDate($profile_date)
    {
        $this->container['profile_date'] = $profile_date;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path File Path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name File Compressed Name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets original_name
     *
     * @return string
     */
    public function getOriginalName()
    {
        return $this->container['original_name'];
    }

    /**
     * Sets original_name
     *
     * @param string $original_name Original File Name
     *
     * @return $this
     */
    public function setOriginalName($original_name)
    {
        $this->container['original_name'] = $original_name;

        return $this;
    }

    /**
     * Gets file_date
     *
     * @return \DateTime
     */
    public function getFileDate()
    {
        return $this->container['file_date'];
    }

    /**
     * Sets file_date
     *
     * @param \DateTime $file_date File Date
     *
     * @return $this
     */
    public function setFileDate($file_date)
    {
        $this->container['file_date'] = $file_date;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return bool
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param bool $attachments Has Attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash File Hash
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets zip_password
     *
     * @return string
     */
    public function getZipPassword()
    {
        return $this->container['zip_password'];
    }

    /**
     * Sets zip_password
     *
     * @param string $zip_password Password Zip
     *
     * @return $this
     */
    public function setZipPassword($zip_password)
    {
        $this->container['zip_password'] = $zip_password;

        return $this;
    }

    /**
     * Gets device
     *
     * @return int
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param int $device Possible values:  0: Hd  1: Cd
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets cd_label
     *
     * @return string
     */
    public function getCdLabel()
    {
        return $this->container['cd_label'];
    }

    /**
     * Sets cd_label
     *
     * @param string $cd_label CD Label
     *
     * @return $this
     */
    public function setCdLabel($cd_label)
    {
        $this->container['cd_label'] = $cd_label;

        return $this;
    }

    /**
     * Gets cstring
     *
     * @return string
     */
    public function getCstring()
    {
        return $this->container['cstring'];
    }

    /**
     * Sets cstring
     *
     * @param string $cstring Database to save
     *
     * @return $this
     */
    public function setCstring($cstring)
    {
        $this->container['cstring'] = $cstring;

        return $this;
    }

    /**
     * Gets save_type
     *
     * @return int
     */
    public function getSaveType()
    {
        return $this->container['save_type'];
    }

    /**
     * Sets save_type
     *
     * @param int $save_type Possible values:  0: File_System  1: Database
     *
     * @return $this
     */
    public function setSaveType($save_type)
    {
        $this->container['save_type'] = $save_type;

        return $this;
    }

    /**
     * Gets compressed
     *
     * @return bool
     */
    public function getCompressed()
    {
        return $this->container['compressed'];
    }

    /**
     * Sets compressed
     *
     * @param bool $compressed If file compressed
     *
     * @return $this
     */
    public function setCompressed($compressed)
    {
        $this->container['compressed'] = $compressed;

        return $this;
    }

    /**
     * Gets compression_mode
     *
     * @return int
     */
    public function getCompressionMode()
    {
        return $this->container['compression_mode'];
    }

    /**
     * Sets compression_mode
     *
     * @param int $compression_mode Possible values:  0: None  1: CompressChilkat91  2: CompressChilkat95  3: CompressChilkat95AndCryptoAes256
     *
     * @return $this
     */
    public function setCompressionMode($compression_mode)
    {
        $this->container['compression_mode'] = $compression_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


