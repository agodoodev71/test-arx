<?php
/**
 * VerifyConditionDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VerifyConditionDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VerifyConditionDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VerifyConditionDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cert_security_verify_level_enum' => 'int',
        'check_online_revocation' => 'bool',
        'verify_date_time_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cert_security_verify_level_enum' => 'int32',
        'check_online_revocation' => null,
        'verify_date_time_utc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cert_security_verify_level_enum' => 'certSecurityVerifyLevelEnum',
        'check_online_revocation' => 'checkOnlineRevocation',
        'verify_date_time_utc' => 'verifyDateTimeUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cert_security_verify_level_enum' => 'setCertSecurityVerifyLevelEnum',
        'check_online_revocation' => 'setCheckOnlineRevocation',
        'verify_date_time_utc' => 'setVerifyDateTimeUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cert_security_verify_level_enum' => 'getCertSecurityVerifyLevelEnum',
        'check_online_revocation' => 'getCheckOnlineRevocation',
        'verify_date_time_utc' => 'getVerifyDateTimeUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cert_security_verify_level_enum'] = isset($data['cert_security_verify_level_enum']) ? $data['cert_security_verify_level_enum'] : null;
        $this->container['check_online_revocation'] = isset($data['check_online_revocation']) ? $data['check_online_revocation'] : null;
        $this->container['verify_date_time_utc'] = isset($data['verify_date_time_utc']) ? $data['verify_date_time_utc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets cert_security_verify_level_enum
     *
     * @return int
     */
    public function getCertSecurityVerifyLevelEnum()
    {
        return $this->container['cert_security_verify_level_enum'];
    }

    /**
     * Sets cert_security_verify_level_enum
     *
     * @param int $cert_security_verify_level_enum Possible values:  0: Local  1: Tls
     *
     * @return $this
     */
    public function setCertSecurityVerifyLevelEnum($cert_security_verify_level_enum)
    {
        $this->container['cert_security_verify_level_enum'] = $cert_security_verify_level_enum;

        return $this;
    }

    /**
     * Gets check_online_revocation
     *
     * @return bool
     */
    public function getCheckOnlineRevocation()
    {
        return $this->container['check_online_revocation'];
    }

    /**
     * Sets check_online_revocation
     *
     * @param bool $check_online_revocation check_online_revocation
     *
     * @return $this
     */
    public function setCheckOnlineRevocation($check_online_revocation)
    {
        $this->container['check_online_revocation'] = $check_online_revocation;

        return $this;
    }

    /**
     * Gets verify_date_time_utc
     *
     * @return \DateTime
     */
    public function getVerifyDateTimeUtc()
    {
        return $this->container['verify_date_time_utc'];
    }

    /**
     * Sets verify_date_time_utc
     *
     * @param \DateTime $verify_date_time_utc verify_date_time_utc
     *
     * @return $this
     */
    public function setVerifyDateTimeUtc($verify_date_time_utc)
    {
        $this->container['verify_date_time_utc'] = $verify_date_time_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


