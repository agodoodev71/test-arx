<?php
/**
 * AddressBookSearchConcreteDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AddressBookSearchConcreteDTO Class Doc Comment
 *
 * @category Class
 * @description Class for search in addressbook
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressBookSearchConcreteDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddressBookSearchConcreteDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_time_fields' => '\Swagger\Client\Model\FieldBaseForSearchDateTimeDto[]',
        'string_fields' => '\Swagger\Client\Model\FieldBaseForSearchStringDto[]',
        'int_fields' => '\Swagger\Client\Model\FieldBaseForSearchIntDto[]',
        'bool_fields' => '\Swagger\Client\Model\FieldBaseForSearchBoolDto[]',
        'double_fields' => '\Swagger\Client\Model\FieldBaseForSearchDoubleDto[]',
        'string_list_fields' => '\Swagger\Client\Model\FieldBaseForSearchListDto[]',
        'max_items' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_time_fields' => null,
        'string_fields' => null,
        'int_fields' => null,
        'bool_fields' => null,
        'double_fields' => null,
        'string_list_fields' => null,
        'max_items' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_time_fields' => 'dateTimeFields',
        'string_fields' => 'stringFields',
        'int_fields' => 'intFields',
        'bool_fields' => 'boolFields',
        'double_fields' => 'doubleFields',
        'string_list_fields' => 'stringListFields',
        'max_items' => 'maxItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_time_fields' => 'setDateTimeFields',
        'string_fields' => 'setStringFields',
        'int_fields' => 'setIntFields',
        'bool_fields' => 'setBoolFields',
        'double_fields' => 'setDoubleFields',
        'string_list_fields' => 'setStringListFields',
        'max_items' => 'setMaxItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_time_fields' => 'getDateTimeFields',
        'string_fields' => 'getStringFields',
        'int_fields' => 'getIntFields',
        'bool_fields' => 'getBoolFields',
        'double_fields' => 'getDoubleFields',
        'string_list_fields' => 'getStringListFields',
        'max_items' => 'getMaxItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_time_fields'] = isset($data['date_time_fields']) ? $data['date_time_fields'] : null;
        $this->container['string_fields'] = isset($data['string_fields']) ? $data['string_fields'] : null;
        $this->container['int_fields'] = isset($data['int_fields']) ? $data['int_fields'] : null;
        $this->container['bool_fields'] = isset($data['bool_fields']) ? $data['bool_fields'] : null;
        $this->container['double_fields'] = isset($data['double_fields']) ? $data['double_fields'] : null;
        $this->container['string_list_fields'] = isset($data['string_list_fields']) ? $data['string_list_fields'] : null;
        $this->container['max_items'] = isset($data['max_items']) ? $data['max_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets date_time_fields
     *
     * @return \Swagger\Client\Model\FieldBaseForSearchDateTimeDto[]
     */
    public function getDateTimeFields()
    {
        return $this->container['date_time_fields'];
    }

    /**
     * Sets date_time_fields
     *
     * @param \Swagger\Client\Model\FieldBaseForSearchDateTimeDto[] $date_time_fields List of fields of type 'Datetime'
     *
     * @return $this
     */
    public function setDateTimeFields($date_time_fields)
    {
        $this->container['date_time_fields'] = $date_time_fields;

        return $this;
    }

    /**
     * Gets string_fields
     *
     * @return \Swagger\Client\Model\FieldBaseForSearchStringDto[]
     */
    public function getStringFields()
    {
        return $this->container['string_fields'];
    }

    /**
     * Sets string_fields
     *
     * @param \Swagger\Client\Model\FieldBaseForSearchStringDto[] $string_fields List of fields of type 'String'
     *
     * @return $this
     */
    public function setStringFields($string_fields)
    {
        $this->container['string_fields'] = $string_fields;

        return $this;
    }

    /**
     * Gets int_fields
     *
     * @return \Swagger\Client\Model\FieldBaseForSearchIntDto[]
     */
    public function getIntFields()
    {
        return $this->container['int_fields'];
    }

    /**
     * Sets int_fields
     *
     * @param \Swagger\Client\Model\FieldBaseForSearchIntDto[] $int_fields List of fields of type 'Integer'
     *
     * @return $this
     */
    public function setIntFields($int_fields)
    {
        $this->container['int_fields'] = $int_fields;

        return $this;
    }

    /**
     * Gets bool_fields
     *
     * @return \Swagger\Client\Model\FieldBaseForSearchBoolDto[]
     */
    public function getBoolFields()
    {
        return $this->container['bool_fields'];
    }

    /**
     * Sets bool_fields
     *
     * @param \Swagger\Client\Model\FieldBaseForSearchBoolDto[] $bool_fields List of fields of type 'Boolean'
     *
     * @return $this
     */
    public function setBoolFields($bool_fields)
    {
        $this->container['bool_fields'] = $bool_fields;

        return $this;
    }

    /**
     * Gets double_fields
     *
     * @return \Swagger\Client\Model\FieldBaseForSearchDoubleDto[]
     */
    public function getDoubleFields()
    {
        return $this->container['double_fields'];
    }

    /**
     * Sets double_fields
     *
     * @param \Swagger\Client\Model\FieldBaseForSearchDoubleDto[] $double_fields List of fields of type 'Decimal'
     *
     * @return $this
     */
    public function setDoubleFields($double_fields)
    {
        $this->container['double_fields'] = $double_fields;

        return $this;
    }

    /**
     * Gets string_list_fields
     *
     * @return \Swagger\Client\Model\FieldBaseForSearchListDto[]
     */
    public function getStringListFields()
    {
        return $this->container['string_list_fields'];
    }

    /**
     * Sets string_list_fields
     *
     * @param \Swagger\Client\Model\FieldBaseForSearchListDto[] $string_list_fields List of fields of type 'List'
     *
     * @return $this
     */
    public function setStringListFields($string_list_fields)
    {
        $this->container['string_list_fields'] = $string_list_fields;

        return $this;
    }

    /**
     * Gets max_items
     *
     * @return int
     */
    public function getMaxItems()
    {
        return $this->container['max_items'];
    }

    /**
     * Sets max_items
     *
     * @param int $max_items max_items
     *
     * @return $this
     */
    public function setMaxItems($max_items)
    {
        $this->container['max_items'] = $max_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


