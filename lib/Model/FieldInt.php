<?php
/**
 * FieldInt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FieldInt Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FieldInt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Field_Int';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'valore2' => 'object',
        'valore' => 'object',
        'operatore' => 'int',
        'nome' => 'string',
        'nome_tabella' => 'string',
        'external_id' => 'string',
        'multiple' => 'string',
        'label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'valore2' => null,
        'valore' => null,
        'operatore' => 'int32',
        'nome' => null,
        'nome_tabella' => null,
        'external_id' => null,
        'multiple' => null,
        'label' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valore2' => 'valore2',
        'valore' => 'valore',
        'operatore' => 'operatore',
        'nome' => 'nome',
        'nome_tabella' => 'nomeTabella',
        'external_id' => 'externalId',
        'multiple' => 'multiple',
        'label' => 'label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valore2' => 'setValore2',
        'valore' => 'setValore',
        'operatore' => 'setOperatore',
        'nome' => 'setNome',
        'nome_tabella' => 'setNomeTabella',
        'external_id' => 'setExternalId',
        'multiple' => 'setMultiple',
        'label' => 'setLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valore2' => 'getValore2',
        'valore' => 'getValore',
        'operatore' => 'getOperatore',
        'nome' => 'getNome',
        'nome_tabella' => 'getNomeTabella',
        'external_id' => 'getExternalId',
        'multiple' => 'getMultiple',
        'label' => 'getLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['valore2'] = isset($data['valore2']) ? $data['valore2'] : null;
        $this->container['valore'] = isset($data['valore']) ? $data['valore'] : null;
        $this->container['operatore'] = isset($data['operatore']) ? $data['operatore'] : null;
        $this->container['nome'] = isset($data['nome']) ? $data['nome'] : null;
        $this->container['nome_tabella'] = isset($data['nome_tabella']) ? $data['nome_tabella'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['multiple'] = isset($data['multiple']) ? $data['multiple'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets valore2
     *
     * @return object
     */
    public function getValore2()
    {
        return $this->container['valore2'];
    }

    /**
     * Sets valore2
     *
     * @param object $valore2 valore2
     *
     * @return $this
     */
    public function setValore2($valore2)
    {
        $this->container['valore2'] = $valore2;

        return $this;
    }

    /**
     * Gets valore
     *
     * @return object
     */
    public function getValore()
    {
        return $this->container['valore'];
    }

    /**
     * Sets valore
     *
     * @param object $valore valore
     *
     * @return $this
     */
    public function setValore($valore)
    {
        $this->container['valore'] = $valore;

        return $this;
    }

    /**
     * Gets operatore
     *
     * @return int
     */
    public function getOperatore()
    {
        return $this->container['operatore'];
    }

    /**
     * Sets operatore
     *
     * @param int $operatore Possible values:  0: Non_Impostato  1: Minore  2: Minore_Uguale  3: Uguale  4: Maggiore_Uguale  5: Maggiore  6: Diverso  7: Compreso  8: Nullo  9: Non_Nullo  10: Nullo_o_Zero  11: Non_Nullo_e_Non_Zero  12: Escluso
     *
     * @return $this
     */
    public function setOperatore($operatore)
    {
        $this->container['operatore'] = $operatore;

        return $this;
    }

    /**
     * Gets nome
     *
     * @return string
     */
    public function getNome()
    {
        return $this->container['nome'];
    }

    /**
     * Sets nome
     *
     * @param string $nome nome
     *
     * @return $this
     */
    public function setNome($nome)
    {
        $this->container['nome'] = $nome;

        return $this;
    }

    /**
     * Gets nome_tabella
     *
     * @return string
     */
    public function getNomeTabella()
    {
        return $this->container['nome_tabella'];
    }

    /**
     * Sets nome_tabella
     *
     * @param string $nome_tabella nome_tabella
     *
     * @return $this
     */
    public function setNomeTabella($nome_tabella)
    {
        $this->container['nome_tabella'] = $nome_tabella;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets multiple
     *
     * @return string
     */
    public function getMultiple()
    {
        return $this->container['multiple'];
    }

    /**
     * Sets multiple
     *
     * @param string $multiple multiple
     *
     * @return $this
     */
    public function setMultiple($multiple)
    {
        $this->container['multiple'] = $multiple;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


