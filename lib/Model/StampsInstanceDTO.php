<?php
/**
 * StampsInstanceDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StampsInstanceDTO Class Doc Comment
 *
 * @category Class
 * @description Class for stamp instance object
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StampsInstanceDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StampsInstanceDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'x' => 'double',
        'y' => 'double',
        'width' => 'double',
        'height' => 'double',
        'page_index' => 'int',
        'master_definition_id' => 'string',
        'bindings' => '\Swagger\Client\Model\StampsInstanceValueDTO[]',
        'xaml' => 'string',
        'is_resizable' => 'bool',
        'remove_after_applied' => 'bool',
        'stamp_name' => 'string',
        'stamp_description' => 'string',
        'applied' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'x' => 'double',
        'y' => 'double',
        'width' => 'double',
        'height' => 'double',
        'page_index' => 'int32',
        'master_definition_id' => null,
        'bindings' => null,
        'xaml' => null,
        'is_resizable' => null,
        'remove_after_applied' => null,
        'stamp_name' => null,
        'stamp_description' => null,
        'applied' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'x' => 'x',
        'y' => 'y',
        'width' => 'width',
        'height' => 'height',
        'page_index' => 'pageIndex',
        'master_definition_id' => 'masterDefinitionId',
        'bindings' => 'bindings',
        'xaml' => 'xaml',
        'is_resizable' => 'isResizable',
        'remove_after_applied' => 'removeAfterApplied',
        'stamp_name' => 'stampName',
        'stamp_description' => 'stampDescription',
        'applied' => 'applied'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'x' => 'setX',
        'y' => 'setY',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'page_index' => 'setPageIndex',
        'master_definition_id' => 'setMasterDefinitionId',
        'bindings' => 'setBindings',
        'xaml' => 'setXaml',
        'is_resizable' => 'setIsResizable',
        'remove_after_applied' => 'setRemoveAfterApplied',
        'stamp_name' => 'setStampName',
        'stamp_description' => 'setStampDescription',
        'applied' => 'setApplied'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'x' => 'getX',
        'y' => 'getY',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'page_index' => 'getPageIndex',
        'master_definition_id' => 'getMasterDefinitionId',
        'bindings' => 'getBindings',
        'xaml' => 'getXaml',
        'is_resizable' => 'getIsResizable',
        'remove_after_applied' => 'getRemoveAfterApplied',
        'stamp_name' => 'getStampName',
        'stamp_description' => 'getStampDescription',
        'applied' => 'getApplied'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['x'] = isset($data['x']) ? $data['x'] : null;
        $this->container['y'] = isset($data['y']) ? $data['y'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['page_index'] = isset($data['page_index']) ? $data['page_index'] : null;
        $this->container['master_definition_id'] = isset($data['master_definition_id']) ? $data['master_definition_id'] : null;
        $this->container['bindings'] = isset($data['bindings']) ? $data['bindings'] : null;
        $this->container['xaml'] = isset($data['xaml']) ? $data['xaml'] : null;
        $this->container['is_resizable'] = isset($data['is_resizable']) ? $data['is_resizable'] : null;
        $this->container['remove_after_applied'] = isset($data['remove_after_applied']) ? $data['remove_after_applied'] : null;
        $this->container['stamp_name'] = isset($data['stamp_name']) ? $data['stamp_name'] : null;
        $this->container['stamp_description'] = isset($data['stamp_description']) ? $data['stamp_description'] : null;
        $this->container['applied'] = isset($data['applied']) ? $data['applied'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id for stamp.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets x
     *
     * @return double
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     *
     * @param double $x Horizontal position (X) of the stamp
     *
     * @return $this
     */
    public function setX($x)
    {
        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets y
     *
     * @return double
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     *
     * @param double $y Vertical position (Y) for stamp
     *
     * @return $this
     */
    public function setY($y)
    {
        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width Horizontal dimension for stamp.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height Vertical dimension for stamp
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets page_index
     *
     * @return int
     */
    public function getPageIndex()
    {
        return $this->container['page_index'];
    }

    /**
     * Sets page_index
     *
     * @param int $page_index Page index for stamp.
     *
     * @return $this
     */
    public function setPageIndex($page_index)
    {
        $this->container['page_index'] = $page_index;

        return $this;
    }

    /**
     * Gets master_definition_id
     *
     * @return string
     */
    public function getMasterDefinitionId()
    {
        return $this->container['master_definition_id'];
    }

    /**
     * Sets master_definition_id
     *
     * @param string $master_definition_id Stamp definition Id.
     *
     * @return $this
     */
    public function setMasterDefinitionId($master_definition_id)
    {
        $this->container['master_definition_id'] = $master_definition_id;

        return $this;
    }

    /**
     * Gets bindings
     *
     * @return \Swagger\Client\Model\StampsInstanceValueDTO[]
     */
    public function getBindings()
    {
        return $this->container['bindings'];
    }

    /**
     * Sets bindings
     *
     * @param \Swagger\Client\Model\StampsInstanceValueDTO[] $bindings List of possibile binding value.
     *
     * @return $this
     */
    public function setBindings($bindings)
    {
        $this->container['bindings'] = $bindings;

        return $this;
    }

    /**
     * Gets xaml
     *
     * @return string
     */
    public function getXaml()
    {
        return $this->container['xaml'];
    }

    /**
     * Sets xaml
     *
     * @param string $xaml Xaml of the stamp.
     *
     * @return $this
     */
    public function setXaml($xaml)
    {
        $this->container['xaml'] = $xaml;

        return $this;
    }

    /**
     * Gets is_resizable
     *
     * @return bool
     */
    public function getIsResizable()
    {
        return $this->container['is_resizable'];
    }

    /**
     * Sets is_resizable
     *
     * @param bool $is_resizable Is resizable.
     *
     * @return $this
     */
    public function setIsResizable($is_resizable)
    {
        $this->container['is_resizable'] = $is_resizable;

        return $this;
    }

    /**
     * Gets remove_after_applied
     *
     * @return bool
     */
    public function getRemoveAfterApplied()
    {
        return $this->container['remove_after_applied'];
    }

    /**
     * Sets remove_after_applied
     *
     * @param bool $remove_after_applied Stamp must be removed after apply.
     *
     * @return $this
     */
    public function setRemoveAfterApplied($remove_after_applied)
    {
        $this->container['remove_after_applied'] = $remove_after_applied;

        return $this;
    }

    /**
     * Gets stamp_name
     *
     * @return string
     */
    public function getStampName()
    {
        return $this->container['stamp_name'];
    }

    /**
     * Sets stamp_name
     *
     * @param string $stamp_name Stamp name.
     *
     * @return $this
     */
    public function setStampName($stamp_name)
    {
        $this->container['stamp_name'] = $stamp_name;

        return $this;
    }

    /**
     * Gets stamp_description
     *
     * @return string
     */
    public function getStampDescription()
    {
        return $this->container['stamp_description'];
    }

    /**
     * Sets stamp_description
     *
     * @param string $stamp_description Stamp description.
     *
     * @return $this
     */
    public function setStampDescription($stamp_description)
    {
        $this->container['stamp_description'] = $stamp_description;

        return $this;
    }

    /**
     * Gets applied
     *
     * @return bool
     */
    public function getApplied()
    {
        return $this->container['applied'];
    }

    /**
     * Sets applied
     *
     * @param bool $applied Stamp is applied
     *
     * @return $this
     */
    public function setApplied($applied)
    {
        $this->container['applied'] = $applied;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


