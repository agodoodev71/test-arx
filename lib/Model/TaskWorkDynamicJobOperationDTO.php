<?php
/**
 * TaskWorkDynamicJobOperationDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TaskWorkDynamicJobOperationDTO Class Doc Comment
 *
 * @category Class
 * @description Dynamic job operation
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskWorkDynamicJobOperationDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskWorkDynamicJobOperationDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'process_id' => 'int',
        'task_work_id' => 'int',
        'dynamic_job' => '\Swagger\Client\Model\UserCompleteDTO',
        'outcome_value' => 'string',
        'execute_after' => 'bool',
        'is_required' => 'bool',
        'is_executed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'process_id' => 'int32',
        'task_work_id' => 'int32',
        'dynamic_job' => null,
        'outcome_value' => null,
        'execute_after' => null,
        'is_required' => null,
        'is_executed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'process_id' => 'processId',
        'task_work_id' => 'taskWorkId',
        'dynamic_job' => 'dynamicJob',
        'outcome_value' => 'outcomeValue',
        'execute_after' => 'executeAfter',
        'is_required' => 'isRequired',
        'is_executed' => 'isExecuted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'process_id' => 'setProcessId',
        'task_work_id' => 'setTaskWorkId',
        'dynamic_job' => 'setDynamicJob',
        'outcome_value' => 'setOutcomeValue',
        'execute_after' => 'setExecuteAfter',
        'is_required' => 'setIsRequired',
        'is_executed' => 'setIsExecuted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'process_id' => 'getProcessId',
        'task_work_id' => 'getTaskWorkId',
        'dynamic_job' => 'getDynamicJob',
        'outcome_value' => 'getOutcomeValue',
        'execute_after' => 'getExecuteAfter',
        'is_required' => 'getIsRequired',
        'is_executed' => 'getIsExecuted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['process_id'] = isset($data['process_id']) ? $data['process_id'] : null;
        $this->container['task_work_id'] = isset($data['task_work_id']) ? $data['task_work_id'] : null;
        $this->container['dynamic_job'] = isset($data['dynamic_job']) ? $data['dynamic_job'] : null;
        $this->container['outcome_value'] = isset($data['outcome_value']) ? $data['outcome_value'] : null;
        $this->container['execute_after'] = isset($data['execute_after']) ? $data['execute_after'] : null;
        $this->container['is_required'] = isset($data['is_required']) ? $data['is_required'] : null;
        $this->container['is_executed'] = isset($data['is_executed']) ? $data['is_executed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets process_id
     *
     * @return int
     */
    public function getProcessId()
    {
        return $this->container['process_id'];
    }

    /**
     * Sets process_id
     *
     * @param int $process_id Process Id
     *
     * @return $this
     */
    public function setProcessId($process_id)
    {
        $this->container['process_id'] = $process_id;

        return $this;
    }

    /**
     * Gets task_work_id
     *
     * @return int
     */
    public function getTaskWorkId()
    {
        return $this->container['task_work_id'];
    }

    /**
     * Sets task_work_id
     *
     * @param int $task_work_id TaskWork Id
     *
     * @return $this
     */
    public function setTaskWorkId($task_work_id)
    {
        $this->container['task_work_id'] = $task_work_id;

        return $this;
    }

    /**
     * Gets dynamic_job
     *
     * @return \Swagger\Client\Model\UserCompleteDTO
     */
    public function getDynamicJob()
    {
        return $this->container['dynamic_job'];
    }

    /**
     * Sets dynamic_job
     *
     * @param \Swagger\Client\Model\UserCompleteDTO $dynamic_job Dynamic job
     *
     * @return $this
     */
    public function setDynamicJob($dynamic_job)
    {
        $this->container['dynamic_job'] = $dynamic_job;

        return $this;
    }

    /**
     * Gets outcome_value
     *
     * @return string
     */
    public function getOutcomeValue()
    {
        return $this->container['outcome_value'];
    }

    /**
     * Sets outcome_value
     *
     * @param string $outcome_value Value for outcome
     *
     * @return $this
     */
    public function setOutcomeValue($outcome_value)
    {
        $this->container['outcome_value'] = $outcome_value;

        return $this;
    }

    /**
     * Gets execute_after
     *
     * @return bool
     */
    public function getExecuteAfter()
    {
        return $this->container['execute_after'];
    }

    /**
     * Sets execute_after
     *
     * @param bool $execute_after After execution
     *
     * @return $this
     */
    public function setExecuteAfter($execute_after)
    {
        $this->container['execute_after'] = $execute_after;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool $is_required Required
     *
     * @return $this
     */
    public function setIsRequired($is_required)
    {
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets is_executed
     *
     * @return bool
     */
    public function getIsExecuted()
    {
        return $this->container['is_executed'];
    }

    /**
     * Sets is_executed
     *
     * @param bool $is_executed Executed
     *
     * @return $this
     */
    public function setIsExecuted($is_executed)
    {
        $this->container['is_executed'] = $is_executed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


