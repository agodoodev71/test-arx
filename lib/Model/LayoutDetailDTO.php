<?php
/**
 * LayoutDetailDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LayoutDetailDTO Class Doc Comment
 *
 * @category Class
 * @description Class of layout deatil
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LayoutDetailDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LayoutDetailDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'label' => 'string',
        'element_type' => 'int',
        'element_id' => 'string',
        'element_action' => 'int',
        'order_index' => 'int',
        'parent_id' => 'int',
        'layout_id' => 'int',
        'operation' => 'int',
        'favourite' => 'bool',
        'translations' => '\Swagger\Client\Model\LabelTranslationsDto[]',
        'childs' => '\Swagger\Client\Model\LayoutDetailDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'label' => null,
        'element_type' => 'int32',
        'element_id' => null,
        'element_action' => 'int32',
        'order_index' => 'int32',
        'parent_id' => 'int32',
        'layout_id' => 'int32',
        'operation' => 'int32',
        'favourite' => null,
        'translations' => null,
        'childs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'element_type' => 'elementType',
        'element_id' => 'elementId',
        'element_action' => 'elementAction',
        'order_index' => 'orderIndex',
        'parent_id' => 'parentId',
        'layout_id' => 'layoutId',
        'operation' => 'operation',
        'favourite' => 'favourite',
        'translations' => 'translations',
        'childs' => 'childs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'element_type' => 'setElementType',
        'element_id' => 'setElementId',
        'element_action' => 'setElementAction',
        'order_index' => 'setOrderIndex',
        'parent_id' => 'setParentId',
        'layout_id' => 'setLayoutId',
        'operation' => 'setOperation',
        'favourite' => 'setFavourite',
        'translations' => 'setTranslations',
        'childs' => 'setChilds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'element_type' => 'getElementType',
        'element_id' => 'getElementId',
        'element_action' => 'getElementAction',
        'order_index' => 'getOrderIndex',
        'parent_id' => 'getParentId',
        'layout_id' => 'getLayoutId',
        'operation' => 'getOperation',
        'favourite' => 'getFavourite',
        'translations' => 'getTranslations',
        'childs' => 'getChilds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['element_type'] = isset($data['element_type']) ? $data['element_type'] : null;
        $this->container['element_id'] = isset($data['element_id']) ? $data['element_id'] : null;
        $this->container['element_action'] = isset($data['element_action']) ? $data['element_action'] : null;
        $this->container['order_index'] = isset($data['order_index']) ? $data['order_index'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['layout_id'] = isset($data['layout_id']) ? $data['layout_id'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['favourite'] = isset($data['favourite']) ? $data['favourite'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
        $this->container['childs'] = isset($data['childs']) ? $data['childs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets element_type
     *
     * @return int
     */
    public function getElementType()
    {
        return $this->container['element_type'];
    }

    /**
     * Sets element_type
     *
     * @param int $element_type Element Type
     *
     * @return $this
     */
    public function setElementType($element_type)
    {
        $this->container['element_type'] = $element_type;

        return $this;
    }

    /**
     * Gets element_id
     *
     * @return string
     */
    public function getElementId()
    {
        return $this->container['element_id'];
    }

    /**
     * Sets element_id
     *
     * @param string $element_id Element Identifier
     *
     * @return $this
     */
    public function setElementId($element_id)
    {
        $this->container['element_id'] = $element_id;

        return $this;
    }

    /**
     * Gets element_action
     *
     * @return int
     */
    public function getElementAction()
    {
        return $this->container['element_action'];
    }

    /**
     * Sets element_action
     *
     * @param int $element_action Element Action
     *
     * @return $this
     */
    public function setElementAction($element_action)
    {
        $this->container['element_action'] = $element_action;

        return $this;
    }

    /**
     * Gets order_index
     *
     * @return int
     */
    public function getOrderIndex()
    {
        return $this->container['order_index'];
    }

    /**
     * Sets order_index
     *
     * @param int $order_index Order
     *
     * @return $this
     */
    public function setOrderIndex($order_index)
    {
        $this->container['order_index'] = $order_index;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Parent Identifier
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets layout_id
     *
     * @return int
     */
    public function getLayoutId()
    {
        return $this->container['layout_id'];
    }

    /**
     * Sets layout_id
     *
     * @param int $layout_id Layout Identifier
     *
     * @return $this
     */
    public function setLayoutId($layout_id)
    {
        $this->container['layout_id'] = $layout_id;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return int
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param int $operation Operation Type
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets favourite
     *
     * @return bool
     */
    public function getFavourite()
    {
        return $this->container['favourite'];
    }

    /**
     * Sets favourite
     *
     * @param bool $favourite 
     *
     * @return $this
     */
    public function setFavourite($favourite)
    {
        $this->container['favourite'] = $favourite;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return \Swagger\Client\Model\LabelTranslationsDto[]
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param \Swagger\Client\Model\LabelTranslationsDto[] $translations Translated Labels
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets childs
     *
     * @return \Swagger\Client\Model\LayoutDetailDTO[]
     */
    public function getChilds()
    {
        return $this->container['childs'];
    }

    /**
     * Sets childs
     *
     * @param \Swagger\Client\Model\LayoutDetailDTO[] $childs Details of child layout
     *
     * @return $this
     */
    public function setChilds($childs)
    {
        $this->container['childs'] = $childs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


