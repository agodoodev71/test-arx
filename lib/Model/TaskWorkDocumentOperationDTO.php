<?php
/**
 * TaskWorkDocumentOperationDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TaskWorkDocumentOperationDTO Class Doc Comment
 *
 * @category Class
 * @description Document operation DTO.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskWorkDocumentOperationDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskWorkDocumentOperationDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'task_work_id' => 'int',
        'process_id' => 'int',
        'allow_new_document' => 'bool',
        'allow_document_selection' => 'bool',
        'view_id' => 'string',
        'is_required' => 'bool',
        'task_work_document_operation_type' => 'int',
        'edit_buffer' => 'bool',
        'document_type_type1' => 'int',
        'document_type_type2' => 'int',
        'document_type_type3' => 'int',
        'module_id' => 'int',
        'to_associates' => 'bool',
        'description' => 'string',
        'mask_id' => 'string',
        'to_send' => 'bool',
        'from_file_system' => 'bool',
        'from_scanner' => 'bool',
        'is_executed' => 'bool',
        'related_binder' => 'string',
        'task_work_document_operation_realtion_mode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'task_work_id' => 'int32',
        'process_id' => 'int32',
        'allow_new_document' => null,
        'allow_document_selection' => null,
        'view_id' => null,
        'is_required' => null,
        'task_work_document_operation_type' => 'int32',
        'edit_buffer' => null,
        'document_type_type1' => 'int32',
        'document_type_type2' => 'int32',
        'document_type_type3' => 'int32',
        'module_id' => 'int32',
        'to_associates' => null,
        'description' => null,
        'mask_id' => null,
        'to_send' => null,
        'from_file_system' => null,
        'from_scanner' => null,
        'is_executed' => null,
        'related_binder' => null,
        'task_work_document_operation_realtion_mode' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'task_work_id' => 'taskWorkId',
        'process_id' => 'processId',
        'allow_new_document' => 'allowNewDocument',
        'allow_document_selection' => 'allowDocumentSelection',
        'view_id' => 'viewId',
        'is_required' => 'isRequired',
        'task_work_document_operation_type' => 'taskWorkDocumentOperationType',
        'edit_buffer' => 'editBuffer',
        'document_type_type1' => 'documentTypeType1',
        'document_type_type2' => 'documentTypeType2',
        'document_type_type3' => 'documentTypeType3',
        'module_id' => 'moduleId',
        'to_associates' => 'toAssociates',
        'description' => 'description',
        'mask_id' => 'maskId',
        'to_send' => 'toSend',
        'from_file_system' => 'fromFileSystem',
        'from_scanner' => 'fromScanner',
        'is_executed' => 'isExecuted',
        'related_binder' => 'relatedBinder',
        'task_work_document_operation_realtion_mode' => 'taskWorkDocumentOperationRealtionMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'task_work_id' => 'setTaskWorkId',
        'process_id' => 'setProcessId',
        'allow_new_document' => 'setAllowNewDocument',
        'allow_document_selection' => 'setAllowDocumentSelection',
        'view_id' => 'setViewId',
        'is_required' => 'setIsRequired',
        'task_work_document_operation_type' => 'setTaskWorkDocumentOperationType',
        'edit_buffer' => 'setEditBuffer',
        'document_type_type1' => 'setDocumentTypeType1',
        'document_type_type2' => 'setDocumentTypeType2',
        'document_type_type3' => 'setDocumentTypeType3',
        'module_id' => 'setModuleId',
        'to_associates' => 'setToAssociates',
        'description' => 'setDescription',
        'mask_id' => 'setMaskId',
        'to_send' => 'setToSend',
        'from_file_system' => 'setFromFileSystem',
        'from_scanner' => 'setFromScanner',
        'is_executed' => 'setIsExecuted',
        'related_binder' => 'setRelatedBinder',
        'task_work_document_operation_realtion_mode' => 'setTaskWorkDocumentOperationRealtionMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'task_work_id' => 'getTaskWorkId',
        'process_id' => 'getProcessId',
        'allow_new_document' => 'getAllowNewDocument',
        'allow_document_selection' => 'getAllowDocumentSelection',
        'view_id' => 'getViewId',
        'is_required' => 'getIsRequired',
        'task_work_document_operation_type' => 'getTaskWorkDocumentOperationType',
        'edit_buffer' => 'getEditBuffer',
        'document_type_type1' => 'getDocumentTypeType1',
        'document_type_type2' => 'getDocumentTypeType2',
        'document_type_type3' => 'getDocumentTypeType3',
        'module_id' => 'getModuleId',
        'to_associates' => 'getToAssociates',
        'description' => 'getDescription',
        'mask_id' => 'getMaskId',
        'to_send' => 'getToSend',
        'from_file_system' => 'getFromFileSystem',
        'from_scanner' => 'getFromScanner',
        'is_executed' => 'getIsExecuted',
        'related_binder' => 'getRelatedBinder',
        'task_work_document_operation_realtion_mode' => 'getTaskWorkDocumentOperationRealtionMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['task_work_id'] = isset($data['task_work_id']) ? $data['task_work_id'] : null;
        $this->container['process_id'] = isset($data['process_id']) ? $data['process_id'] : null;
        $this->container['allow_new_document'] = isset($data['allow_new_document']) ? $data['allow_new_document'] : null;
        $this->container['allow_document_selection'] = isset($data['allow_document_selection']) ? $data['allow_document_selection'] : null;
        $this->container['view_id'] = isset($data['view_id']) ? $data['view_id'] : null;
        $this->container['is_required'] = isset($data['is_required']) ? $data['is_required'] : null;
        $this->container['task_work_document_operation_type'] = isset($data['task_work_document_operation_type']) ? $data['task_work_document_operation_type'] : null;
        $this->container['edit_buffer'] = isset($data['edit_buffer']) ? $data['edit_buffer'] : null;
        $this->container['document_type_type1'] = isset($data['document_type_type1']) ? $data['document_type_type1'] : null;
        $this->container['document_type_type2'] = isset($data['document_type_type2']) ? $data['document_type_type2'] : null;
        $this->container['document_type_type3'] = isset($data['document_type_type3']) ? $data['document_type_type3'] : null;
        $this->container['module_id'] = isset($data['module_id']) ? $data['module_id'] : null;
        $this->container['to_associates'] = isset($data['to_associates']) ? $data['to_associates'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['mask_id'] = isset($data['mask_id']) ? $data['mask_id'] : null;
        $this->container['to_send'] = isset($data['to_send']) ? $data['to_send'] : null;
        $this->container['from_file_system'] = isset($data['from_file_system']) ? $data['from_file_system'] : null;
        $this->container['from_scanner'] = isset($data['from_scanner']) ? $data['from_scanner'] : null;
        $this->container['is_executed'] = isset($data['is_executed']) ? $data['is_executed'] : null;
        $this->container['related_binder'] = isset($data['related_binder']) ? $data['related_binder'] : null;
        $this->container['task_work_document_operation_realtion_mode'] = isset($data['task_work_document_operation_realtion_mode']) ? $data['task_work_document_operation_realtion_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Operation Id.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets task_work_id
     *
     * @return int
     */
    public function getTaskWorkId()
    {
        return $this->container['task_work_id'];
    }

    /**
     * Sets task_work_id
     *
     * @param int $task_work_id TaskWork Id.
     *
     * @return $this
     */
    public function setTaskWorkId($task_work_id)
    {
        $this->container['task_work_id'] = $task_work_id;

        return $this;
    }

    /**
     * Gets process_id
     *
     * @return int
     */
    public function getProcessId()
    {
        return $this->container['process_id'];
    }

    /**
     * Sets process_id
     *
     * @param int $process_id Process Id.
     *
     * @return $this
     */
    public function setProcessId($process_id)
    {
        $this->container['process_id'] = $process_id;

        return $this;
    }

    /**
     * Gets allow_new_document
     *
     * @return bool
     */
    public function getAllowNewDocument()
    {
        return $this->container['allow_new_document'];
    }

    /**
     * Sets allow_new_document
     *
     * @param bool $allow_new_document Archiviation enabled.
     *
     * @return $this
     */
    public function setAllowNewDocument($allow_new_document)
    {
        $this->container['allow_new_document'] = $allow_new_document;

        return $this;
    }

    /**
     * Gets allow_document_selection
     *
     * @return bool
     */
    public function getAllowDocumentSelection()
    {
        return $this->container['allow_document_selection'];
    }

    /**
     * Sets allow_document_selection
     *
     * @param bool $allow_document_selection Selection enabled.
     *
     * @return $this
     */
    public function setAllowDocumentSelection($allow_document_selection)
    {
        $this->container['allow_document_selection'] = $allow_document_selection;

        return $this;
    }

    /**
     * Gets view_id
     *
     * @return string
     */
    public function getViewId()
    {
        return $this->container['view_id'];
    }

    /**
     * Sets view_id
     *
     * @param string $view_id Indicates the id of the view to use for the search
     *
     * @return $this
     */
    public function setViewId($view_id)
    {
        $this->container['view_id'] = $view_id;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool $is_required Required.
     *
     * @return $this
     */
    public function setIsRequired($is_required)
    {
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets task_work_document_operation_type
     *
     * @return int
     */
    public function getTaskWorkDocumentOperationType()
    {
        return $this->container['task_work_document_operation_type'];
    }

    /**
     * Sets task_work_document_operation_type
     *
     * @param int $task_work_document_operation_type Possible values:  0: Attachment  1: PrincipalDocument  2: SecondaryDocument
     *
     * @return $this
     */
    public function setTaskWorkDocumentOperationType($task_work_document_operation_type)
    {
        $this->container['task_work_document_operation_type'] = $task_work_document_operation_type;

        return $this;
    }

    /**
     * Gets edit_buffer
     *
     * @return bool
     */
    public function getEditBuffer()
    {
        return $this->container['edit_buffer'];
    }

    /**
     * Sets edit_buffer
     *
     * @param bool $edit_buffer Edit buffer copy.
     *
     * @return $this
     */
    public function setEditBuffer($edit_buffer)
    {
        $this->container['edit_buffer'] = $edit_buffer;

        return $this;
    }

    /**
     * Gets document_type_type1
     *
     * @return int
     */
    public function getDocumentTypeType1()
    {
        return $this->container['document_type_type1'];
    }

    /**
     * Sets document_type_type1
     *
     * @param int $document_type_type1 DocumentType Type one.
     *
     * @return $this
     */
    public function setDocumentTypeType1($document_type_type1)
    {
        $this->container['document_type_type1'] = $document_type_type1;

        return $this;
    }

    /**
     * Gets document_type_type2
     *
     * @return int
     */
    public function getDocumentTypeType2()
    {
        return $this->container['document_type_type2'];
    }

    /**
     * Sets document_type_type2
     *
     * @param int $document_type_type2 DocumentType Type two.
     *
     * @return $this
     */
    public function setDocumentTypeType2($document_type_type2)
    {
        $this->container['document_type_type2'] = $document_type_type2;

        return $this;
    }

    /**
     * Gets document_type_type3
     *
     * @return int
     */
    public function getDocumentTypeType3()
    {
        return $this->container['document_type_type3'];
    }

    /**
     * Sets document_type_type3
     *
     * @param int $document_type_type3 DocumentType Type three.
     *
     * @return $this
     */
    public function setDocumentTypeType3($document_type_type3)
    {
        $this->container['document_type_type3'] = $document_type_type3;

        return $this;
    }

    /**
     * Gets module_id
     *
     * @return int
     */
    public function getModuleId()
    {
        return $this->container['module_id'];
    }

    /**
     * Sets module_id
     *
     * @param int $module_id Model Id.
     *
     * @return $this
     */
    public function setModuleId($module_id)
    {
        $this->container['module_id'] = $module_id;

        return $this;
    }

    /**
     * Gets to_associates
     *
     * @return bool
     */
    public function getToAssociates()
    {
        return $this->container['to_associates'];
    }

    /**
     * Sets to_associates
     *
     * @param bool $to_associates Associates enabled.
     *
     * @return $this
     */
    public function setToAssociates($to_associates)
    {
        $this->container['to_associates'] = $to_associates;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Operation description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mask_id
     *
     * @return string
     */
    public function getMaskId()
    {
        return $this->container['mask_id'];
    }

    /**
     * Sets mask_id
     *
     * @param string $mask_id Mask Id.
     *
     * @return $this
     */
    public function setMaskId($mask_id)
    {
        $this->container['mask_id'] = $mask_id;

        return $this;
    }

    /**
     * Gets to_send
     *
     * @return bool
     */
    public function getToSend()
    {
        return $this->container['to_send'];
    }

    /**
     * Sets to_send
     *
     * @param bool $to_send Send enabled.
     *
     * @return $this
     */
    public function setToSend($to_send)
    {
        $this->container['to_send'] = $to_send;

        return $this;
    }

    /**
     * Gets from_file_system
     *
     * @return bool
     */
    public function getFromFileSystem()
    {
        return $this->container['from_file_system'];
    }

    /**
     * Sets from_file_system
     *
     * @param bool $from_file_system FileSystem selection.
     *
     * @return $this
     */
    public function setFromFileSystem($from_file_system)
    {
        $this->container['from_file_system'] = $from_file_system;

        return $this;
    }

    /**
     * Gets from_scanner
     *
     * @return bool
     */
    public function getFromScanner()
    {
        return $this->container['from_scanner'];
    }

    /**
     * Sets from_scanner
     *
     * @param bool $from_scanner Scanner selection.
     *
     * @return $this
     */
    public function setFromScanner($from_scanner)
    {
        $this->container['from_scanner'] = $from_scanner;

        return $this;
    }

    /**
     * Gets is_executed
     *
     * @return bool
     */
    public function getIsExecuted()
    {
        return $this->container['is_executed'];
    }

    /**
     * Sets is_executed
     *
     * @param bool $is_executed Operation Executed.
     *
     * @return $this
     */
    public function setIsExecuted($is_executed)
    {
        $this->container['is_executed'] = $is_executed;

        return $this;
    }

    /**
     * Gets related_binder
     *
     * @return string
     */
    public function getRelatedBinder()
    {
        return $this->container['related_binder'];
    }

    /**
     * Sets related_binder
     *
     * @param string $related_binder Related binder id
     *
     * @return $this
     */
    public function setRelatedBinder($related_binder)
    {
        $this->container['related_binder'] = $related_binder;

        return $this;
    }

    /**
     * Gets task_work_document_operation_realtion_mode
     *
     * @return int
     */
    public function getTaskWorkDocumentOperationRealtionMode()
    {
        return $this->container['task_work_document_operation_realtion_mode'];
    }

    /**
     * Sets task_work_document_operation_realtion_mode
     *
     * @param int $task_work_document_operation_realtion_mode Possible values:  0: AsChild  1: AsFather  -1: None
     *
     * @return $this
     */
    public function setTaskWorkDocumentOperationRealtionMode($task_work_document_operation_realtion_mode)
    {
        $this->container['task_work_document_operation_realtion_mode'] = $task_work_document_operation_realtion_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


