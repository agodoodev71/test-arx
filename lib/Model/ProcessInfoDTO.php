<?php
/**
 * ProcessInfoDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProcessInfoDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessInfoDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProcessInfoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_info_list' => '\Swagger\Client\Model\TaskInfoDTO[]',
        'document_info_list' => '\Swagger\Client\Model\DocumentWorkInfoDTO[]',
        'note_info_list' => '\Swagger\Client\Model\NoteWorkInfoDTO[]',
        'attachment_info_list' => '\Swagger\Client\Model\AttachmentWorkInfoDTO[]',
        'professional_role_info_list' => '\Swagger\Client\Model\ProfessionalRoleInfoDTO[]',
        'chrono_info_list' => '\Swagger\Client\Model\ChronoInfoDTO[]',
        'variable_info' => '\Swagger\Client\Model\ProcessInfoVariableDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_info_list' => null,
        'document_info_list' => null,
        'note_info_list' => null,
        'attachment_info_list' => null,
        'professional_role_info_list' => null,
        'chrono_info_list' => null,
        'variable_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_info_list' => 'taskInfoList',
        'document_info_list' => 'documentInfoList',
        'note_info_list' => 'noteInfoList',
        'attachment_info_list' => 'attachmentInfoList',
        'professional_role_info_list' => 'professionalRoleInfoList',
        'chrono_info_list' => 'chronoInfoList',
        'variable_info' => 'variableInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_info_list' => 'setTaskInfoList',
        'document_info_list' => 'setDocumentInfoList',
        'note_info_list' => 'setNoteInfoList',
        'attachment_info_list' => 'setAttachmentInfoList',
        'professional_role_info_list' => 'setProfessionalRoleInfoList',
        'chrono_info_list' => 'setChronoInfoList',
        'variable_info' => 'setVariableInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_info_list' => 'getTaskInfoList',
        'document_info_list' => 'getDocumentInfoList',
        'note_info_list' => 'getNoteInfoList',
        'attachment_info_list' => 'getAttachmentInfoList',
        'professional_role_info_list' => 'getProfessionalRoleInfoList',
        'chrono_info_list' => 'getChronoInfoList',
        'variable_info' => 'getVariableInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_info_list'] = isset($data['task_info_list']) ? $data['task_info_list'] : null;
        $this->container['document_info_list'] = isset($data['document_info_list']) ? $data['document_info_list'] : null;
        $this->container['note_info_list'] = isset($data['note_info_list']) ? $data['note_info_list'] : null;
        $this->container['attachment_info_list'] = isset($data['attachment_info_list']) ? $data['attachment_info_list'] : null;
        $this->container['professional_role_info_list'] = isset($data['professional_role_info_list']) ? $data['professional_role_info_list'] : null;
        $this->container['chrono_info_list'] = isset($data['chrono_info_list']) ? $data['chrono_info_list'] : null;
        $this->container['variable_info'] = isset($data['variable_info']) ? $data['variable_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets task_info_list
     *
     * @return \Swagger\Client\Model\TaskInfoDTO[]
     */
    public function getTaskInfoList()
    {
        return $this->container['task_info_list'];
    }

    /**
     * Sets task_info_list
     *
     * @param \Swagger\Client\Model\TaskInfoDTO[] $task_info_list task_info_list
     *
     * @return $this
     */
    public function setTaskInfoList($task_info_list)
    {
        $this->container['task_info_list'] = $task_info_list;

        return $this;
    }

    /**
     * Gets document_info_list
     *
     * @return \Swagger\Client\Model\DocumentWorkInfoDTO[]
     */
    public function getDocumentInfoList()
    {
        return $this->container['document_info_list'];
    }

    /**
     * Sets document_info_list
     *
     * @param \Swagger\Client\Model\DocumentWorkInfoDTO[] $document_info_list document_info_list
     *
     * @return $this
     */
    public function setDocumentInfoList($document_info_list)
    {
        $this->container['document_info_list'] = $document_info_list;

        return $this;
    }

    /**
     * Gets note_info_list
     *
     * @return \Swagger\Client\Model\NoteWorkInfoDTO[]
     */
    public function getNoteInfoList()
    {
        return $this->container['note_info_list'];
    }

    /**
     * Sets note_info_list
     *
     * @param \Swagger\Client\Model\NoteWorkInfoDTO[] $note_info_list note_info_list
     *
     * @return $this
     */
    public function setNoteInfoList($note_info_list)
    {
        $this->container['note_info_list'] = $note_info_list;

        return $this;
    }

    /**
     * Gets attachment_info_list
     *
     * @return \Swagger\Client\Model\AttachmentWorkInfoDTO[]
     */
    public function getAttachmentInfoList()
    {
        return $this->container['attachment_info_list'];
    }

    /**
     * Sets attachment_info_list
     *
     * @param \Swagger\Client\Model\AttachmentWorkInfoDTO[] $attachment_info_list attachment_info_list
     *
     * @return $this
     */
    public function setAttachmentInfoList($attachment_info_list)
    {
        $this->container['attachment_info_list'] = $attachment_info_list;

        return $this;
    }

    /**
     * Gets professional_role_info_list
     *
     * @return \Swagger\Client\Model\ProfessionalRoleInfoDTO[]
     */
    public function getProfessionalRoleInfoList()
    {
        return $this->container['professional_role_info_list'];
    }

    /**
     * Sets professional_role_info_list
     *
     * @param \Swagger\Client\Model\ProfessionalRoleInfoDTO[] $professional_role_info_list professional_role_info_list
     *
     * @return $this
     */
    public function setProfessionalRoleInfoList($professional_role_info_list)
    {
        $this->container['professional_role_info_list'] = $professional_role_info_list;

        return $this;
    }

    /**
     * Gets chrono_info_list
     *
     * @return \Swagger\Client\Model\ChronoInfoDTO[]
     */
    public function getChronoInfoList()
    {
        return $this->container['chrono_info_list'];
    }

    /**
     * Sets chrono_info_list
     *
     * @param \Swagger\Client\Model\ChronoInfoDTO[] $chrono_info_list chrono_info_list
     *
     * @return $this
     */
    public function setChronoInfoList($chrono_info_list)
    {
        $this->container['chrono_info_list'] = $chrono_info_list;

        return $this;
    }

    /**
     * Gets variable_info
     *
     * @return \Swagger\Client\Model\ProcessInfoVariableDTO
     */
    public function getVariableInfo()
    {
        return $this->container['variable_info'];
    }

    /**
     * Sets variable_info
     *
     * @param \Swagger\Client\Model\ProcessInfoVariableDTO $variable_info variable_info
     *
     * @return $this
     */
    public function setVariableInfo($variable_info)
    {
        $this->container['variable_info'] = $variable_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


