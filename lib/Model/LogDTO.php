<?php
/**
 * LogDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LogDTO Class Doc Comment
 *
 * @category Class
 * @description Class of log item
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LogDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LogDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'log_level' => 'int',
        'log_message' => 'string',
        'log_date' => '\DateTime',
        'user_id' => 'int',
        'user_name_complete' => 'string',
        'ip_logger' => 'string',
        'info_type' => 'int',
        'info_type_message' => 'string',
        'info_int' => 'int',
        'session_id' => 'string',
        'software_name' => 'string',
        'software_type' => 'string',
        'info_string' => 'string',
        'parent_id' => 'string',
        'log_kind' => 'int',
        'history_int' => 'int',
        'history_string' => 'string',
        'childs' => '\Swagger\Client\Model\LogDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'log_level' => 'int32',
        'log_message' => null,
        'log_date' => 'date-time',
        'user_id' => 'int32',
        'user_name_complete' => null,
        'ip_logger' => null,
        'info_type' => 'int32',
        'info_type_message' => null,
        'info_int' => 'int32',
        'session_id' => null,
        'software_name' => null,
        'software_type' => null,
        'info_string' => null,
        'parent_id' => null,
        'log_kind' => 'int32',
        'history_int' => 'int32',
        'history_string' => null,
        'childs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'log_level' => 'logLevel',
        'log_message' => 'logMessage',
        'log_date' => 'logDate',
        'user_id' => 'userId',
        'user_name_complete' => 'userNameComplete',
        'ip_logger' => 'ipLogger',
        'info_type' => 'infoType',
        'info_type_message' => 'infoTypeMessage',
        'info_int' => 'infoInt',
        'session_id' => 'sessionId',
        'software_name' => 'softwareName',
        'software_type' => 'softwareType',
        'info_string' => 'infoString',
        'parent_id' => 'parentId',
        'log_kind' => 'logKind',
        'history_int' => 'historyInt',
        'history_string' => 'historyString',
        'childs' => 'childs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'log_level' => 'setLogLevel',
        'log_message' => 'setLogMessage',
        'log_date' => 'setLogDate',
        'user_id' => 'setUserId',
        'user_name_complete' => 'setUserNameComplete',
        'ip_logger' => 'setIpLogger',
        'info_type' => 'setInfoType',
        'info_type_message' => 'setInfoTypeMessage',
        'info_int' => 'setInfoInt',
        'session_id' => 'setSessionId',
        'software_name' => 'setSoftwareName',
        'software_type' => 'setSoftwareType',
        'info_string' => 'setInfoString',
        'parent_id' => 'setParentId',
        'log_kind' => 'setLogKind',
        'history_int' => 'setHistoryInt',
        'history_string' => 'setHistoryString',
        'childs' => 'setChilds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'log_level' => 'getLogLevel',
        'log_message' => 'getLogMessage',
        'log_date' => 'getLogDate',
        'user_id' => 'getUserId',
        'user_name_complete' => 'getUserNameComplete',
        'ip_logger' => 'getIpLogger',
        'info_type' => 'getInfoType',
        'info_type_message' => 'getInfoTypeMessage',
        'info_int' => 'getInfoInt',
        'session_id' => 'getSessionId',
        'software_name' => 'getSoftwareName',
        'software_type' => 'getSoftwareType',
        'info_string' => 'getInfoString',
        'parent_id' => 'getParentId',
        'log_kind' => 'getLogKind',
        'history_int' => 'getHistoryInt',
        'history_string' => 'getHistoryString',
        'childs' => 'getChilds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['log_level'] = isset($data['log_level']) ? $data['log_level'] : null;
        $this->container['log_message'] = isset($data['log_message']) ? $data['log_message'] : null;
        $this->container['log_date'] = isset($data['log_date']) ? $data['log_date'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_name_complete'] = isset($data['user_name_complete']) ? $data['user_name_complete'] : null;
        $this->container['ip_logger'] = isset($data['ip_logger']) ? $data['ip_logger'] : null;
        $this->container['info_type'] = isset($data['info_type']) ? $data['info_type'] : null;
        $this->container['info_type_message'] = isset($data['info_type_message']) ? $data['info_type_message'] : null;
        $this->container['info_int'] = isset($data['info_int']) ? $data['info_int'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['software_name'] = isset($data['software_name']) ? $data['software_name'] : null;
        $this->container['software_type'] = isset($data['software_type']) ? $data['software_type'] : null;
        $this->container['info_string'] = isset($data['info_string']) ? $data['info_string'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['log_kind'] = isset($data['log_kind']) ? $data['log_kind'] : null;
        $this->container['history_int'] = isset($data['history_int']) ? $data['history_int'] : null;
        $this->container['history_string'] = isset($data['history_string']) ? $data['history_string'] : null;
        $this->container['childs'] = isset($data['childs']) ? $data['childs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets log_level
     *
     * @return int
     */
    public function getLogLevel()
    {
        return $this->container['log_level'];
    }

    /**
     * Sets log_level
     *
     * @param int $log_level Possible values:  1: INFORMATION  2: SUCCESSAUDIT  3: FAILUREAUDIT  4: WARNING  5: ERROR
     *
     * @return $this
     */
    public function setLogLevel($log_level)
    {
        $this->container['log_level'] = $log_level;

        return $this;
    }

    /**
     * Gets log_message
     *
     * @return string
     */
    public function getLogMessage()
    {
        return $this->container['log_message'];
    }

    /**
     * Sets log_message
     *
     * @param string $log_message Message
     *
     * @return $this
     */
    public function setLogMessage($log_message)
    {
        $this->container['log_message'] = $log_message;

        return $this;
    }

    /**
     * Gets log_date
     *
     * @return \DateTime
     */
    public function getLogDate()
    {
        return $this->container['log_date'];
    }

    /**
     * Sets log_date
     *
     * @param \DateTime $log_date Creation Date
     *
     * @return $this
     */
    public function setLogDate($log_date)
    {
        $this->container['log_date'] = $log_date;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id Author
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name_complete
     *
     * @return string
     */
    public function getUserNameComplete()
    {
        return $this->container['user_name_complete'];
    }

    /**
     * Sets user_name_complete
     *
     * @param string $user_name_complete Author Name
     *
     * @return $this
     */
    public function setUserNameComplete($user_name_complete)
    {
        $this->container['user_name_complete'] = $user_name_complete;

        return $this;
    }

    /**
     * Gets ip_logger
     *
     * @return string
     */
    public function getIpLogger()
    {
        return $this->container['ip_logger'];
    }

    /**
     * Sets ip_logger
     *
     * @param string $ip_logger Ip Address
     *
     * @return $this
     */
    public function setIpLogger($ip_logger)
    {
        $this->container['ip_logger'] = $ip_logger;

        return $this;
    }

    /**
     * Gets info_type
     *
     * @return int
     */
    public function getInfoType()
    {
        return $this->container['info_type'];
    }

    /**
     * Sets info_type
     *
     * @param int $info_type Possible values:  0: Nothing  1: WcfService  2: LogInClient  3: LogOutClient  4: LogInServer  5: LogOutServer  6: LogInSPR  7: LogOutSPR  8: LogInWEB  9: LogOutWEB  10: LogInGeneric  11: LogOutGeneric  12: LogInOCR  13: LogOutOCR  14: WcfServiceDmModuliDelete  15: LogIn  16: LogOut  17: GetDocument  18: SetDocument  19: DmNoteUpdated  20: PluginQueueLogInfo  21: SdAssocDocInserted  22: SdAssocDocDeleted  23: DmBarcodeDeleted  24: DmBarcodeUnMatchProfile  25: DmAllegatiFaxInsertDocument  26: DmDocOpenCheckOut  27: DocumentInsertRelationship  28: RevisioniGetDocument  29: RevisioniDelete  30: DmNpceOutInsert  31: DmNpceOutUpdate  32: DmNpceOutDelete  33: DmAssociazioniInsert  34: DmAllegatiWorkInsert  35: DmProcessDocSetDocumentInEditBuffer  36: DmProcessDocSetDocumentInLine  37: DmProcessDocSetDocumentForProfile  38: DmAllegatiDocInsert  39: DmAllegatiDocUpdate  40: DmAllegatiDocDelete  41: ProfileUpdateProtocollo  42: ProfileDeleted  43: ExternalCall  44: ProfileUndoCheckOut  45: ProfileInserted  46: ProfileLogReaded  47: ProfileUpdate  48: Profile_Field_DocName  49: Profile_Field_Aoo  50: Profile_Field_Numero  51: Profile_Field_DataDoc  52: Profile_Field_Mittente  53: Profile_Field_Destinatario  54: Profile_Field_Cc  55: Profile_Field_CreationDate  56: Profile_Field_Impronta  57: Profile_Field_Device  58: Profile_Field_DataFile  59: Profile_Field_Importante  60: Profile_Field_Revisione  61: Profile_Field_Autore  62: Profile_Field_Protocollo  63: Profile_Field_Anno  64: Profile_Field_Bloccato  65: Profile_Field_Stato  66: Profile_Field_InOut  67: Profile_Field_Scadenza  68: Profile_Field_Flag  69: Profile_Field_WorkFlow  70: Profile_Field_GestRev  71: Profile_Field_EtichettaCd  72: Profile_Field_EtichettaAos  73: Profile_Field_Associazioni  74: Profile_Field_OpenDoc  75: Profile_Field_Allegati  76: Profile_Field_Emergenza  77: Profile_Field_IsAos  78: Profile_Field_EtiReader  79: Profile_Field_ScadAos  80: Profile_Field_Aggiuntivi  81: Profile_Field_DataProt  82: Profile_Field_Compressed  83: ProfileLogMigrated  84: Profile_Field_Originale  85: ProfileSigned  86: ProfileInsertedInFolder  87: ProfileInsertedInFaxOut  88: ProfileInsertedInPratica  89: ProfileInsertedNote  90: LicenseViolated  91: BarcodePrinted  92: WorkflowStarted  93: WorkflowEnded  94: WorkflowEndedForced  95: WorkflowDeleted  96: DmAllegatiDocSignOtpSent  97: DmProfileSignOtpSent  98: ProfileRemovedFromFolder  99: ProfileRemovedFromPratica  100: Dm_Sharing_Insert  101: Dm_Sharing_Update  102: Dm_Sharing_Expiration  103: Dm_Sharing_Read  104: Dm_Sharing_Delete  105: Dm_Sharing_Expiration_NpceOut  106: RemoveDocument  107: Dm_Sharing_Alert  108: Dm_Sharing_MailOut  109: DocumentRemovedFromRelationship  110: DmAssociazioniDelete  111: Dm_Queue_Start  112: Dm_Queue_Change_Progress  113: Dm_Queue_Scheduled  114: Dm_Queue_Terminated  115: Dm_Queue_Cancelled  116: Dm_Queue_Waiting  117: Dm_Queue_Warning  118: Dm_Queue_Info  119: Dm_Instructions_Insert  120: Dm_Instructions_Update  121: Dm_Instructions_Delete  122: Dm_DatiProfilo_Field_Id  123: Dm_DatiProfilo_Field_Valore  124: Dm_DatiProfilo_Field_Contatti  125: Dm_DatiProfilo_Field_Fax  126: Dm_DatiProfilo_Field_Tel  127: Dm_DatiProfilo_Field_Indirizzo  128: Dm_DatiProfilo_Field_Mail  129: Dm_DatiProfilo_Field_Localita  130: Dm_DatiProfilo_Field_Cap  131: Dm_DatiProfilo_Field_Provincia  132: Dm_DatiProfilo_Field_Nazione  133: Dm_DatiProfilo_Field_Contatto  134: Dm_DatiProfilo_Field_Mansione  135: Dm_DatiProfilo_Field_TelNome  136: Dm_DatiProfilo_Field_FaxNome  137: Dm_DatiProfilo_Field_Cell  138: Dm_DatiProfilo_Field_Abitazione  139: Dm_DatiProfilo_Field_Reparto  140: Dm_DatiProfilo_Field_Ufficio  141: Dm_DatiProfilo_Field_Email  142: Dm_DatiProfilo_Field_Riferimento  143: Dm_DatiProfilo_Field_CodFis  144: Dm_DatiProfilo_Field_PartIva  145: Dm_DatiProfilo_Field_Priorita  146: Dm_DatiProfilo_Field_Codice  147: Profile_Field_Senders  148: Dm_Collaboration_Create  149: Dm_Collaboration_ReCollaborate  150: Dm_Collaboration_TakeOff  151: Dm_Collaboration_Delete  152: Profile_Field_DocumentType  153: Profile_Field_Tipo2  154: Profile_Field_Tipo3  155: Dm_Collaboration_Terminate  156: AllegatiDocSigned  157: LogInFailed
     *
     * @return $this
     */
    public function setInfoType($info_type)
    {
        $this->container['info_type'] = $info_type;

        return $this;
    }

    /**
     * Gets info_type_message
     *
     * @return string
     */
    public function getInfoTypeMessage()
    {
        return $this->container['info_type_message'];
    }

    /**
     * Sets info_type_message
     *
     * @param string $info_type_message Message Type
     *
     * @return $this
     */
    public function setInfoTypeMessage($info_type_message)
    {
        $this->container['info_type_message'] = $info_type_message;

        return $this;
    }

    /**
     * Gets info_int
     *
     * @return int
     */
    public function getInfoInt()
    {
        return $this->container['info_int'];
    }

    /**
     * Sets info_int
     *
     * @param int $info_int Information in integer format
     *
     * @return $this
     */
    public function setInfoInt($info_int)
    {
        $this->container['info_int'] = $info_int;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id Session Identifier
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets software_name
     *
     * @return string
     */
    public function getSoftwareName()
    {
        return $this->container['software_name'];
    }

    /**
     * Sets software_name
     *
     * @param string $software_name Software Name
     *
     * @return $this
     */
    public function setSoftwareName($software_name)
    {
        $this->container['software_name'] = $software_name;

        return $this;
    }

    /**
     * Gets software_type
     *
     * @return string
     */
    public function getSoftwareType()
    {
        return $this->container['software_type'];
    }

    /**
     * Sets software_type
     *
     * @param string $software_type Software Type
     *
     * @return $this
     */
    public function setSoftwareType($software_type)
    {
        $this->container['software_type'] = $software_type;

        return $this;
    }

    /**
     * Gets info_string
     *
     * @return string
     */
    public function getInfoString()
    {
        return $this->container['info_string'];
    }

    /**
     * Sets info_string
     *
     * @param string $info_string Information in string format
     *
     * @return $this
     */
    public function setInfoString($info_string)
    {
        $this->container['info_string'] = $info_string;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id Identifier of the reference object
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets log_kind
     *
     * @return int
     */
    public function getLogKind()
    {
        return $this->container['log_kind'];
    }

    /**
     * Sets log_kind
     *
     * @param int $log_kind Possible values:  0: None  1: Profile  2: Sharing  3: Queue  4: Instruction  5: Collaboration
     *
     * @return $this
     */
    public function setLogKind($log_kind)
    {
        $this->container['log_kind'] = $log_kind;

        return $this;
    }

    /**
     * Gets history_int
     *
     * @return int
     */
    public function getHistoryInt()
    {
        return $this->container['history_int'];
    }

    /**
     * Sets history_int
     *
     * @param int $history_int Integer for Deleting Rules
     *
     * @return $this
     */
    public function setHistoryInt($history_int)
    {
        $this->container['history_int'] = $history_int;

        return $this;
    }

    /**
     * Gets history_string
     *
     * @return string
     */
    public function getHistoryString()
    {
        return $this->container['history_string'];
    }

    /**
     * Sets history_string
     *
     * @param string $history_string String for Deleting Rules
     *
     * @return $this
     */
    public function setHistoryString($history_string)
    {
        $this->container['history_string'] = $history_string;

        return $this;
    }

    /**
     * Gets childs
     *
     * @return \Swagger\Client\Model\LogDTO[]
     */
    public function getChilds()
    {
        return $this->container['childs'];
    }

    /**
     * Sets childs
     *
     * @param \Swagger\Client\Model\LogDTO[] $childs Sublevel Items
     *
     * @return $this
     */
    public function setChilds($childs)
    {
        $this->container['childs'] = $childs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


