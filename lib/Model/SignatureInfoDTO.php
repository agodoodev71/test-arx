<?php
/**
 * SignatureInfoDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SignatureInfoDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SignatureInfoDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SignatureInfoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'signature_standard' => 'string',
        'certificate_info' => '\Swagger\Client\Model\CertificateInfoDTO',
        'timestamp_info' => '\Swagger\Client\Model\TimestampInfoDTO',
        'counter_signatures' => '\Swagger\Client\Model\SignatureInfoDTO[]',
        'content_type' => '\Swagger\Client\Model\IdValuePairDTO',
        'digest_algorithm' => '\Swagger\Client\Model\IdValuePairDTO',
        'sign_algorithm' => '\Swagger\Client\Model\IdValuePairDTO',
        'signature_hex' => 'string',
        'is_valid' => 'bool',
        'signature_integrity' => 'bool',
        'is_counter_sign' => 'bool',
        'signature_validation_message_list' => '\Swagger\Client\Model\ValidationMessageDTO[]',
        'signature_time_utc' => '\DateTime',
        'signed_attribute_list' => '\Swagger\Client\Model\SignatureAttributeDTO[]',
        'unsigned_attribute_list' => '\Swagger\Client\Model\SignatureAttributeDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'signature_standard' => null,
        'certificate_info' => null,
        'timestamp_info' => null,
        'counter_signatures' => null,
        'content_type' => null,
        'digest_algorithm' => null,
        'sign_algorithm' => null,
        'signature_hex' => null,
        'is_valid' => null,
        'signature_integrity' => null,
        'is_counter_sign' => null,
        'signature_validation_message_list' => null,
        'signature_time_utc' => 'date-time',
        'signed_attribute_list' => null,
        'unsigned_attribute_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signature_standard' => 'signatureStandard',
        'certificate_info' => 'certificateInfo',
        'timestamp_info' => 'timestampInfo',
        'counter_signatures' => 'counterSignatures',
        'content_type' => 'contentType',
        'digest_algorithm' => 'digestAlgorithm',
        'sign_algorithm' => 'signAlgorithm',
        'signature_hex' => 'signatureHex',
        'is_valid' => 'isValid',
        'signature_integrity' => 'signatureIntegrity',
        'is_counter_sign' => 'isCounterSign',
        'signature_validation_message_list' => 'signatureValidationMessageList',
        'signature_time_utc' => 'signatureTimeUtc',
        'signed_attribute_list' => 'signedAttributeList',
        'unsigned_attribute_list' => 'unsignedAttributeList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signature_standard' => 'setSignatureStandard',
        'certificate_info' => 'setCertificateInfo',
        'timestamp_info' => 'setTimestampInfo',
        'counter_signatures' => 'setCounterSignatures',
        'content_type' => 'setContentType',
        'digest_algorithm' => 'setDigestAlgorithm',
        'sign_algorithm' => 'setSignAlgorithm',
        'signature_hex' => 'setSignatureHex',
        'is_valid' => 'setIsValid',
        'signature_integrity' => 'setSignatureIntegrity',
        'is_counter_sign' => 'setIsCounterSign',
        'signature_validation_message_list' => 'setSignatureValidationMessageList',
        'signature_time_utc' => 'setSignatureTimeUtc',
        'signed_attribute_list' => 'setSignedAttributeList',
        'unsigned_attribute_list' => 'setUnsignedAttributeList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signature_standard' => 'getSignatureStandard',
        'certificate_info' => 'getCertificateInfo',
        'timestamp_info' => 'getTimestampInfo',
        'counter_signatures' => 'getCounterSignatures',
        'content_type' => 'getContentType',
        'digest_algorithm' => 'getDigestAlgorithm',
        'sign_algorithm' => 'getSignAlgorithm',
        'signature_hex' => 'getSignatureHex',
        'is_valid' => 'getIsValid',
        'signature_integrity' => 'getSignatureIntegrity',
        'is_counter_sign' => 'getIsCounterSign',
        'signature_validation_message_list' => 'getSignatureValidationMessageList',
        'signature_time_utc' => 'getSignatureTimeUtc',
        'signed_attribute_list' => 'getSignedAttributeList',
        'unsigned_attribute_list' => 'getUnsignedAttributeList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['signature_standard'] = isset($data['signature_standard']) ? $data['signature_standard'] : null;
        $this->container['certificate_info'] = isset($data['certificate_info']) ? $data['certificate_info'] : null;
        $this->container['timestamp_info'] = isset($data['timestamp_info']) ? $data['timestamp_info'] : null;
        $this->container['counter_signatures'] = isset($data['counter_signatures']) ? $data['counter_signatures'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['digest_algorithm'] = isset($data['digest_algorithm']) ? $data['digest_algorithm'] : null;
        $this->container['sign_algorithm'] = isset($data['sign_algorithm']) ? $data['sign_algorithm'] : null;
        $this->container['signature_hex'] = isset($data['signature_hex']) ? $data['signature_hex'] : null;
        $this->container['is_valid'] = isset($data['is_valid']) ? $data['is_valid'] : null;
        $this->container['signature_integrity'] = isset($data['signature_integrity']) ? $data['signature_integrity'] : null;
        $this->container['is_counter_sign'] = isset($data['is_counter_sign']) ? $data['is_counter_sign'] : null;
        $this->container['signature_validation_message_list'] = isset($data['signature_validation_message_list']) ? $data['signature_validation_message_list'] : null;
        $this->container['signature_time_utc'] = isset($data['signature_time_utc']) ? $data['signature_time_utc'] : null;
        $this->container['signed_attribute_list'] = isset($data['signed_attribute_list']) ? $data['signed_attribute_list'] : null;
        $this->container['unsigned_attribute_list'] = isset($data['unsigned_attribute_list']) ? $data['unsigned_attribute_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets signature_standard
     *
     * @return string
     */
    public function getSignatureStandard()
    {
        return $this->container['signature_standard'];
    }

    /**
     * Sets signature_standard
     *
     * @param string $signature_standard signature_standard
     *
     * @return $this
     */
    public function setSignatureStandard($signature_standard)
    {
        $this->container['signature_standard'] = $signature_standard;

        return $this;
    }

    /**
     * Gets certificate_info
     *
     * @return \Swagger\Client\Model\CertificateInfoDTO
     */
    public function getCertificateInfo()
    {
        return $this->container['certificate_info'];
    }

    /**
     * Sets certificate_info
     *
     * @param \Swagger\Client\Model\CertificateInfoDTO $certificate_info certificate_info
     *
     * @return $this
     */
    public function setCertificateInfo($certificate_info)
    {
        $this->container['certificate_info'] = $certificate_info;

        return $this;
    }

    /**
     * Gets timestamp_info
     *
     * @return \Swagger\Client\Model\TimestampInfoDTO
     */
    public function getTimestampInfo()
    {
        return $this->container['timestamp_info'];
    }

    /**
     * Sets timestamp_info
     *
     * @param \Swagger\Client\Model\TimestampInfoDTO $timestamp_info timestamp_info
     *
     * @return $this
     */
    public function setTimestampInfo($timestamp_info)
    {
        $this->container['timestamp_info'] = $timestamp_info;

        return $this;
    }

    /**
     * Gets counter_signatures
     *
     * @return \Swagger\Client\Model\SignatureInfoDTO[]
     */
    public function getCounterSignatures()
    {
        return $this->container['counter_signatures'];
    }

    /**
     * Sets counter_signatures
     *
     * @param \Swagger\Client\Model\SignatureInfoDTO[] $counter_signatures counter_signatures
     *
     * @return $this
     */
    public function setCounterSignatures($counter_signatures)
    {
        $this->container['counter_signatures'] = $counter_signatures;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return \Swagger\Client\Model\IdValuePairDTO
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param \Swagger\Client\Model\IdValuePairDTO $content_type content_type
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets digest_algorithm
     *
     * @return \Swagger\Client\Model\IdValuePairDTO
     */
    public function getDigestAlgorithm()
    {
        return $this->container['digest_algorithm'];
    }

    /**
     * Sets digest_algorithm
     *
     * @param \Swagger\Client\Model\IdValuePairDTO $digest_algorithm digest_algorithm
     *
     * @return $this
     */
    public function setDigestAlgorithm($digest_algorithm)
    {
        $this->container['digest_algorithm'] = $digest_algorithm;

        return $this;
    }

    /**
     * Gets sign_algorithm
     *
     * @return \Swagger\Client\Model\IdValuePairDTO
     */
    public function getSignAlgorithm()
    {
        return $this->container['sign_algorithm'];
    }

    /**
     * Sets sign_algorithm
     *
     * @param \Swagger\Client\Model\IdValuePairDTO $sign_algorithm sign_algorithm
     *
     * @return $this
     */
    public function setSignAlgorithm($sign_algorithm)
    {
        $this->container['sign_algorithm'] = $sign_algorithm;

        return $this;
    }

    /**
     * Gets signature_hex
     *
     * @return string
     */
    public function getSignatureHex()
    {
        return $this->container['signature_hex'];
    }

    /**
     * Sets signature_hex
     *
     * @param string $signature_hex signature_hex
     *
     * @return $this
     */
    public function setSignatureHex($signature_hex)
    {
        $this->container['signature_hex'] = $signature_hex;

        return $this;
    }

    /**
     * Gets is_valid
     *
     * @return bool
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool $is_valid is_valid
     *
     * @return $this
     */
    public function setIsValid($is_valid)
    {
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets signature_integrity
     *
     * @return bool
     */
    public function getSignatureIntegrity()
    {
        return $this->container['signature_integrity'];
    }

    /**
     * Sets signature_integrity
     *
     * @param bool $signature_integrity signature_integrity
     *
     * @return $this
     */
    public function setSignatureIntegrity($signature_integrity)
    {
        $this->container['signature_integrity'] = $signature_integrity;

        return $this;
    }

    /**
     * Gets is_counter_sign
     *
     * @return bool
     */
    public function getIsCounterSign()
    {
        return $this->container['is_counter_sign'];
    }

    /**
     * Sets is_counter_sign
     *
     * @param bool $is_counter_sign is_counter_sign
     *
     * @return $this
     */
    public function setIsCounterSign($is_counter_sign)
    {
        $this->container['is_counter_sign'] = $is_counter_sign;

        return $this;
    }

    /**
     * Gets signature_validation_message_list
     *
     * @return \Swagger\Client\Model\ValidationMessageDTO[]
     */
    public function getSignatureValidationMessageList()
    {
        return $this->container['signature_validation_message_list'];
    }

    /**
     * Sets signature_validation_message_list
     *
     * @param \Swagger\Client\Model\ValidationMessageDTO[] $signature_validation_message_list signature_validation_message_list
     *
     * @return $this
     */
    public function setSignatureValidationMessageList($signature_validation_message_list)
    {
        $this->container['signature_validation_message_list'] = $signature_validation_message_list;

        return $this;
    }

    /**
     * Gets signature_time_utc
     *
     * @return \DateTime
     */
    public function getSignatureTimeUtc()
    {
        return $this->container['signature_time_utc'];
    }

    /**
     * Sets signature_time_utc
     *
     * @param \DateTime $signature_time_utc signature_time_utc
     *
     * @return $this
     */
    public function setSignatureTimeUtc($signature_time_utc)
    {
        $this->container['signature_time_utc'] = $signature_time_utc;

        return $this;
    }

    /**
     * Gets signed_attribute_list
     *
     * @return \Swagger\Client\Model\SignatureAttributeDTO[]
     */
    public function getSignedAttributeList()
    {
        return $this->container['signed_attribute_list'];
    }

    /**
     * Sets signed_attribute_list
     *
     * @param \Swagger\Client\Model\SignatureAttributeDTO[] $signed_attribute_list signed_attribute_list
     *
     * @return $this
     */
    public function setSignedAttributeList($signed_attribute_list)
    {
        $this->container['signed_attribute_list'] = $signed_attribute_list;

        return $this;
    }

    /**
     * Gets unsigned_attribute_list
     *
     * @return \Swagger\Client\Model\SignatureAttributeDTO[]
     */
    public function getUnsignedAttributeList()
    {
        return $this->container['unsigned_attribute_list'];
    }

    /**
     * Sets unsigned_attribute_list
     *
     * @param \Swagger\Client\Model\SignatureAttributeDTO[] $unsigned_attribute_list unsigned_attribute_list
     *
     * @return $this
     */
    public function setUnsignedAttributeList($unsigned_attribute_list)
    {
        $this->container['unsigned_attribute_list'] = $unsigned_attribute_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


