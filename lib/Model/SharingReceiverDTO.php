<?php
/**
 * SharingReceiverDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SharingReceiverDTO Class Doc Comment
 *
 * @category Class
 * @description Sharing receiver informations.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SharingReceiverDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SharingReceiverDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sharing_receiver_id' => 'string',
        'sharing_id' => 'string',
        'email' => 'string',
        'address' => 'string',
        'cap' => 'string',
        'location' => 'string',
        'province' => 'string',
        'country' => 'string',
        'address_book_id' => 'int',
        'contact_id' => 'int',
        'sharing_reading_time' => 'int',
        'sharing_reading_last_time' => '\DateTime',
        'lang' => 'string',
        'receiver_name' => 'string',
        'processed' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sharing_receiver_id' => null,
        'sharing_id' => null,
        'email' => null,
        'address' => null,
        'cap' => null,
        'location' => null,
        'province' => null,
        'country' => null,
        'address_book_id' => 'int32',
        'contact_id' => 'int32',
        'sharing_reading_time' => 'int32',
        'sharing_reading_last_time' => 'date-time',
        'lang' => null,
        'receiver_name' => null,
        'processed' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sharing_receiver_id' => 'sharingReceiverId',
        'sharing_id' => 'sharingId',
        'email' => 'email',
        'address' => 'address',
        'cap' => 'cap',
        'location' => 'location',
        'province' => 'province',
        'country' => 'country',
        'address_book_id' => 'addressBookId',
        'contact_id' => 'contactId',
        'sharing_reading_time' => 'sharingReadingTime',
        'sharing_reading_last_time' => 'sharingReadingLastTime',
        'lang' => 'lang',
        'receiver_name' => 'receiverName',
        'processed' => 'processed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sharing_receiver_id' => 'setSharingReceiverId',
        'sharing_id' => 'setSharingId',
        'email' => 'setEmail',
        'address' => 'setAddress',
        'cap' => 'setCap',
        'location' => 'setLocation',
        'province' => 'setProvince',
        'country' => 'setCountry',
        'address_book_id' => 'setAddressBookId',
        'contact_id' => 'setContactId',
        'sharing_reading_time' => 'setSharingReadingTime',
        'sharing_reading_last_time' => 'setSharingReadingLastTime',
        'lang' => 'setLang',
        'receiver_name' => 'setReceiverName',
        'processed' => 'setProcessed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sharing_receiver_id' => 'getSharingReceiverId',
        'sharing_id' => 'getSharingId',
        'email' => 'getEmail',
        'address' => 'getAddress',
        'cap' => 'getCap',
        'location' => 'getLocation',
        'province' => 'getProvince',
        'country' => 'getCountry',
        'address_book_id' => 'getAddressBookId',
        'contact_id' => 'getContactId',
        'sharing_reading_time' => 'getSharingReadingTime',
        'sharing_reading_last_time' => 'getSharingReadingLastTime',
        'lang' => 'getLang',
        'receiver_name' => 'getReceiverName',
        'processed' => 'getProcessed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sharing_receiver_id'] = isset($data['sharing_receiver_id']) ? $data['sharing_receiver_id'] : null;
        $this->container['sharing_id'] = isset($data['sharing_id']) ? $data['sharing_id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['cap'] = isset($data['cap']) ? $data['cap'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['address_book_id'] = isset($data['address_book_id']) ? $data['address_book_id'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['sharing_reading_time'] = isset($data['sharing_reading_time']) ? $data['sharing_reading_time'] : null;
        $this->container['sharing_reading_last_time'] = isset($data['sharing_reading_last_time']) ? $data['sharing_reading_last_time'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['receiver_name'] = isset($data['receiver_name']) ? $data['receiver_name'] : null;
        $this->container['processed'] = isset($data['processed']) ? $data['processed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets sharing_receiver_id
     *
     * @return string
     */
    public function getSharingReceiverId()
    {
        return $this->container['sharing_receiver_id'];
    }

    /**
     * Sets sharing_receiver_id
     *
     * @param string $sharing_receiver_id Unique identifier for sharing receiver
     *
     * @return $this
     */
    public function setSharingReceiverId($sharing_receiver_id)
    {
        $this->container['sharing_receiver_id'] = $sharing_receiver_id;

        return $this;
    }

    /**
     * Gets sharing_id
     *
     * @return string
     */
    public function getSharingId()
    {
        return $this->container['sharing_id'];
    }

    /**
     * Sets sharing_id
     *
     * @param string $sharing_id Unique identifier for sharing.
     *
     * @return $this
     */
    public function setSharingId($sharing_id)
    {
        $this->container['sharing_id'] = $sharing_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Postal Address.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets cap
     *
     * @return string
     */
    public function getCap()
    {
        return $this->container['cap'];
    }

    /**
     * Sets cap
     *
     * @param string $cap Postal code.
     *
     * @return $this
     */
    public function setCap($cap)
    {
        $this->container['cap'] = $cap;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province Provincia.
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets address_book_id
     *
     * @return int
     */
    public function getAddressBookId()
    {
        return $this->container['address_book_id'];
    }

    /**
     * Sets address_book_id
     *
     * @param int $address_book_id Unique identifier for AddressBook
     *
     * @return $this
     */
    public function setAddressBookId($address_book_id)
    {
        $this->container['address_book_id'] = $address_book_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id Unique identifier for Contact
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets sharing_reading_time
     *
     * @return int
     */
    public function getSharingReadingTime()
    {
        return $this->container['sharing_reading_time'];
    }

    /**
     * Sets sharing_reading_time
     *
     * @param int $sharing_reading_time Number of read operations.
     *
     * @return $this
     */
    public function setSharingReadingTime($sharing_reading_time)
    {
        $this->container['sharing_reading_time'] = $sharing_reading_time;

        return $this;
    }

    /**
     * Gets sharing_reading_last_time
     *
     * @return \DateTime
     */
    public function getSharingReadingLastTime()
    {
        return $this->container['sharing_reading_last_time'];
    }

    /**
     * Sets sharing_reading_last_time
     *
     * @param \DateTime $sharing_reading_last_time Last reading DateTIme.
     *
     * @return $this
     */
    public function setSharingReadingLastTime($sharing_reading_last_time)
    {
        $this->container['sharing_reading_last_time'] = $sharing_reading_last_time;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang Lang code.
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets receiver_name
     *
     * @return string
     */
    public function getReceiverName()
    {
        return $this->container['receiver_name'];
    }

    /**
     * Sets receiver_name
     *
     * @param string $receiver_name Name of the receiver.
     *
     * @return $this
     */
    public function setReceiverName($receiver_name)
    {
        $this->container['receiver_name'] = $receiver_name;

        return $this;
    }

    /**
     * Gets processed
     *
     * @return int
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     *
     * @param int $processed Number of sharing elaboration
     *
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->container['processed'] = $processed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


