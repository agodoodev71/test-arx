<?php
/**
 * DocumentTypeBaseTreeDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentTypeBaseTreeDTO Class Doc Comment
 *
 * @category Class
 * @description Class of document type in levels form
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentTypeBaseTreeDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentTypeBaseTreeDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'id_parent' => 'int',
        'key' => 'string',
        'description' => 'string',
        'document_type' => 'int',
        'type2' => 'int',
        'type3' => 'int',
        'doc_state' => 'string',
        'in_out' => 'int',
        'childs' => '\Swagger\Client\Model\DocumentTypeBaseTreeDTO[]',
        'pa' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'id_parent' => 'int32',
        'key' => null,
        'description' => null,
        'document_type' => 'int32',
        'type2' => 'int32',
        'type3' => 'int32',
        'doc_state' => null,
        'in_out' => 'int32',
        'childs' => null,
        'pa' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'id_parent' => 'idParent',
        'key' => 'key',
        'description' => 'description',
        'document_type' => 'documentType',
        'type2' => 'type2',
        'type3' => 'type3',
        'doc_state' => 'docState',
        'in_out' => 'inOut',
        'childs' => 'childs',
        'pa' => 'pa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'id_parent' => 'setIdParent',
        'key' => 'setKey',
        'description' => 'setDescription',
        'document_type' => 'setDocumentType',
        'type2' => 'setType2',
        'type3' => 'setType3',
        'doc_state' => 'setDocState',
        'in_out' => 'setInOut',
        'childs' => 'setChilds',
        'pa' => 'setPa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'id_parent' => 'getIdParent',
        'key' => 'getKey',
        'description' => 'getDescription',
        'document_type' => 'getDocumentType',
        'type2' => 'getType2',
        'type3' => 'getType3',
        'doc_state' => 'getDocState',
        'in_out' => 'getInOut',
        'childs' => 'getChilds',
        'pa' => 'getPa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['id_parent'] = isset($data['id_parent']) ? $data['id_parent'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['type2'] = isset($data['type2']) ? $data['type2'] : null;
        $this->container['type3'] = isset($data['type3']) ? $data['type3'] : null;
        $this->container['doc_state'] = isset($data['doc_state']) ? $data['doc_state'] : null;
        $this->container['in_out'] = isset($data['in_out']) ? $data['in_out'] : null;
        $this->container['childs'] = isset($data['childs']) ? $data['childs'] : null;
        $this->container['pa'] = isset($data['pa']) ? $data['pa'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id_parent
     *
     * @return int
     */
    public function getIdParent()
    {
        return $this->container['id_parent'];
    }

    /**
     * Sets id_parent
     *
     * @param int $id_parent Identifier of the parent document type
     *
     * @return $this
     */
    public function setIdParent($id_parent)
    {
        $this->container['id_parent'] = $id_parent;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key Complete key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return int
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param int $document_type Identifier of the first level
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets type2
     *
     * @return int
     */
    public function getType2()
    {
        return $this->container['type2'];
    }

    /**
     * Sets type2
     *
     * @param int $type2 Identifier of the second level
     *
     * @return $this
     */
    public function setType2($type2)
    {
        $this->container['type2'] = $type2;

        return $this;
    }

    /**
     * Gets type3
     *
     * @return int
     */
    public function getType3()
    {
        return $this->container['type3'];
    }

    /**
     * Sets type3
     *
     * @param int $type3 Identifier of the third level
     *
     * @return $this
     */
    public function setType3($type3)
    {
        $this->container['type3'] = $type3;

        return $this;
    }

    /**
     * Gets doc_state
     *
     * @return string
     */
    public function getDocState()
    {
        return $this->container['doc_state'];
    }

    /**
     * Sets doc_state
     *
     * @param string $doc_state Default value of the document status
     *
     * @return $this
     */
    public function setDocState($doc_state)
    {
        $this->container['doc_state'] = $doc_state;

        return $this;
    }

    /**
     * Gets in_out
     *
     * @return int
     */
    public function getInOut()
    {
        return $this->container['in_out'];
    }

    /**
     * Sets in_out
     *
     * @param int $in_out Default value of the document inout
     *
     * @return $this
     */
    public function setInOut($in_out)
    {
        $this->container['in_out'] = $in_out;

        return $this;
    }

    /**
     * Gets childs
     *
     * @return \Swagger\Client\Model\DocumentTypeBaseTreeDTO[]
     */
    public function getChilds()
    {
        return $this->container['childs'];
    }

    /**
     * Sets childs
     *
     * @param \Swagger\Client\Model\DocumentTypeBaseTreeDTO[] $childs List of sublevel items
     *
     * @return $this
     */
    public function setChilds($childs)
    {
        $this->container['childs'] = $childs;

        return $this;
    }

    /**
     * Gets pa
     *
     * @return int
     */
    public function getPa()
    {
        return $this->container['pa'];
    }

    /**
     * Sets pa
     *
     * @param int $pa Required Public Administration (PA)
     *
     * @return $this
     */
    public function setPa($pa)
    {
        $this->container['pa'] = $pa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


