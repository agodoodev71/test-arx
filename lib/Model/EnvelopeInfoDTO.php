<?php
/**
 * EnvelopeInfoDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnvelopeInfoDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvelopeInfoDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnvelopeInfoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'signature_info_list' => '\Swagger\Client\Model\SignatureInfoDTO[]',
        'timestamp_info' => '\Swagger\Client\Model\TimestampInfoDTO',
        'nested_depth' => 'int',
        'envelope_sha256_hash' => 'string',
        'content_sha256_hash' => 'string',
        'mime_type' => 'string',
        'validation_message_list' => '\Swagger\Client\Model\ValidationMessageDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'signature_info_list' => null,
        'timestamp_info' => null,
        'nested_depth' => 'int32',
        'envelope_sha256_hash' => null,
        'content_sha256_hash' => null,
        'mime_type' => null,
        'validation_message_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signature_info_list' => 'signatureInfoList',
        'timestamp_info' => 'timestampInfo',
        'nested_depth' => 'nestedDepth',
        'envelope_sha256_hash' => 'envelopeSha256Hash',
        'content_sha256_hash' => 'contentSha256Hash',
        'mime_type' => 'mimeType',
        'validation_message_list' => 'validationMessageList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signature_info_list' => 'setSignatureInfoList',
        'timestamp_info' => 'setTimestampInfo',
        'nested_depth' => 'setNestedDepth',
        'envelope_sha256_hash' => 'setEnvelopeSha256Hash',
        'content_sha256_hash' => 'setContentSha256Hash',
        'mime_type' => 'setMimeType',
        'validation_message_list' => 'setValidationMessageList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signature_info_list' => 'getSignatureInfoList',
        'timestamp_info' => 'getTimestampInfo',
        'nested_depth' => 'getNestedDepth',
        'envelope_sha256_hash' => 'getEnvelopeSha256Hash',
        'content_sha256_hash' => 'getContentSha256Hash',
        'mime_type' => 'getMimeType',
        'validation_message_list' => 'getValidationMessageList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['signature_info_list'] = isset($data['signature_info_list']) ? $data['signature_info_list'] : null;
        $this->container['timestamp_info'] = isset($data['timestamp_info']) ? $data['timestamp_info'] : null;
        $this->container['nested_depth'] = isset($data['nested_depth']) ? $data['nested_depth'] : null;
        $this->container['envelope_sha256_hash'] = isset($data['envelope_sha256_hash']) ? $data['envelope_sha256_hash'] : null;
        $this->container['content_sha256_hash'] = isset($data['content_sha256_hash']) ? $data['content_sha256_hash'] : null;
        $this->container['mime_type'] = isset($data['mime_type']) ? $data['mime_type'] : null;
        $this->container['validation_message_list'] = isset($data['validation_message_list']) ? $data['validation_message_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets signature_info_list
     *
     * @return \Swagger\Client\Model\SignatureInfoDTO[]
     */
    public function getSignatureInfoList()
    {
        return $this->container['signature_info_list'];
    }

    /**
     * Sets signature_info_list
     *
     * @param \Swagger\Client\Model\SignatureInfoDTO[] $signature_info_list signature_info_list
     *
     * @return $this
     */
    public function setSignatureInfoList($signature_info_list)
    {
        $this->container['signature_info_list'] = $signature_info_list;

        return $this;
    }

    /**
     * Gets timestamp_info
     *
     * @return \Swagger\Client\Model\TimestampInfoDTO
     */
    public function getTimestampInfo()
    {
        return $this->container['timestamp_info'];
    }

    /**
     * Sets timestamp_info
     *
     * @param \Swagger\Client\Model\TimestampInfoDTO $timestamp_info timestamp_info
     *
     * @return $this
     */
    public function setTimestampInfo($timestamp_info)
    {
        $this->container['timestamp_info'] = $timestamp_info;

        return $this;
    }

    /**
     * Gets nested_depth
     *
     * @return int
     */
    public function getNestedDepth()
    {
        return $this->container['nested_depth'];
    }

    /**
     * Sets nested_depth
     *
     * @param int $nested_depth nested_depth
     *
     * @return $this
     */
    public function setNestedDepth($nested_depth)
    {
        $this->container['nested_depth'] = $nested_depth;

        return $this;
    }

    /**
     * Gets envelope_sha256_hash
     *
     * @return string
     */
    public function getEnvelopeSha256Hash()
    {
        return $this->container['envelope_sha256_hash'];
    }

    /**
     * Sets envelope_sha256_hash
     *
     * @param string $envelope_sha256_hash envelope_sha256_hash
     *
     * @return $this
     */
    public function setEnvelopeSha256Hash($envelope_sha256_hash)
    {
        $this->container['envelope_sha256_hash'] = $envelope_sha256_hash;

        return $this;
    }

    /**
     * Gets content_sha256_hash
     *
     * @return string
     */
    public function getContentSha256Hash()
    {
        return $this->container['content_sha256_hash'];
    }

    /**
     * Sets content_sha256_hash
     *
     * @param string $content_sha256_hash content_sha256_hash
     *
     * @return $this
     */
    public function setContentSha256Hash($content_sha256_hash)
    {
        $this->container['content_sha256_hash'] = $content_sha256_hash;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string $mime_type mime_type
     *
     * @return $this
     */
    public function setMimeType($mime_type)
    {
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets validation_message_list
     *
     * @return \Swagger\Client\Model\ValidationMessageDTO[]
     */
    public function getValidationMessageList()
    {
        return $this->container['validation_message_list'];
    }

    /**
     * Sets validation_message_list
     *
     * @param \Swagger\Client\Model\ValidationMessageDTO[] $validation_message_list validation_message_list
     *
     * @return $this
     */
    public function setValidationMessageList($validation_message_list)
    {
        $this->container['validation_message_list'] = $validation_message_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


