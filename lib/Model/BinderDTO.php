<?php
/**
 * BinderDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BinderDTO Class Doc Comment
 *
 * @category Class
 * @description Class of binder
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BinderDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BinderDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'binder_type_id' => 'int',
        'folder_id' => 'int',
        'binder_name' => 'string',
        'code' => 'string',
        'end_date' => '\DateTime',
        'start_date' => '\DateTime',
        'binder_state' => 'int',
        'user' => 'int',
        'user_complete_name' => 'string',
        'external_id' => 'string',
        'binder_type_description' => 'string',
        'fields' => '\Swagger\Client\Model\FieldBaseDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'binder_type_id' => 'int32',
        'folder_id' => 'int32',
        'binder_name' => null,
        'code' => null,
        'end_date' => 'date-time',
        'start_date' => 'date-time',
        'binder_state' => 'int32',
        'user' => 'int32',
        'user_complete_name' => null,
        'external_id' => null,
        'binder_type_description' => null,
        'fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'binder_type_id' => 'binderTypeId',
        'folder_id' => 'folderId',
        'binder_name' => 'binderName',
        'code' => 'code',
        'end_date' => 'endDate',
        'start_date' => 'startDate',
        'binder_state' => 'binderState',
        'user' => 'user',
        'user_complete_name' => 'userCompleteName',
        'external_id' => 'externalId',
        'binder_type_description' => 'binderTypeDescription',
        'fields' => 'fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'binder_type_id' => 'setBinderTypeId',
        'folder_id' => 'setFolderId',
        'binder_name' => 'setBinderName',
        'code' => 'setCode',
        'end_date' => 'setEndDate',
        'start_date' => 'setStartDate',
        'binder_state' => 'setBinderState',
        'user' => 'setUser',
        'user_complete_name' => 'setUserCompleteName',
        'external_id' => 'setExternalId',
        'binder_type_description' => 'setBinderTypeDescription',
        'fields' => 'setFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'binder_type_id' => 'getBinderTypeId',
        'folder_id' => 'getFolderId',
        'binder_name' => 'getBinderName',
        'code' => 'getCode',
        'end_date' => 'getEndDate',
        'start_date' => 'getStartDate',
        'binder_state' => 'getBinderState',
        'user' => 'getUser',
        'user_complete_name' => 'getUserCompleteName',
        'external_id' => 'getExternalId',
        'binder_type_description' => 'getBinderTypeDescription',
        'fields' => 'getFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['binder_type_id'] = isset($data['binder_type_id']) ? $data['binder_type_id'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['binder_name'] = isset($data['binder_name']) ? $data['binder_name'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['binder_state'] = isset($data['binder_state']) ? $data['binder_state'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['user_complete_name'] = isset($data['user_complete_name']) ? $data['user_complete_name'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['binder_type_description'] = isset($data['binder_type_description']) ? $data['binder_type_description'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets binder_type_id
     *
     * @return int
     */
    public function getBinderTypeId()
    {
        return $this->container['binder_type_id'];
    }

    /**
     * Sets binder_type_id
     *
     * @param int $binder_type_id Type Identifier
     *
     * @return $this
     */
    public function setBinderTypeId($binder_type_id)
    {
        $this->container['binder_type_id'] = $binder_type_id;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return int
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param int $folder_id Folder Identifier
     *
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets binder_name
     *
     * @return string
     */
    public function getBinderName()
    {
        return $this->container['binder_name'];
    }

    /**
     * Sets binder_name
     *
     * @param string $binder_name Name
     *
     * @return $this
     */
    public function setBinderName($binder_name)
    {
        $this->container['binder_name'] = $binder_name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Expiry
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start Date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets binder_state
     *
     * @return int
     */
    public function getBinderState()
    {
        return $this->container['binder_state'];
    }

    /**
     * Sets binder_state
     *
     * @param int $binder_state State
     *
     * @return $this
     */
    public function setBinderState($binder_state)
    {
        $this->container['binder_state'] = $binder_state;

        return $this;
    }

    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user Author Identifier
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_complete_name
     *
     * @return string
     */
    public function getUserCompleteName()
    {
        return $this->container['user_complete_name'];
    }

    /**
     * Sets user_complete_name
     *
     * @param string $user_complete_name Author Name
     *
     * @return $this
     */
    public function setUserCompleteName($user_complete_name)
    {
        $this->container['user_complete_name'] = $user_complete_name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id External Identifier
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets binder_type_description
     *
     * @return string
     */
    public function getBinderTypeDescription()
    {
        return $this->container['binder_type_description'];
    }

    /**
     * Sets binder_type_description
     *
     * @param string $binder_type_description Type Description
     *
     * @return $this
     */
    public function setBinderTypeDescription($binder_type_description)
    {
        $this->container['binder_type_description'] = $binder_type_description;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Swagger\Client\Model\FieldBaseDTO[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Swagger\Client\Model\FieldBaseDTO[] $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


