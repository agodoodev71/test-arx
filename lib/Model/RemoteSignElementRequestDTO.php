<?php
/**
 * RemoteSignElementRequestDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoteSignElementRequestDTO Class Doc Comment
 *
 * @category Class
 * @description Class of remote signature field
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteSignElementRequestDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RemoteSignElementRequestDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'table_type' => 'int',
        'doc_id' => 'string',
        'doc_extra_id' => 'string',
        'pdf_embedded_mode' => 'bool',
        'sign_pdf_properties' => '\Swagger\Client\Model\SignPdfPropertiesDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'table_type' => 'int32',
        'doc_id' => null,
        'doc_extra_id' => null,
        'pdf_embedded_mode' => null,
        'sign_pdf_properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'table_type' => 'tableType',
        'doc_id' => 'docId',
        'doc_extra_id' => 'docExtraId',
        'pdf_embedded_mode' => 'pdfEmbeddedMode',
        'sign_pdf_properties' => 'signPdfProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'table_type' => 'setTableType',
        'doc_id' => 'setDocId',
        'doc_extra_id' => 'setDocExtraId',
        'pdf_embedded_mode' => 'setPdfEmbeddedMode',
        'sign_pdf_properties' => 'setSignPdfProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'table_type' => 'getTableType',
        'doc_id' => 'getDocId',
        'doc_extra_id' => 'getDocExtraId',
        'pdf_embedded_mode' => 'getPdfEmbeddedMode',
        'sign_pdf_properties' => 'getSignPdfProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['table_type'] = isset($data['table_type']) ? $data['table_type'] : null;
        $this->container['doc_id'] = isset($data['doc_id']) ? $data['doc_id'] : null;
        $this->container['doc_extra_id'] = isset($data['doc_extra_id']) ? $data['doc_extra_id'] : null;
        $this->container['pdf_embedded_mode'] = isset($data['pdf_embedded_mode']) ? $data['pdf_embedded_mode'] : null;
        $this->container['sign_pdf_properties'] = isset($data['sign_pdf_properties']) ? $data['sign_pdf_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets table_type
     *
     * @return int
     */
    public function getTableType()
    {
        return $this->container['table_type'];
    }

    /**
     * Sets table_type
     *
     * @param int $table_type Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc
     *
     * @return $this
     */
    public function setTableType($table_type)
    {
        $this->container['table_type'] = $table_type;

        return $this;
    }

    /**
     * Gets doc_id
     *
     * @return string
     */
    public function getDocId()
    {
        return $this->container['doc_id'];
    }

    /**
     * Sets doc_id
     *
     * @param string $doc_id Document Identifier
     *
     * @return $this
     */
    public function setDocId($doc_id)
    {
        $this->container['doc_id'] = $doc_id;

        return $this;
    }

    /**
     * Gets doc_extra_id
     *
     * @return string
     */
    public function getDocExtraId()
    {
        return $this->container['doc_extra_id'];
    }

    /**
     * Sets doc_extra_id
     *
     * @param string $doc_extra_id Document External Identifier
     *
     * @return $this
     */
    public function setDocExtraId($doc_extra_id)
    {
        $this->container['doc_extra_id'] = $doc_extra_id;

        return $this;
    }

    /**
     * Gets pdf_embedded_mode
     *
     * @return bool
     */
    public function getPdfEmbeddedMode()
    {
        return $this->container['pdf_embedded_mode'];
    }

    /**
     * Sets pdf_embedded_mode
     *
     * @param bool $pdf_embedded_mode Enabled Pdf Embedded Signature
     *
     * @return $this
     */
    public function setPdfEmbeddedMode($pdf_embedded_mode)
    {
        $this->container['pdf_embedded_mode'] = $pdf_embedded_mode;

        return $this;
    }

    /**
     * Gets sign_pdf_properties
     *
     * @return \Swagger\Client\Model\SignPdfPropertiesDTO
     */
    public function getSignPdfProperties()
    {
        return $this->container['sign_pdf_properties'];
    }

    /**
     * Sets sign_pdf_properties
     *
     * @param \Swagger\Client\Model\SignPdfPropertiesDTO $sign_pdf_properties Settings of pdf signature
     *
     * @return $this
     */
    public function setSignPdfProperties($sign_pdf_properties)
    {
        $this->container['sign_pdf_properties'] = $sign_pdf_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


