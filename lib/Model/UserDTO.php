<?php
/**
 * UserDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserDTO Class Doc Comment
 *
 * @category Class
 * @description Class of the user
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user' => 'int',
        'description' => 'string',
        'email' => 'string',
        'business_unit' => 'string',
        'lang' => 'string',
        'resp_aos' => 'bool',
        'complete_name' => 'string',
        'business_unit_locked' => 'bool',
        'working_business_unit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user' => 'int32',
        'description' => null,
        'email' => null,
        'business_unit' => null,
        'lang' => null,
        'resp_aos' => null,
        'complete_name' => null,
        'business_unit_locked' => null,
        'working_business_unit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'description' => 'description',
        'email' => 'email',
        'business_unit' => 'businessUnit',
        'lang' => 'lang',
        'resp_aos' => 'respAos',
        'complete_name' => 'completeName',
        'business_unit_locked' => 'businessUnitLocked',
        'working_business_unit' => 'workingBusinessUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'business_unit' => 'setBusinessUnit',
        'lang' => 'setLang',
        'resp_aos' => 'setRespAos',
        'complete_name' => 'setCompleteName',
        'business_unit_locked' => 'setBusinessUnitLocked',
        'working_business_unit' => 'setWorkingBusinessUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'business_unit' => 'getBusinessUnit',
        'lang' => 'getLang',
        'resp_aos' => 'getRespAos',
        'complete_name' => 'getCompleteName',
        'business_unit_locked' => 'getBusinessUnitLocked',
        'working_business_unit' => 'getWorkingBusinessUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['business_unit'] = isset($data['business_unit']) ? $data['business_unit'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['resp_aos'] = isset($data['resp_aos']) ? $data['resp_aos'] : null;
        $this->container['complete_name'] = isset($data['complete_name']) ? $data['complete_name'] : null;
        $this->container['business_unit_locked'] = isset($data['business_unit_locked']) ? $data['business_unit_locked'] : null;
        $this->container['working_business_unit'] = isset($data['working_business_unit']) ? $data['working_business_unit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user Identifier
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return string
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param string $business_unit Business Unit
     *
     * @return $this
     */
    public function setBusinessUnit($business_unit)
    {
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang Language
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets resp_aos
     *
     * @return bool
     */
    public function getRespAos()
    {
        return $this->container['resp_aos'];
    }

    /**
     * Sets resp_aos
     *
     * @param bool $resp_aos Person in charge about Aos
     *
     * @return $this
     */
    public function setRespAos($resp_aos)
    {
        $this->container['resp_aos'] = $resp_aos;

        return $this;
    }

    /**
     * Gets complete_name
     *
     * @return string
     */
    public function getCompleteName()
    {
        return $this->container['complete_name'];
    }

    /**
     * Sets complete_name
     *
     * @param string $complete_name Full name
     *
     * @return $this
     */
    public function setCompleteName($complete_name)
    {
        $this->container['complete_name'] = $complete_name;

        return $this;
    }

    /**
     * Gets business_unit_locked
     *
     * @return bool
     */
    public function getBusinessUnitLocked()
    {
        return $this->container['business_unit_locked'];
    }

    /**
     * Sets business_unit_locked
     *
     * @param bool $business_unit_locked Work on single business unit
     *
     * @return $this
     */
    public function setBusinessUnitLocked($business_unit_locked)
    {
        $this->container['business_unit_locked'] = $business_unit_locked;

        return $this;
    }

    /**
     * Gets working_business_unit
     *
     * @return string
     */
    public function getWorkingBusinessUnit()
    {
        return $this->container['working_business_unit'];
    }

    /**
     * Sets working_business_unit
     *
     * @param string $working_business_unit Business unit code of work
     *
     * @return $this
     */
    public function setWorkingBusinessUnit($working_business_unit)
    {
        $this->container['working_business_unit'] = $working_business_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


