<?php
/**
 * BarcodePrintResultDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BarcodePrintResultDto Class Doc Comment
 *
 * @category Class
 * @description Class of result of print barcode
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BarcodePrintResultDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BarcodePrintResultDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'print_method' => 'int',
        'printer_data_mode' => 'int',
        'printer_name' => 'string',
        'machine_language_text' => 'string',
        'graphic_template_b64' => 'string',
        'template_dattable_b64' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'print_method' => 'int32',
        'printer_data_mode' => 'int32',
        'printer_name' => null,
        'machine_language_text' => null,
        'graphic_template_b64' => null,
        'template_dattable_b64' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'print_method' => 'printMethod',
        'printer_data_mode' => 'printerDataMode',
        'printer_name' => 'printerName',
        'machine_language_text' => 'machineLanguageText',
        'graphic_template_b64' => 'graphicTemplateB64',
        'template_dattable_b64' => 'templateDattableB64'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'print_method' => 'setPrintMethod',
        'printer_data_mode' => 'setPrinterDataMode',
        'printer_name' => 'setPrinterName',
        'machine_language_text' => 'setMachineLanguageText',
        'graphic_template_b64' => 'setGraphicTemplateB64',
        'template_dattable_b64' => 'setTemplateDattableB64'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'print_method' => 'getPrintMethod',
        'printer_data_mode' => 'getPrinterDataMode',
        'printer_name' => 'getPrinterName',
        'machine_language_text' => 'getMachineLanguageText',
        'graphic_template_b64' => 'getGraphicTemplateB64',
        'template_dattable_b64' => 'getTemplateDattableB64'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['print_method'] = isset($data['print_method']) ? $data['print_method'] : null;
        $this->container['printer_data_mode'] = isset($data['printer_data_mode']) ? $data['printer_data_mode'] : null;
        $this->container['printer_name'] = isset($data['printer_name']) ? $data['printer_name'] : null;
        $this->container['machine_language_text'] = isset($data['machine_language_text']) ? $data['machine_language_text'] : null;
        $this->container['graphic_template_b64'] = isset($data['graphic_template_b64']) ? $data['graphic_template_b64'] : null;
        $this->container['template_dattable_b64'] = isset($data['template_dattable_b64']) ? $data['template_dattable_b64'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets print_method
     *
     * @return int
     */
    public function getPrintMethod()
    {
        return $this->container['print_method'];
    }

    /**
     * Sets print_method
     *
     * @param int $print_method Possible values:  0: Client  1: Server  2: ClientFile  3: TerminalServer
     *
     * @return $this
     */
    public function setPrintMethod($print_method)
    {
        $this->container['print_method'] = $print_method;

        return $this;
    }

    /**
     * Gets printer_data_mode
     *
     * @return int
     */
    public function getPrinterDataMode()
    {
        return $this->container['printer_data_mode'];
    }

    /**
     * Sets printer_data_mode
     *
     * @param int $printer_data_mode Possible values:  0: MachineLanguage  1: GraphicData
     *
     * @return $this
     */
    public function setPrinterDataMode($printer_data_mode)
    {
        $this->container['printer_data_mode'] = $printer_data_mode;

        return $this;
    }

    /**
     * Gets printer_name
     *
     * @return string
     */
    public function getPrinterName()
    {
        return $this->container['printer_name'];
    }

    /**
     * Sets printer_name
     *
     * @param string $printer_name Printer Name
     *
     * @return $this
     */
    public function setPrinterName($printer_name)
    {
        $this->container['printer_name'] = $printer_name;

        return $this;
    }

    /**
     * Gets machine_language_text
     *
     * @return string
     */
    public function getMachineLanguageText()
    {
        return $this->container['machine_language_text'];
    }

    /**
     * Sets machine_language_text
     *
     * @param string $machine_language_text Language Machine
     *
     * @return $this
     */
    public function setMachineLanguageText($machine_language_text)
    {
        $this->container['machine_language_text'] = $machine_language_text;

        return $this;
    }

    /**
     * Gets graphic_template_b64
     *
     * @return string
     */
    public function getGraphicTemplateB64()
    {
        return $this->container['graphic_template_b64'];
    }

    /**
     * Sets graphic_template_b64
     *
     * @param string $graphic_template_b64 Graphic Template Blob
     *
     * @return $this
     */
    public function setGraphicTemplateB64($graphic_template_b64)
    {
        $this->container['graphic_template_b64'] = $graphic_template_b64;

        return $this;
    }

    /**
     * Gets template_dattable_b64
     *
     * @return string
     */
    public function getTemplateDattableB64()
    {
        return $this->container['template_dattable_b64'];
    }

    /**
     * Sets template_dattable_b64
     *
     * @param string $template_dattable_b64 Origin Datatable
     *
     * @return $this
     */
    public function setTemplateDattableB64($template_dattable_b64)
    {
        $this->container['template_dattable_b64'] = $template_dattable_b64;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


