<?php
/**
 * IxFeDocumentDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IxFeDocumentDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IxFeDocumentDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IxFeDocumentDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'description' => 'string',
        'user_id' => 'int',
        'user_description' => 'string',
        'document_type_system_id' => 'int',
        'docnumber' => 'int',
        'revision' => 'int',
        'status' => 'int',
        'ix_document_id' => 'string',
        'creation_date' => '\DateTime',
        'ix_business_unit_vat_number' => 'string',
        'vat_sectional' => 'string',
        'ix_rule_id' => 'int',
        'service_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'description' => null,
        'user_id' => 'int32',
        'user_description' => null,
        'document_type_system_id' => 'int32',
        'docnumber' => 'int32',
        'revision' => 'int32',
        'status' => 'int32',
        'ix_document_id' => null,
        'creation_date' => 'date-time',
        'ix_business_unit_vat_number' => null,
        'vat_sectional' => null,
        'ix_rule_id' => 'int32',
        'service_type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'user_id' => 'userId',
        'user_description' => 'userDescription',
        'document_type_system_id' => 'documentTypeSystemId',
        'docnumber' => 'docnumber',
        'revision' => 'revision',
        'status' => 'status',
        'ix_document_id' => 'ixDocumentId',
        'creation_date' => 'creationDate',
        'ix_business_unit_vat_number' => 'ixBusinessUnitVatNumber',
        'vat_sectional' => 'vatSectional',
        'ix_rule_id' => 'ixRuleId',
        'service_type' => 'serviceType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'user_id' => 'setUserId',
        'user_description' => 'setUserDescription',
        'document_type_system_id' => 'setDocumentTypeSystemId',
        'docnumber' => 'setDocnumber',
        'revision' => 'setRevision',
        'status' => 'setStatus',
        'ix_document_id' => 'setIxDocumentId',
        'creation_date' => 'setCreationDate',
        'ix_business_unit_vat_number' => 'setIxBusinessUnitVatNumber',
        'vat_sectional' => 'setVatSectional',
        'ix_rule_id' => 'setIxRuleId',
        'service_type' => 'setServiceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'user_id' => 'getUserId',
        'user_description' => 'getUserDescription',
        'document_type_system_id' => 'getDocumentTypeSystemId',
        'docnumber' => 'getDocnumber',
        'revision' => 'getRevision',
        'status' => 'getStatus',
        'ix_document_id' => 'getIxDocumentId',
        'creation_date' => 'getCreationDate',
        'ix_business_unit_vat_number' => 'getIxBusinessUnitVatNumber',
        'vat_sectional' => 'getVatSectional',
        'ix_rule_id' => 'getIxRuleId',
        'service_type' => 'getServiceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_description'] = isset($data['user_description']) ? $data['user_description'] : null;
        $this->container['document_type_system_id'] = isset($data['document_type_system_id']) ? $data['document_type_system_id'] : null;
        $this->container['docnumber'] = isset($data['docnumber']) ? $data['docnumber'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['ix_document_id'] = isset($data['ix_document_id']) ? $data['ix_document_id'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['ix_business_unit_vat_number'] = isset($data['ix_business_unit_vat_number']) ? $data['ix_business_unit_vat_number'] : null;
        $this->container['vat_sectional'] = isset($data['vat_sectional']) ? $data['vat_sectional'] : null;
        $this->container['ix_rule_id'] = isset($data['ix_rule_id']) ? $data['ix_rule_id'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_description
     *
     * @return string
     */
    public function getUserDescription()
    {
        return $this->container['user_description'];
    }

    /**
     * Sets user_description
     *
     * @param string $user_description user_description
     *
     * @return $this
     */
    public function setUserDescription($user_description)
    {
        $this->container['user_description'] = $user_description;

        return $this;
    }

    /**
     * Gets document_type_system_id
     *
     * @return int
     */
    public function getDocumentTypeSystemId()
    {
        return $this->container['document_type_system_id'];
    }

    /**
     * Sets document_type_system_id
     *
     * @param int $document_type_system_id document_type_system_id
     *
     * @return $this
     */
    public function setDocumentTypeSystemId($document_type_system_id)
    {
        $this->container['document_type_system_id'] = $document_type_system_id;

        return $this;
    }

    /**
     * Gets docnumber
     *
     * @return int
     */
    public function getDocnumber()
    {
        return $this->container['docnumber'];
    }

    /**
     * Sets docnumber
     *
     * @param int $docnumber docnumber
     *
     * @return $this
     */
    public function setDocnumber($docnumber)
    {
        $this->container['docnumber'] = $docnumber;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ix_document_id
     *
     * @return string
     */
    public function getIxDocumentId()
    {
        return $this->container['ix_document_id'];
    }

    /**
     * Sets ix_document_id
     *
     * @param string $ix_document_id ix_document_id
     *
     * @return $this
     */
    public function setIxDocumentId($ix_document_id)
    {
        $this->container['ix_document_id'] = $ix_document_id;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets ix_business_unit_vat_number
     *
     * @return string
     */
    public function getIxBusinessUnitVatNumber()
    {
        return $this->container['ix_business_unit_vat_number'];
    }

    /**
     * Sets ix_business_unit_vat_number
     *
     * @param string $ix_business_unit_vat_number ix_business_unit_vat_number
     *
     * @return $this
     */
    public function setIxBusinessUnitVatNumber($ix_business_unit_vat_number)
    {
        $this->container['ix_business_unit_vat_number'] = $ix_business_unit_vat_number;

        return $this;
    }

    /**
     * Gets vat_sectional
     *
     * @return string
     */
    public function getVatSectional()
    {
        return $this->container['vat_sectional'];
    }

    /**
     * Sets vat_sectional
     *
     * @param string $vat_sectional vat_sectional
     *
     * @return $this
     */
    public function setVatSectional($vat_sectional)
    {
        $this->container['vat_sectional'] = $vat_sectional;

        return $this;
    }

    /**
     * Gets ix_rule_id
     *
     * @return int
     */
    public function getIxRuleId()
    {
        return $this->container['ix_rule_id'];
    }

    /**
     * Sets ix_rule_id
     *
     * @param int $ix_rule_id ix_rule_id
     *
     * @return $this
     */
    public function setIxRuleId($ix_rule_id)
    {
        $this->container['ix_rule_id'] = $ix_rule_id;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return int
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param int $service_type Possible values:  0: IX  1: IXCE  2: IXCE_V2  3: IX_V2
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


