<?php
/**
 * TimestampInfoDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TimestampInfoDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimestampInfoDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimestampInfoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp_signature_info' => '\Swagger\Client\Model\SignatureInfoDTO',
        'is_valid' => 'bool',
        'timestamp_validation_message_list' => '\Swagger\Client\Model\ValidationMessageDTO[]',
        'timestamp_time_utc' => '\DateTime',
        'accurancy_seconds' => 'string',
        'hash_algorithm' => '\Swagger\Client\Model\IdValuePairDTO',
        'message_imprint_digest' => 'string',
        'nonce' => 'string',
        'policy' => 'string',
        'serial_number' => 'string',
        'tsa' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timestamp_signature_info' => null,
        'is_valid' => null,
        'timestamp_validation_message_list' => null,
        'timestamp_time_utc' => 'date-time',
        'accurancy_seconds' => null,
        'hash_algorithm' => null,
        'message_imprint_digest' => null,
        'nonce' => null,
        'policy' => null,
        'serial_number' => null,
        'tsa' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp_signature_info' => 'timestampSignatureInfo',
        'is_valid' => 'isValid',
        'timestamp_validation_message_list' => 'timestampValidationMessageList',
        'timestamp_time_utc' => 'timestampTimeUtc',
        'accurancy_seconds' => 'accurancySeconds',
        'hash_algorithm' => 'hashAlgorithm',
        'message_imprint_digest' => 'messageImprintDigest',
        'nonce' => 'nonce',
        'policy' => 'policy',
        'serial_number' => 'serialNumber',
        'tsa' => 'tsa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp_signature_info' => 'setTimestampSignatureInfo',
        'is_valid' => 'setIsValid',
        'timestamp_validation_message_list' => 'setTimestampValidationMessageList',
        'timestamp_time_utc' => 'setTimestampTimeUtc',
        'accurancy_seconds' => 'setAccurancySeconds',
        'hash_algorithm' => 'setHashAlgorithm',
        'message_imprint_digest' => 'setMessageImprintDigest',
        'nonce' => 'setNonce',
        'policy' => 'setPolicy',
        'serial_number' => 'setSerialNumber',
        'tsa' => 'setTsa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp_signature_info' => 'getTimestampSignatureInfo',
        'is_valid' => 'getIsValid',
        'timestamp_validation_message_list' => 'getTimestampValidationMessageList',
        'timestamp_time_utc' => 'getTimestampTimeUtc',
        'accurancy_seconds' => 'getAccurancySeconds',
        'hash_algorithm' => 'getHashAlgorithm',
        'message_imprint_digest' => 'getMessageImprintDigest',
        'nonce' => 'getNonce',
        'policy' => 'getPolicy',
        'serial_number' => 'getSerialNumber',
        'tsa' => 'getTsa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp_signature_info'] = isset($data['timestamp_signature_info']) ? $data['timestamp_signature_info'] : null;
        $this->container['is_valid'] = isset($data['is_valid']) ? $data['is_valid'] : null;
        $this->container['timestamp_validation_message_list'] = isset($data['timestamp_validation_message_list']) ? $data['timestamp_validation_message_list'] : null;
        $this->container['timestamp_time_utc'] = isset($data['timestamp_time_utc']) ? $data['timestamp_time_utc'] : null;
        $this->container['accurancy_seconds'] = isset($data['accurancy_seconds']) ? $data['accurancy_seconds'] : null;
        $this->container['hash_algorithm'] = isset($data['hash_algorithm']) ? $data['hash_algorithm'] : null;
        $this->container['message_imprint_digest'] = isset($data['message_imprint_digest']) ? $data['message_imprint_digest'] : null;
        $this->container['nonce'] = isset($data['nonce']) ? $data['nonce'] : null;
        $this->container['policy'] = isset($data['policy']) ? $data['policy'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['tsa'] = isset($data['tsa']) ? $data['tsa'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets timestamp_signature_info
     *
     * @return \Swagger\Client\Model\SignatureInfoDTO
     */
    public function getTimestampSignatureInfo()
    {
        return $this->container['timestamp_signature_info'];
    }

    /**
     * Sets timestamp_signature_info
     *
     * @param \Swagger\Client\Model\SignatureInfoDTO $timestamp_signature_info timestamp_signature_info
     *
     * @return $this
     */
    public function setTimestampSignatureInfo($timestamp_signature_info)
    {
        $this->container['timestamp_signature_info'] = $timestamp_signature_info;

        return $this;
    }

    /**
     * Gets is_valid
     *
     * @return bool
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool $is_valid is_valid
     *
     * @return $this
     */
    public function setIsValid($is_valid)
    {
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets timestamp_validation_message_list
     *
     * @return \Swagger\Client\Model\ValidationMessageDTO[]
     */
    public function getTimestampValidationMessageList()
    {
        return $this->container['timestamp_validation_message_list'];
    }

    /**
     * Sets timestamp_validation_message_list
     *
     * @param \Swagger\Client\Model\ValidationMessageDTO[] $timestamp_validation_message_list timestamp_validation_message_list
     *
     * @return $this
     */
    public function setTimestampValidationMessageList($timestamp_validation_message_list)
    {
        $this->container['timestamp_validation_message_list'] = $timestamp_validation_message_list;

        return $this;
    }

    /**
     * Gets timestamp_time_utc
     *
     * @return \DateTime
     */
    public function getTimestampTimeUtc()
    {
        return $this->container['timestamp_time_utc'];
    }

    /**
     * Sets timestamp_time_utc
     *
     * @param \DateTime $timestamp_time_utc timestamp_time_utc
     *
     * @return $this
     */
    public function setTimestampTimeUtc($timestamp_time_utc)
    {
        $this->container['timestamp_time_utc'] = $timestamp_time_utc;

        return $this;
    }

    /**
     * Gets accurancy_seconds
     *
     * @return string
     */
    public function getAccurancySeconds()
    {
        return $this->container['accurancy_seconds'];
    }

    /**
     * Sets accurancy_seconds
     *
     * @param string $accurancy_seconds accurancy_seconds
     *
     * @return $this
     */
    public function setAccurancySeconds($accurancy_seconds)
    {
        $this->container['accurancy_seconds'] = $accurancy_seconds;

        return $this;
    }

    /**
     * Gets hash_algorithm
     *
     * @return \Swagger\Client\Model\IdValuePairDTO
     */
    public function getHashAlgorithm()
    {
        return $this->container['hash_algorithm'];
    }

    /**
     * Sets hash_algorithm
     *
     * @param \Swagger\Client\Model\IdValuePairDTO $hash_algorithm hash_algorithm
     *
     * @return $this
     */
    public function setHashAlgorithm($hash_algorithm)
    {
        $this->container['hash_algorithm'] = $hash_algorithm;

        return $this;
    }

    /**
     * Gets message_imprint_digest
     *
     * @return string
     */
    public function getMessageImprintDigest()
    {
        return $this->container['message_imprint_digest'];
    }

    /**
     * Sets message_imprint_digest
     *
     * @param string $message_imprint_digest message_imprint_digest
     *
     * @return $this
     */
    public function setMessageImprintDigest($message_imprint_digest)
    {
        $this->container['message_imprint_digest'] = $message_imprint_digest;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string $nonce nonce
     *
     * @return $this
     */
    public function setNonce($nonce)
    {
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return string
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param string $policy policy
     *
     * @return $this
     */
    public function setPolicy($policy)
    {
        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets tsa
     *
     * @return string
     */
    public function getTsa()
    {
        return $this->container['tsa'];
    }

    /**
     * Sets tsa
     *
     * @param string $tsa tsa
     *
     * @return $this
     */
    public function setTsa($tsa)
    {
        $this->container['tsa'] = $tsa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


