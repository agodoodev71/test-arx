<?php
/**
 * FieldsModuleDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FieldsModuleDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FieldsModuleDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FieldsModuleDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'profile_field' => 'string',
        'label' => 'string',
        'model_field' => 'string',
        'type1' => 'int',
        'type2' => 'int',
        'type3' => 'int',
        'id_model' => 'int',
        'fields_matrix_module' => '\Swagger\Client\Model\FieldsMatrixModuleDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'profile_field' => null,
        'label' => null,
        'model_field' => null,
        'type1' => 'int32',
        'type2' => 'int32',
        'type3' => 'int32',
        'id_model' => 'int32',
        'fields_matrix_module' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profile_field' => 'profileField',
        'label' => 'label',
        'model_field' => 'modelField',
        'type1' => 'type1',
        'type2' => 'type2',
        'type3' => 'type3',
        'id_model' => 'idModel',
        'fields_matrix_module' => 'fieldsMatrixModule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profile_field' => 'setProfileField',
        'label' => 'setLabel',
        'model_field' => 'setModelField',
        'type1' => 'setType1',
        'type2' => 'setType2',
        'type3' => 'setType3',
        'id_model' => 'setIdModel',
        'fields_matrix_module' => 'setFieldsMatrixModule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profile_field' => 'getProfileField',
        'label' => 'getLabel',
        'model_field' => 'getModelField',
        'type1' => 'getType1',
        'type2' => 'getType2',
        'type3' => 'getType3',
        'id_model' => 'getIdModel',
        'fields_matrix_module' => 'getFieldsMatrixModule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profile_field'] = isset($data['profile_field']) ? $data['profile_field'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['model_field'] = isset($data['model_field']) ? $data['model_field'] : null;
        $this->container['type1'] = isset($data['type1']) ? $data['type1'] : null;
        $this->container['type2'] = isset($data['type2']) ? $data['type2'] : null;
        $this->container['type3'] = isset($data['type3']) ? $data['type3'] : null;
        $this->container['id_model'] = isset($data['id_model']) ? $data['id_model'] : null;
        $this->container['fields_matrix_module'] = isset($data['fields_matrix_module']) ? $data['fields_matrix_module'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets profile_field
     *
     * @return string
     */
    public function getProfileField()
    {
        return $this->container['profile_field'];
    }

    /**
     * Sets profile_field
     *
     * @param string $profile_field Nome del campo di profilo.
     *
     * @return $this
     */
    public function setProfileField($profile_field)
    {
        $this->container['profile_field'] = $profile_field;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Etichetta dell'associazione.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets model_field
     *
     * @return string
     */
    public function getModelField()
    {
        return $this->container['model_field'];
    }

    /**
     * Sets model_field
     *
     * @param string $model_field Nome del campo nel modello office.
     *
     * @return $this
     */
    public function setModelField($model_field)
    {
        $this->container['model_field'] = $model_field;

        return $this;
    }

    /**
     * Gets type1
     *
     * @return int
     */
    public function getType1()
    {
        return $this->container['type1'];
    }

    /**
     * Sets type1
     *
     * @param int $type1 Classe documentale di primo livello.
     *
     * @return $this
     */
    public function setType1($type1)
    {
        $this->container['type1'] = $type1;

        return $this;
    }

    /**
     * Gets type2
     *
     * @return int
     */
    public function getType2()
    {
        return $this->container['type2'];
    }

    /**
     * Sets type2
     *
     * @param int $type2 Classe documentale di secondo livello.
     *
     * @return $this
     */
    public function setType2($type2)
    {
        $this->container['type2'] = $type2;

        return $this;
    }

    /**
     * Gets type3
     *
     * @return int
     */
    public function getType3()
    {
        return $this->container['type3'];
    }

    /**
     * Sets type3
     *
     * @param int $type3 Classe documentale di terso livello.
     *
     * @return $this
     */
    public function setType3($type3)
    {
        $this->container['type3'] = $type3;

        return $this;
    }

    /**
     * Gets id_model
     *
     * @return int
     */
    public function getIdModel()
    {
        return $this->container['id_model'];
    }

    /**
     * Sets id_model
     *
     * @param int $id_model Identificativo del modello office di riferimento.
     *
     * @return $this
     */
    public function setIdModel($id_model)
    {
        $this->container['id_model'] = $id_model;

        return $this;
    }

    /**
     * Gets fields_matrix_module
     *
     * @return \Swagger\Client\Model\FieldsMatrixModuleDTO[]
     */
    public function getFieldsMatrixModule()
    {
        return $this->container['fields_matrix_module'];
    }

    /**
     * Sets fields_matrix_module
     *
     * @param \Swagger\Client\Model\FieldsMatrixModuleDTO[] $fields_matrix_module fields_matrix_module
     *
     * @return $this
     */
    public function setFieldsMatrixModule($fields_matrix_module)
    {
        $this->container['fields_matrix_module'] = $fields_matrix_module;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


