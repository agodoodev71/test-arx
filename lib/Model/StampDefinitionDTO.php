<?php
/**
 * StampDefinitionDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StampDefinitionDTO Class Doc Comment
 *
 * @category Class
 * @description Class of stamp
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StampDefinitionDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StampDefinitionDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'stamp_name' => 'string',
        'stamp_description' => 'string',
        'is_resizable' => 'bool',
        'remove_after_applied' => 'bool',
        'xaml' => 'string',
        'dm_tipidocumento_id' => 'int',
        'bindings' => '\Swagger\Client\Model\StampDefinitionBindingElementDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'stamp_name' => null,
        'stamp_description' => null,
        'is_resizable' => null,
        'remove_after_applied' => null,
        'xaml' => null,
        'dm_tipidocumento_id' => 'int32',
        'bindings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'stamp_name' => 'stampName',
        'stamp_description' => 'stampDescription',
        'is_resizable' => 'isResizable',
        'remove_after_applied' => 'removeAfterApplied',
        'xaml' => 'xaml',
        'dm_tipidocumento_id' => 'dmTipidocumentoId',
        'bindings' => 'bindings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'stamp_name' => 'setStampName',
        'stamp_description' => 'setStampDescription',
        'is_resizable' => 'setIsResizable',
        'remove_after_applied' => 'setRemoveAfterApplied',
        'xaml' => 'setXaml',
        'dm_tipidocumento_id' => 'setDmTipidocumentoId',
        'bindings' => 'setBindings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'stamp_name' => 'getStampName',
        'stamp_description' => 'getStampDescription',
        'is_resizable' => 'getIsResizable',
        'remove_after_applied' => 'getRemoveAfterApplied',
        'xaml' => 'getXaml',
        'dm_tipidocumento_id' => 'getDmTipidocumentoId',
        'bindings' => 'getBindings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['stamp_name'] = isset($data['stamp_name']) ? $data['stamp_name'] : null;
        $this->container['stamp_description'] = isset($data['stamp_description']) ? $data['stamp_description'] : null;
        $this->container['is_resizable'] = isset($data['is_resizable']) ? $data['is_resizable'] : null;
        $this->container['remove_after_applied'] = isset($data['remove_after_applied']) ? $data['remove_after_applied'] : null;
        $this->container['xaml'] = isset($data['xaml']) ? $data['xaml'] : null;
        $this->container['dm_tipidocumento_id'] = isset($data['dm_tipidocumento_id']) ? $data['dm_tipidocumento_id'] : null;
        $this->container['bindings'] = isset($data['bindings']) ? $data['bindings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets stamp_name
     *
     * @return string
     */
    public function getStampName()
    {
        return $this->container['stamp_name'];
    }

    /**
     * Sets stamp_name
     *
     * @param string $stamp_name Name
     *
     * @return $this
     */
    public function setStampName($stamp_name)
    {
        $this->container['stamp_name'] = $stamp_name;

        return $this;
    }

    /**
     * Gets stamp_description
     *
     * @return string
     */
    public function getStampDescription()
    {
        return $this->container['stamp_description'];
    }

    /**
     * Sets stamp_description
     *
     * @param string $stamp_description Description
     *
     * @return $this
     */
    public function setStampDescription($stamp_description)
    {
        $this->container['stamp_description'] = $stamp_description;

        return $this;
    }

    /**
     * Gets is_resizable
     *
     * @return bool
     */
    public function getIsResizable()
    {
        return $this->container['is_resizable'];
    }

    /**
     * Sets is_resizable
     *
     * @param bool $is_resizable Is Resizable.
     *
     * @return $this
     */
    public function setIsResizable($is_resizable)
    {
        $this->container['is_resizable'] = $is_resizable;

        return $this;
    }

    /**
     * Gets remove_after_applied
     *
     * @return bool
     */
    public function getRemoveAfterApplied()
    {
        return $this->container['remove_after_applied'];
    }

    /**
     * Sets remove_after_applied
     *
     * @param bool $remove_after_applied Indicates if the stamp definition must be removed after applied
     *
     * @return $this
     */
    public function setRemoveAfterApplied($remove_after_applied)
    {
        $this->container['remove_after_applied'] = $remove_after_applied;

        return $this;
    }

    /**
     * Gets xaml
     *
     * @return string
     */
    public function getXaml()
    {
        return $this->container['xaml'];
    }

    /**
     * Sets xaml
     *
     * @param string $xaml Xaml string for the stamp.
     *
     * @return $this
     */
    public function setXaml($xaml)
    {
        $this->container['xaml'] = $xaml;

        return $this;
    }

    /**
     * Gets dm_tipidocumento_id
     *
     * @return int
     */
    public function getDmTipidocumentoId()
    {
        return $this->container['dm_tipidocumento_id'];
    }

    /**
     * Sets dm_tipidocumento_id
     *
     * @param int $dm_tipidocumento_id Document type of stamp.
     *
     * @return $this
     */
    public function setDmTipidocumentoId($dm_tipidocumento_id)
    {
        $this->container['dm_tipidocumento_id'] = $dm_tipidocumento_id;

        return $this;
    }

    /**
     * Gets bindings
     *
     * @return \Swagger\Client\Model\StampDefinitionBindingElementDTO[]
     */
    public function getBindings()
    {
        return $this->container['bindings'];
    }

    /**
     * Sets bindings
     *
     * @param \Swagger\Client\Model\StampDefinitionBindingElementDTO[] $bindings List of binding for the stamp.
     *
     * @return $this
     */
    public function setBindings($bindings)
    {
        $this->container['bindings'] = $bindings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


