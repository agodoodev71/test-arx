<?php
/**
 * BinderTypeDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BinderTypeDTO Class Doc Comment
 *
 * @category Class
 * @description Class of binder type
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BinderTypeDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BinderTypeDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'binder_type' => 'string',
        'folder_id' => 'int',
        'dynamic_folder' => 'string',
        'progressive' => 'int',
        'dynamic_number' => 'string',
        'external_id' => 'string',
        'fields' => '\Swagger\Client\Model\FieldBaseDTO[]',
        'default' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'binder_type' => null,
        'folder_id' => 'int32',
        'dynamic_folder' => null,
        'progressive' => 'int32',
        'dynamic_number' => null,
        'external_id' => null,
        'fields' => null,
        'default' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'binder_type' => 'binderType',
        'folder_id' => 'folderId',
        'dynamic_folder' => 'dynamicFolder',
        'progressive' => 'progressive',
        'dynamic_number' => 'dynamicNumber',
        'external_id' => 'externalId',
        'fields' => 'fields',
        'default' => 'default'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'binder_type' => 'setBinderType',
        'folder_id' => 'setFolderId',
        'dynamic_folder' => 'setDynamicFolder',
        'progressive' => 'setProgressive',
        'dynamic_number' => 'setDynamicNumber',
        'external_id' => 'setExternalId',
        'fields' => 'setFields',
        'default' => 'setDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'binder_type' => 'getBinderType',
        'folder_id' => 'getFolderId',
        'dynamic_folder' => 'getDynamicFolder',
        'progressive' => 'getProgressive',
        'dynamic_number' => 'getDynamicNumber',
        'external_id' => 'getExternalId',
        'fields' => 'getFields',
        'default' => 'getDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['binder_type'] = isset($data['binder_type']) ? $data['binder_type'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['dynamic_folder'] = isset($data['dynamic_folder']) ? $data['dynamic_folder'] : null;
        $this->container['progressive'] = isset($data['progressive']) ? $data['progressive'] : null;
        $this->container['dynamic_number'] = isset($data['dynamic_number']) ? $data['dynamic_number'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets binder_type
     *
     * @return string
     */
    public function getBinderType()
    {
        return $this->container['binder_type'];
    }

    /**
     * Sets binder_type
     *
     * @param string $binder_type Type Identifier
     *
     * @return $this
     */
    public function setBinderType($binder_type)
    {
        $this->container['binder_type'] = $binder_type;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return int
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param int $folder_id Folder Identifier
     *
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets dynamic_folder
     *
     * @return string
     */
    public function getDynamicFolder()
    {
        return $this->container['dynamic_folder'];
    }

    /**
     * Sets dynamic_folder
     *
     * @param string $dynamic_folder Dynamic Folder
     *
     * @return $this
     */
    public function setDynamicFolder($dynamic_folder)
    {
        $this->container['dynamic_folder'] = $dynamic_folder;

        return $this;
    }

    /**
     * Gets progressive
     *
     * @return int
     */
    public function getProgressive()
    {
        return $this->container['progressive'];
    }

    /**
     * Sets progressive
     *
     * @param int $progressive Progressive number
     *
     * @return $this
     */
    public function setProgressive($progressive)
    {
        $this->container['progressive'] = $progressive;

        return $this;
    }

    /**
     * Gets dynamic_number
     *
     * @return string
     */
    public function getDynamicNumber()
    {
        return $this->container['dynamic_number'];
    }

    /**
     * Sets dynamic_number
     *
     * @param string $dynamic_number Dynamic Progressive number
     *
     * @return $this
     */
    public function setDynamicNumber($dynamic_number)
    {
        $this->container['dynamic_number'] = $dynamic_number;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id External Identifier
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Swagger\Client\Model\FieldBaseDTO[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Swagger\Client\Model\FieldBaseDTO[] $fields Custom Fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool $default As default
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


