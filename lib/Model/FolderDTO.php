<?php
/**
 * FolderDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FolderDTO Class Doc Comment
 *
 * @category Class
 * @description Class of Folder
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FolderDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FolderDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parent_id' => 'int',
        'author' => 'int',
        'has_childs' => 'bool',
        'author_complete_name' => 'string',
        'full_path' => 'string',
        'creation_date' => '\DateTime',
        'name' => 'string',
        'archive_mode' => 'int',
        'is_arxdrive_synced' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'parent_id' => 'int32',
        'author' => 'int32',
        'has_childs' => null,
        'author_complete_name' => null,
        'full_path' => null,
        'creation_date' => 'date-time',
        'name' => null,
        'archive_mode' => 'int32',
        'is_arxdrive_synced' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent_id' => 'parentId',
        'author' => 'author',
        'has_childs' => 'hasChilds',
        'author_complete_name' => 'authorCompleteName',
        'full_path' => 'fullPath',
        'creation_date' => 'creationDate',
        'name' => 'name',
        'archive_mode' => 'archiveMode',
        'is_arxdrive_synced' => 'isArxdriveSynced'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'author' => 'setAuthor',
        'has_childs' => 'setHasChilds',
        'author_complete_name' => 'setAuthorCompleteName',
        'full_path' => 'setFullPath',
        'creation_date' => 'setCreationDate',
        'name' => 'setName',
        'archive_mode' => 'setArchiveMode',
        'is_arxdrive_synced' => 'setIsArxdriveSynced'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'author' => 'getAuthor',
        'has_childs' => 'getHasChilds',
        'author_complete_name' => 'getAuthorCompleteName',
        'full_path' => 'getFullPath',
        'creation_date' => 'getCreationDate',
        'name' => 'getName',
        'archive_mode' => 'getArchiveMode',
        'is_arxdrive_synced' => 'getIsArxdriveSynced'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['has_childs'] = isset($data['has_childs']) ? $data['has_childs'] : null;
        $this->container['author_complete_name'] = isset($data['author_complete_name']) ? $data['author_complete_name'] : null;
        $this->container['full_path'] = isset($data['full_path']) ? $data['full_path'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['archive_mode'] = isset($data['archive_mode']) ? $data['archive_mode'] : null;
        $this->container['is_arxdrive_synced'] = isset($data['is_arxdrive_synced']) ? $data['is_arxdrive_synced'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Parent Identifier
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets author
     *
     * @return int
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param int $author Author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets has_childs
     *
     * @return bool
     */
    public function getHasChilds()
    {
        return $this->container['has_childs'];
    }

    /**
     * Sets has_childs
     *
     * @param bool $has_childs Has Sub-Level Folders
     *
     * @return $this
     */
    public function setHasChilds($has_childs)
    {
        $this->container['has_childs'] = $has_childs;

        return $this;
    }

    /**
     * Gets author_complete_name
     *
     * @return string
     */
    public function getAuthorCompleteName()
    {
        return $this->container['author_complete_name'];
    }

    /**
     * Sets author_complete_name
     *
     * @param string $author_complete_name Author Name
     *
     * @return $this
     */
    public function setAuthorCompleteName($author_complete_name)
    {
        $this->container['author_complete_name'] = $author_complete_name;

        return $this;
    }

    /**
     * Gets full_path
     *
     * @return string
     */
    public function getFullPath()
    {
        return $this->container['full_path'];
    }

    /**
     * Sets full_path
     *
     * @param string $full_path Full Path
     *
     * @return $this
     */
    public function setFullPath($full_path)
    {
        $this->container['full_path'] = $full_path;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Creation Date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets archive_mode
     *
     * @return int
     */
    public function getArchiveMode()
    {
        return $this->container['archive_mode'];
    }

    /**
     * Sets archive_mode
     *
     * @param int $archive_mode Possible values:  0: None  1: AutoWithDefaultProfile  2: ManualWithMask
     *
     * @return $this
     */
    public function setArchiveMode($archive_mode)
    {
        $this->container['archive_mode'] = $archive_mode;

        return $this;
    }

    /**
     * Gets is_arxdrive_synced
     *
     * @return bool
     */
    public function getIsArxdriveSynced()
    {
        return $this->container['is_arxdrive_synced'];
    }

    /**
     * Sets is_arxdrive_synced
     *
     * @param bool $is_arxdrive_synced ArxDrive Folder
     *
     * @return $this
     */
    public function setIsArxdriveSynced($is_arxdrive_synced)
    {
        $this->container['is_arxdrive_synced'] = $is_arxdrive_synced;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


