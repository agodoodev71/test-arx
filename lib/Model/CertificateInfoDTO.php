<?php
/**
 * CertificateInfoDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CertificateInfoDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CertificateInfoDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CertificateInfoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sign_algorithm' => '\Swagger\Client\Model\IdValuePairDTO',
        'key_bit_length' => 'int',
        'serial_number' => 'string',
        'thumbprint_algorithm' => '\Swagger\Client\Model\IdValuePairDTO',
        'thumbprint' => 'string',
        'trust_level' => 'string',
        'key_usage_list' => 'int[]',
        'extended_key_usage_list' => '\Swagger\Client\Model\IdValuePairDTO[]',
        'valid_not_before_utc' => '\DateTime',
        'valid_not_after_utc' => '\DateTime',
        'subject_key_identifier' => 'string',
        'subject_alternative_name' => 'string',
        'subject_unique_id' => 'string',
        'subject_info_list' => '\Swagger\Client\Model\IdValuePairDTO[]',
        'version' => 'int',
        'issuer_unique_id' => 'string',
        'issuer_alternative_name' => 'string',
        'issuer_info_list' => '\Swagger\Client\Model\IdValuePairDTO[]',
        'authority_info_access_ocsp' => 'string[]',
        'crl_distribution_points' => 'string[]',
        'validation_message_list' => '\Swagger\Client\Model\ValidationMessageDTO[]',
        'certificate_policies' => '\Swagger\Client\Model\CertificatePolicyInfoDTO[]',
        'qc_statement_list' => '\Swagger\Client\Model\SignatureAttributeDTO[]',
        'is_trusted' => 'bool',
        'trust_validation_message_list' => '\Swagger\Client\Model\ValidationMessageDTO[]',
        'is_valid' => 'bool',
        'certificate_b64' => 'string',
        'verify_condition' => '\Swagger\Client\Model\VerifyConditionDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sign_algorithm' => null,
        'key_bit_length' => 'int32',
        'serial_number' => null,
        'thumbprint_algorithm' => null,
        'thumbprint' => null,
        'trust_level' => null,
        'key_usage_list' => 'int32',
        'extended_key_usage_list' => null,
        'valid_not_before_utc' => 'date-time',
        'valid_not_after_utc' => 'date-time',
        'subject_key_identifier' => null,
        'subject_alternative_name' => null,
        'subject_unique_id' => null,
        'subject_info_list' => null,
        'version' => 'int32',
        'issuer_unique_id' => null,
        'issuer_alternative_name' => null,
        'issuer_info_list' => null,
        'authority_info_access_ocsp' => null,
        'crl_distribution_points' => null,
        'validation_message_list' => null,
        'certificate_policies' => null,
        'qc_statement_list' => null,
        'is_trusted' => null,
        'trust_validation_message_list' => null,
        'is_valid' => null,
        'certificate_b64' => null,
        'verify_condition' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sign_algorithm' => 'signAlgorithm',
        'key_bit_length' => 'keyBitLength',
        'serial_number' => 'serialNumber',
        'thumbprint_algorithm' => 'thumbprintAlgorithm',
        'thumbprint' => 'thumbprint',
        'trust_level' => 'trustLevel',
        'key_usage_list' => 'keyUsageList',
        'extended_key_usage_list' => 'extendedKeyUsageList',
        'valid_not_before_utc' => 'validNotBeforeUtc',
        'valid_not_after_utc' => 'validNotAfterUtc',
        'subject_key_identifier' => 'subjectKeyIdentifier',
        'subject_alternative_name' => 'subjectAlternativeName',
        'subject_unique_id' => 'subjectUniqueId',
        'subject_info_list' => 'subjectInfoList',
        'version' => 'version',
        'issuer_unique_id' => 'issuerUniqueId',
        'issuer_alternative_name' => 'issuerAlternativeName',
        'issuer_info_list' => 'issuerInfoList',
        'authority_info_access_ocsp' => 'authorityInfoAccessOcsp',
        'crl_distribution_points' => 'crlDistributionPoints',
        'validation_message_list' => 'validationMessageList',
        'certificate_policies' => 'certificatePolicies',
        'qc_statement_list' => 'qcStatementList',
        'is_trusted' => 'isTrusted',
        'trust_validation_message_list' => 'trustValidationMessageList',
        'is_valid' => 'isValid',
        'certificate_b64' => 'certificateB64',
        'verify_condition' => 'verifyCondition'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sign_algorithm' => 'setSignAlgorithm',
        'key_bit_length' => 'setKeyBitLength',
        'serial_number' => 'setSerialNumber',
        'thumbprint_algorithm' => 'setThumbprintAlgorithm',
        'thumbprint' => 'setThumbprint',
        'trust_level' => 'setTrustLevel',
        'key_usage_list' => 'setKeyUsageList',
        'extended_key_usage_list' => 'setExtendedKeyUsageList',
        'valid_not_before_utc' => 'setValidNotBeforeUtc',
        'valid_not_after_utc' => 'setValidNotAfterUtc',
        'subject_key_identifier' => 'setSubjectKeyIdentifier',
        'subject_alternative_name' => 'setSubjectAlternativeName',
        'subject_unique_id' => 'setSubjectUniqueId',
        'subject_info_list' => 'setSubjectInfoList',
        'version' => 'setVersion',
        'issuer_unique_id' => 'setIssuerUniqueId',
        'issuer_alternative_name' => 'setIssuerAlternativeName',
        'issuer_info_list' => 'setIssuerInfoList',
        'authority_info_access_ocsp' => 'setAuthorityInfoAccessOcsp',
        'crl_distribution_points' => 'setCrlDistributionPoints',
        'validation_message_list' => 'setValidationMessageList',
        'certificate_policies' => 'setCertificatePolicies',
        'qc_statement_list' => 'setQcStatementList',
        'is_trusted' => 'setIsTrusted',
        'trust_validation_message_list' => 'setTrustValidationMessageList',
        'is_valid' => 'setIsValid',
        'certificate_b64' => 'setCertificateB64',
        'verify_condition' => 'setVerifyCondition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sign_algorithm' => 'getSignAlgorithm',
        'key_bit_length' => 'getKeyBitLength',
        'serial_number' => 'getSerialNumber',
        'thumbprint_algorithm' => 'getThumbprintAlgorithm',
        'thumbprint' => 'getThumbprint',
        'trust_level' => 'getTrustLevel',
        'key_usage_list' => 'getKeyUsageList',
        'extended_key_usage_list' => 'getExtendedKeyUsageList',
        'valid_not_before_utc' => 'getValidNotBeforeUtc',
        'valid_not_after_utc' => 'getValidNotAfterUtc',
        'subject_key_identifier' => 'getSubjectKeyIdentifier',
        'subject_alternative_name' => 'getSubjectAlternativeName',
        'subject_unique_id' => 'getSubjectUniqueId',
        'subject_info_list' => 'getSubjectInfoList',
        'version' => 'getVersion',
        'issuer_unique_id' => 'getIssuerUniqueId',
        'issuer_alternative_name' => 'getIssuerAlternativeName',
        'issuer_info_list' => 'getIssuerInfoList',
        'authority_info_access_ocsp' => 'getAuthorityInfoAccessOcsp',
        'crl_distribution_points' => 'getCrlDistributionPoints',
        'validation_message_list' => 'getValidationMessageList',
        'certificate_policies' => 'getCertificatePolicies',
        'qc_statement_list' => 'getQcStatementList',
        'is_trusted' => 'getIsTrusted',
        'trust_validation_message_list' => 'getTrustValidationMessageList',
        'is_valid' => 'getIsValid',
        'certificate_b64' => 'getCertificateB64',
        'verify_condition' => 'getVerifyCondition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sign_algorithm'] = isset($data['sign_algorithm']) ? $data['sign_algorithm'] : null;
        $this->container['key_bit_length'] = isset($data['key_bit_length']) ? $data['key_bit_length'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['thumbprint_algorithm'] = isset($data['thumbprint_algorithm']) ? $data['thumbprint_algorithm'] : null;
        $this->container['thumbprint'] = isset($data['thumbprint']) ? $data['thumbprint'] : null;
        $this->container['trust_level'] = isset($data['trust_level']) ? $data['trust_level'] : null;
        $this->container['key_usage_list'] = isset($data['key_usage_list']) ? $data['key_usage_list'] : null;
        $this->container['extended_key_usage_list'] = isset($data['extended_key_usage_list']) ? $data['extended_key_usage_list'] : null;
        $this->container['valid_not_before_utc'] = isset($data['valid_not_before_utc']) ? $data['valid_not_before_utc'] : null;
        $this->container['valid_not_after_utc'] = isset($data['valid_not_after_utc']) ? $data['valid_not_after_utc'] : null;
        $this->container['subject_key_identifier'] = isset($data['subject_key_identifier']) ? $data['subject_key_identifier'] : null;
        $this->container['subject_alternative_name'] = isset($data['subject_alternative_name']) ? $data['subject_alternative_name'] : null;
        $this->container['subject_unique_id'] = isset($data['subject_unique_id']) ? $data['subject_unique_id'] : null;
        $this->container['subject_info_list'] = isset($data['subject_info_list']) ? $data['subject_info_list'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['issuer_unique_id'] = isset($data['issuer_unique_id']) ? $data['issuer_unique_id'] : null;
        $this->container['issuer_alternative_name'] = isset($data['issuer_alternative_name']) ? $data['issuer_alternative_name'] : null;
        $this->container['issuer_info_list'] = isset($data['issuer_info_list']) ? $data['issuer_info_list'] : null;
        $this->container['authority_info_access_ocsp'] = isset($data['authority_info_access_ocsp']) ? $data['authority_info_access_ocsp'] : null;
        $this->container['crl_distribution_points'] = isset($data['crl_distribution_points']) ? $data['crl_distribution_points'] : null;
        $this->container['validation_message_list'] = isset($data['validation_message_list']) ? $data['validation_message_list'] : null;
        $this->container['certificate_policies'] = isset($data['certificate_policies']) ? $data['certificate_policies'] : null;
        $this->container['qc_statement_list'] = isset($data['qc_statement_list']) ? $data['qc_statement_list'] : null;
        $this->container['is_trusted'] = isset($data['is_trusted']) ? $data['is_trusted'] : null;
        $this->container['trust_validation_message_list'] = isset($data['trust_validation_message_list']) ? $data['trust_validation_message_list'] : null;
        $this->container['is_valid'] = isset($data['is_valid']) ? $data['is_valid'] : null;
        $this->container['certificate_b64'] = isset($data['certificate_b64']) ? $data['certificate_b64'] : null;
        $this->container['verify_condition'] = isset($data['verify_condition']) ? $data['verify_condition'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets sign_algorithm
     *
     * @return \Swagger\Client\Model\IdValuePairDTO
     */
    public function getSignAlgorithm()
    {
        return $this->container['sign_algorithm'];
    }

    /**
     * Sets sign_algorithm
     *
     * @param \Swagger\Client\Model\IdValuePairDTO $sign_algorithm sign_algorithm
     *
     * @return $this
     */
    public function setSignAlgorithm($sign_algorithm)
    {
        $this->container['sign_algorithm'] = $sign_algorithm;

        return $this;
    }

    /**
     * Gets key_bit_length
     *
     * @return int
     */
    public function getKeyBitLength()
    {
        return $this->container['key_bit_length'];
    }

    /**
     * Sets key_bit_length
     *
     * @param int $key_bit_length key_bit_length
     *
     * @return $this
     */
    public function setKeyBitLength($key_bit_length)
    {
        $this->container['key_bit_length'] = $key_bit_length;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets thumbprint_algorithm
     *
     * @return \Swagger\Client\Model\IdValuePairDTO
     */
    public function getThumbprintAlgorithm()
    {
        return $this->container['thumbprint_algorithm'];
    }

    /**
     * Sets thumbprint_algorithm
     *
     * @param \Swagger\Client\Model\IdValuePairDTO $thumbprint_algorithm thumbprint_algorithm
     *
     * @return $this
     */
    public function setThumbprintAlgorithm($thumbprint_algorithm)
    {
        $this->container['thumbprint_algorithm'] = $thumbprint_algorithm;

        return $this;
    }

    /**
     * Gets thumbprint
     *
     * @return string
     */
    public function getThumbprint()
    {
        return $this->container['thumbprint'];
    }

    /**
     * Sets thumbprint
     *
     * @param string $thumbprint thumbprint
     *
     * @return $this
     */
    public function setThumbprint($thumbprint)
    {
        $this->container['thumbprint'] = $thumbprint;

        return $this;
    }

    /**
     * Gets trust_level
     *
     * @return string
     */
    public function getTrustLevel()
    {
        return $this->container['trust_level'];
    }

    /**
     * Sets trust_level
     *
     * @param string $trust_level trust_level
     *
     * @return $this
     */
    public function setTrustLevel($trust_level)
    {
        $this->container['trust_level'] = $trust_level;

        return $this;
    }

    /**
     * Gets key_usage_list
     *
     * @return int[]
     */
    public function getKeyUsageList()
    {
        return $this->container['key_usage_list'];
    }

    /**
     * Sets key_usage_list
     *
     * @param int[] $key_usage_list key_usage_list
     *
     * @return $this
     */
    public function setKeyUsageList($key_usage_list)
    {
        $this->container['key_usage_list'] = $key_usage_list;

        return $this;
    }

    /**
     * Gets extended_key_usage_list
     *
     * @return \Swagger\Client\Model\IdValuePairDTO[]
     */
    public function getExtendedKeyUsageList()
    {
        return $this->container['extended_key_usage_list'];
    }

    /**
     * Sets extended_key_usage_list
     *
     * @param \Swagger\Client\Model\IdValuePairDTO[] $extended_key_usage_list extended_key_usage_list
     *
     * @return $this
     */
    public function setExtendedKeyUsageList($extended_key_usage_list)
    {
        $this->container['extended_key_usage_list'] = $extended_key_usage_list;

        return $this;
    }

    /**
     * Gets valid_not_before_utc
     *
     * @return \DateTime
     */
    public function getValidNotBeforeUtc()
    {
        return $this->container['valid_not_before_utc'];
    }

    /**
     * Sets valid_not_before_utc
     *
     * @param \DateTime $valid_not_before_utc valid_not_before_utc
     *
     * @return $this
     */
    public function setValidNotBeforeUtc($valid_not_before_utc)
    {
        $this->container['valid_not_before_utc'] = $valid_not_before_utc;

        return $this;
    }

    /**
     * Gets valid_not_after_utc
     *
     * @return \DateTime
     */
    public function getValidNotAfterUtc()
    {
        return $this->container['valid_not_after_utc'];
    }

    /**
     * Sets valid_not_after_utc
     *
     * @param \DateTime $valid_not_after_utc valid_not_after_utc
     *
     * @return $this
     */
    public function setValidNotAfterUtc($valid_not_after_utc)
    {
        $this->container['valid_not_after_utc'] = $valid_not_after_utc;

        return $this;
    }

    /**
     * Gets subject_key_identifier
     *
     * @return string
     */
    public function getSubjectKeyIdentifier()
    {
        return $this->container['subject_key_identifier'];
    }

    /**
     * Sets subject_key_identifier
     *
     * @param string $subject_key_identifier subject_key_identifier
     *
     * @return $this
     */
    public function setSubjectKeyIdentifier($subject_key_identifier)
    {
        $this->container['subject_key_identifier'] = $subject_key_identifier;

        return $this;
    }

    /**
     * Gets subject_alternative_name
     *
     * @return string
     */
    public function getSubjectAlternativeName()
    {
        return $this->container['subject_alternative_name'];
    }

    /**
     * Sets subject_alternative_name
     *
     * @param string $subject_alternative_name subject_alternative_name
     *
     * @return $this
     */
    public function setSubjectAlternativeName($subject_alternative_name)
    {
        $this->container['subject_alternative_name'] = $subject_alternative_name;

        return $this;
    }

    /**
     * Gets subject_unique_id
     *
     * @return string
     */
    public function getSubjectUniqueId()
    {
        return $this->container['subject_unique_id'];
    }

    /**
     * Sets subject_unique_id
     *
     * @param string $subject_unique_id subject_unique_id
     *
     * @return $this
     */
    public function setSubjectUniqueId($subject_unique_id)
    {
        $this->container['subject_unique_id'] = $subject_unique_id;

        return $this;
    }

    /**
     * Gets subject_info_list
     *
     * @return \Swagger\Client\Model\IdValuePairDTO[]
     */
    public function getSubjectInfoList()
    {
        return $this->container['subject_info_list'];
    }

    /**
     * Sets subject_info_list
     *
     * @param \Swagger\Client\Model\IdValuePairDTO[] $subject_info_list subject_info_list
     *
     * @return $this
     */
    public function setSubjectInfoList($subject_info_list)
    {
        $this->container['subject_info_list'] = $subject_info_list;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets issuer_unique_id
     *
     * @return string
     */
    public function getIssuerUniqueId()
    {
        return $this->container['issuer_unique_id'];
    }

    /**
     * Sets issuer_unique_id
     *
     * @param string $issuer_unique_id issuer_unique_id
     *
     * @return $this
     */
    public function setIssuerUniqueId($issuer_unique_id)
    {
        $this->container['issuer_unique_id'] = $issuer_unique_id;

        return $this;
    }

    /**
     * Gets issuer_alternative_name
     *
     * @return string
     */
    public function getIssuerAlternativeName()
    {
        return $this->container['issuer_alternative_name'];
    }

    /**
     * Sets issuer_alternative_name
     *
     * @param string $issuer_alternative_name issuer_alternative_name
     *
     * @return $this
     */
    public function setIssuerAlternativeName($issuer_alternative_name)
    {
        $this->container['issuer_alternative_name'] = $issuer_alternative_name;

        return $this;
    }

    /**
     * Gets issuer_info_list
     *
     * @return \Swagger\Client\Model\IdValuePairDTO[]
     */
    public function getIssuerInfoList()
    {
        return $this->container['issuer_info_list'];
    }

    /**
     * Sets issuer_info_list
     *
     * @param \Swagger\Client\Model\IdValuePairDTO[] $issuer_info_list issuer_info_list
     *
     * @return $this
     */
    public function setIssuerInfoList($issuer_info_list)
    {
        $this->container['issuer_info_list'] = $issuer_info_list;

        return $this;
    }

    /**
     * Gets authority_info_access_ocsp
     *
     * @return string[]
     */
    public function getAuthorityInfoAccessOcsp()
    {
        return $this->container['authority_info_access_ocsp'];
    }

    /**
     * Sets authority_info_access_ocsp
     *
     * @param string[] $authority_info_access_ocsp authority_info_access_ocsp
     *
     * @return $this
     */
    public function setAuthorityInfoAccessOcsp($authority_info_access_ocsp)
    {
        $this->container['authority_info_access_ocsp'] = $authority_info_access_ocsp;

        return $this;
    }

    /**
     * Gets crl_distribution_points
     *
     * @return string[]
     */
    public function getCrlDistributionPoints()
    {
        return $this->container['crl_distribution_points'];
    }

    /**
     * Sets crl_distribution_points
     *
     * @param string[] $crl_distribution_points crl_distribution_points
     *
     * @return $this
     */
    public function setCrlDistributionPoints($crl_distribution_points)
    {
        $this->container['crl_distribution_points'] = $crl_distribution_points;

        return $this;
    }

    /**
     * Gets validation_message_list
     *
     * @return \Swagger\Client\Model\ValidationMessageDTO[]
     */
    public function getValidationMessageList()
    {
        return $this->container['validation_message_list'];
    }

    /**
     * Sets validation_message_list
     *
     * @param \Swagger\Client\Model\ValidationMessageDTO[] $validation_message_list validation_message_list
     *
     * @return $this
     */
    public function setValidationMessageList($validation_message_list)
    {
        $this->container['validation_message_list'] = $validation_message_list;

        return $this;
    }

    /**
     * Gets certificate_policies
     *
     * @return \Swagger\Client\Model\CertificatePolicyInfoDTO[]
     */
    public function getCertificatePolicies()
    {
        return $this->container['certificate_policies'];
    }

    /**
     * Sets certificate_policies
     *
     * @param \Swagger\Client\Model\CertificatePolicyInfoDTO[] $certificate_policies certificate_policies
     *
     * @return $this
     */
    public function setCertificatePolicies($certificate_policies)
    {
        $this->container['certificate_policies'] = $certificate_policies;

        return $this;
    }

    /**
     * Gets qc_statement_list
     *
     * @return \Swagger\Client\Model\SignatureAttributeDTO[]
     */
    public function getQcStatementList()
    {
        return $this->container['qc_statement_list'];
    }

    /**
     * Sets qc_statement_list
     *
     * @param \Swagger\Client\Model\SignatureAttributeDTO[] $qc_statement_list qc_statement_list
     *
     * @return $this
     */
    public function setQcStatementList($qc_statement_list)
    {
        $this->container['qc_statement_list'] = $qc_statement_list;

        return $this;
    }

    /**
     * Gets is_trusted
     *
     * @return bool
     */
    public function getIsTrusted()
    {
        return $this->container['is_trusted'];
    }

    /**
     * Sets is_trusted
     *
     * @param bool $is_trusted is_trusted
     *
     * @return $this
     */
    public function setIsTrusted($is_trusted)
    {
        $this->container['is_trusted'] = $is_trusted;

        return $this;
    }

    /**
     * Gets trust_validation_message_list
     *
     * @return \Swagger\Client\Model\ValidationMessageDTO[]
     */
    public function getTrustValidationMessageList()
    {
        return $this->container['trust_validation_message_list'];
    }

    /**
     * Sets trust_validation_message_list
     *
     * @param \Swagger\Client\Model\ValidationMessageDTO[] $trust_validation_message_list trust_validation_message_list
     *
     * @return $this
     */
    public function setTrustValidationMessageList($trust_validation_message_list)
    {
        $this->container['trust_validation_message_list'] = $trust_validation_message_list;

        return $this;
    }

    /**
     * Gets is_valid
     *
     * @return bool
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool $is_valid is_valid
     *
     * @return $this
     */
    public function setIsValid($is_valid)
    {
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets certificate_b64
     *
     * @return string
     */
    public function getCertificateB64()
    {
        return $this->container['certificate_b64'];
    }

    /**
     * Sets certificate_b64
     *
     * @param string $certificate_b64 certificate_b64
     *
     * @return $this
     */
    public function setCertificateB64($certificate_b64)
    {
        $this->container['certificate_b64'] = $certificate_b64;

        return $this;
    }

    /**
     * Gets verify_condition
     *
     * @return \Swagger\Client\Model\VerifyConditionDTO
     */
    public function getVerifyCondition()
    {
        return $this->container['verify_condition'];
    }

    /**
     * Sets verify_condition
     *
     * @param \Swagger\Client\Model\VerifyConditionDTO $verify_condition verify_condition
     *
     * @return $this
     */
    public function setVerifyCondition($verify_condition)
    {
        $this->container['verify_condition'] = $verify_condition;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


