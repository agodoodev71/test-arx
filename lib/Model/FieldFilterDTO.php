<?php
/**
 * FieldFilterDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FieldFilterDTO Class Doc Comment
 *
 * @category Class
 * @description This class contain information about avaible filters for a given additional field
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FieldFilterDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FieldFilterDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'key_field' => 'string',
        'select_field' => 'string',
        'filters' => '\Swagger\Client\Model\FieldBaseForSearchDTO[]',
        'show_filled' => 'bool',
        'default_field' => 'string',
        'filtering_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'key_field' => null,
        'select_field' => null,
        'filters' => null,
        'show_filled' => null,
        'default_field' => null,
        'filtering_type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key_field' => 'keyField',
        'select_field' => 'selectField',
        'filters' => 'filters',
        'show_filled' => 'showFilled',
        'default_field' => 'defaultField',
        'filtering_type' => 'filteringType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key_field' => 'setKeyField',
        'select_field' => 'setSelectField',
        'filters' => 'setFilters',
        'show_filled' => 'setShowFilled',
        'default_field' => 'setDefaultField',
        'filtering_type' => 'setFilteringType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key_field' => 'getKeyField',
        'select_field' => 'getSelectField',
        'filters' => 'getFilters',
        'show_filled' => 'getShowFilled',
        'default_field' => 'getDefaultField',
        'filtering_type' => 'getFilteringType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key_field'] = isset($data['key_field']) ? $data['key_field'] : null;
        $this->container['select_field'] = isset($data['select_field']) ? $data['select_field'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['show_filled'] = isset($data['show_filled']) ? $data['show_filled'] : null;
        $this->container['default_field'] = isset($data['default_field']) ? $data['default_field'] : null;
        $this->container['filtering_type'] = isset($data['filtering_type']) ? $data['filtering_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets key_field
     *
     * @return string
     */
    public function getKeyField()
    {
        return $this->container['key_field'];
    }

    /**
     * Sets key_field
     *
     * @param string $key_field The column name of the property that the client have to use for set the value of the additional field
     *
     * @return $this
     */
    public function setKeyField($key_field)
    {
        $this->container['key_field'] = $key_field;

        return $this;
    }

    /**
     * Gets select_field
     *
     * @return string
     */
    public function getSelectField()
    {
        return $this->container['select_field'];
    }

    /**
     * Sets select_field
     *
     * @param string $select_field The column name of the property that the client have to use for display the value of the additional field
     *
     * @return $this
     */
    public function setSelectField($select_field)
    {
        $this->container['select_field'] = $select_field;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Swagger\Client\Model\FieldBaseForSearchDTO[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Swagger\Client\Model\FieldBaseForSearchDTO[] $filters Array of avaible filters for the additional field
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets show_filled
     *
     * @return bool
     */
    public function getShowFilled()
    {
        return $this->container['show_filled'];
    }

    /**
     * Sets show_filled
     *
     * @param bool $show_filled This property show to client if the search for this field has to be pre-filled or not
     *
     * @return $this
     */
    public function setShowFilled($show_filled)
    {
        $this->container['show_filled'] = $show_filled;

        return $this;
    }

    /**
     * Gets default_field
     *
     * @return string
     */
    public function getDefaultField()
    {
        return $this->container['default_field'];
    }

    /**
     * Sets default_field
     *
     * @param string $default_field The name of filter to use for this field by default
     *
     * @return $this
     */
    public function setDefaultField($default_field)
    {
        $this->container['default_field'] = $default_field;

        return $this;
    }

    /**
     * Gets filtering_type
     *
     * @return int
     */
    public function getFilteringType()
    {
        return $this->container['filtering_type'];
    }

    /**
     * Sets filtering_type
     *
     * @param int $filtering_type Possible values:  0: Full  1: None
     *
     * @return $this
     */
    public function setFilteringType($filtering_type)
    {
        $this->container['filtering_type'] = $filtering_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


