<?php
/**
 * TaskWorkDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TaskWorkDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskWorkDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskWorkDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'process_id' => 'int',
        'workflow_id' => 'int',
        'notes' => 'bool',
        'attachments' => 'bool',
        'docnumber' => 'int',
        'revision' => 'int',
        'start_date' => '\DateTime',
        'task_name' => 'string',
        'task_description' => 'string',
        'user' => 'int',
        'end_date' => '\DateTime',
        'state' => 'int',
        'expire_date' => '\DateTime',
        'principal_profile_security' => 'int',
        'node_id' => 'int',
        'user_enum_selection' => 'int',
        'new_profile_input' => 'bool',
        'profile_edit' => 'bool',
        'folder_insert' => 'bool',
        'priority' => 'int',
        'model_id' => 'int',
        'task_type' => 'int',
        'execution_mode' => 'int',
        'mail_notification' => 'bool',
        'automatic_task_feed_date' => '\DateTime',
        'password_required' => 'bool',
        'new_memo' => 'bool',
        'readed' => 'bool',
        'async_command' => 'bool',
        'edit_copy' => 'bool',
        'taking_charge_required' => 'bool',
        'task_deadline_date' => '\DateTime',
        'task_activation_date' => '\DateTime',
        'professional_role_selection_description' => 'string',
        'process_variables_set_description' => 'string',
        'organization_chart_id' => 'int',
        'delegation_id' => 'int',
        'opened_task_date' => '\DateTime',
        'exit_state' => 'string',
        'group_task_id' => 'string',
        'organization_chart_original_user_id' => 'int',
        'original_user_id' => 'int',
        'external_task_type_id' => 'string',
        'manage_master' => 'bool',
        'wait_user_execution_mode' => 'int',
        'manage_instruction' => 'bool',
        'html_description_enabled' => 'string',
        'dynamic_mansion_description' => 'string',
        'parts_visibility' => 'int',
        'default_exit_state' => 'string',
        'reassign_mode' => 'int',
        'auto_assign_mode' => 'int',
        'name_translation_id' => 'int',
        'description_translation_id' => 'int',
        'professional_roles_description_translation_id' => 'int',
        'variables_description_translation_id' => 'int',
        'html_description_translation_id' => 'int',
        'dynamic_mansion_description_translation_id' => 'int',
        'group_icon' => 'bool',
        'executers' => '\Swagger\Client\Model\UserCompleteDTO[]',
        'attachments_visible' => 'bool',
        'details_visible' => 'bool',
        'profiles_visible' => 'bool',
        'notes_visible' => 'bool',
        'history_visible' => 'bool',
        'instruction_visible' => 'bool',
        'show_process_visible' => 'bool',
        'variables_visible' => 'bool',
        'exit_state_combo_visible' => 'bool',
        'operations_visible' => 'bool',
        'work_flow_name' => 'string',
        'work_flow_description' => 'string',
        'work_flow_details' => 'string',
        'work_flow_color' => 'int',
        'show_designer_visible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'process_id' => 'int32',
        'workflow_id' => 'int32',
        'notes' => null,
        'attachments' => null,
        'docnumber' => 'int32',
        'revision' => 'int32',
        'start_date' => 'date-time',
        'task_name' => null,
        'task_description' => null,
        'user' => 'int32',
        'end_date' => 'date-time',
        'state' => 'int32',
        'expire_date' => 'date-time',
        'principal_profile_security' => 'int32',
        'node_id' => 'int32',
        'user_enum_selection' => 'int32',
        'new_profile_input' => null,
        'profile_edit' => null,
        'folder_insert' => null,
        'priority' => 'int32',
        'model_id' => 'int32',
        'task_type' => 'int32',
        'execution_mode' => 'int32',
        'mail_notification' => null,
        'automatic_task_feed_date' => 'date-time',
        'password_required' => null,
        'new_memo' => null,
        'readed' => null,
        'async_command' => null,
        'edit_copy' => null,
        'taking_charge_required' => null,
        'task_deadline_date' => 'date-time',
        'task_activation_date' => 'date-time',
        'professional_role_selection_description' => null,
        'process_variables_set_description' => null,
        'organization_chart_id' => 'int32',
        'delegation_id' => 'int32',
        'opened_task_date' => 'date-time',
        'exit_state' => null,
        'group_task_id' => null,
        'organization_chart_original_user_id' => 'int32',
        'original_user_id' => 'int32',
        'external_task_type_id' => null,
        'manage_master' => null,
        'wait_user_execution_mode' => 'int32',
        'manage_instruction' => null,
        'html_description_enabled' => null,
        'dynamic_mansion_description' => null,
        'parts_visibility' => 'int32',
        'default_exit_state' => null,
        'reassign_mode' => 'int32',
        'auto_assign_mode' => 'int32',
        'name_translation_id' => 'int32',
        'description_translation_id' => 'int32',
        'professional_roles_description_translation_id' => 'int32',
        'variables_description_translation_id' => 'int32',
        'html_description_translation_id' => 'int32',
        'dynamic_mansion_description_translation_id' => 'int32',
        'group_icon' => null,
        'executers' => null,
        'attachments_visible' => null,
        'details_visible' => null,
        'profiles_visible' => null,
        'notes_visible' => null,
        'history_visible' => null,
        'instruction_visible' => null,
        'show_process_visible' => null,
        'variables_visible' => null,
        'exit_state_combo_visible' => null,
        'operations_visible' => null,
        'work_flow_name' => null,
        'work_flow_description' => null,
        'work_flow_details' => null,
        'work_flow_color' => 'int32',
        'show_designer_visible' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'process_id' => 'processId',
        'workflow_id' => 'workflowId',
        'notes' => 'notes',
        'attachments' => 'attachments',
        'docnumber' => 'docnumber',
        'revision' => 'revision',
        'start_date' => 'startDate',
        'task_name' => 'taskName',
        'task_description' => 'taskDescription',
        'user' => 'user',
        'end_date' => 'endDate',
        'state' => 'state',
        'expire_date' => 'expireDate',
        'principal_profile_security' => 'principalProfileSecurity',
        'node_id' => 'nodeId',
        'user_enum_selection' => 'userEnumSelection',
        'new_profile_input' => 'newProfileInput',
        'profile_edit' => 'profileEdit',
        'folder_insert' => 'folderInsert',
        'priority' => 'priority',
        'model_id' => 'modelId',
        'task_type' => 'taskType',
        'execution_mode' => 'executionMode',
        'mail_notification' => 'mailNotification',
        'automatic_task_feed_date' => 'automaticTaskFeedDate',
        'password_required' => 'passwordRequired',
        'new_memo' => 'newMemo',
        'readed' => 'readed',
        'async_command' => 'asyncCommand',
        'edit_copy' => 'editCopy',
        'taking_charge_required' => 'takingChargeRequired',
        'task_deadline_date' => 'taskDeadlineDate',
        'task_activation_date' => 'taskActivationDate',
        'professional_role_selection_description' => 'professionalRoleSelectionDescription',
        'process_variables_set_description' => 'processVariablesSetDescription',
        'organization_chart_id' => 'organizationChartId',
        'delegation_id' => 'delegationId',
        'opened_task_date' => 'openedTaskDate',
        'exit_state' => 'exitState',
        'group_task_id' => 'groupTaskId',
        'organization_chart_original_user_id' => 'organizationChartOriginalUserId',
        'original_user_id' => 'originalUserId',
        'external_task_type_id' => 'externalTaskTypeId',
        'manage_master' => 'manageMaster',
        'wait_user_execution_mode' => 'waitUserExecutionMode',
        'manage_instruction' => 'manageInstruction',
        'html_description_enabled' => 'htmlDescriptionEnabled',
        'dynamic_mansion_description' => 'dynamicMansionDescription',
        'parts_visibility' => 'partsVisibility',
        'default_exit_state' => 'defaultExitState',
        'reassign_mode' => 'reassignMode',
        'auto_assign_mode' => 'autoAssignMode',
        'name_translation_id' => 'nameTranslationId',
        'description_translation_id' => 'descriptionTranslationId',
        'professional_roles_description_translation_id' => 'professionalRolesDescriptionTranslationId',
        'variables_description_translation_id' => 'variablesDescriptionTranslationId',
        'html_description_translation_id' => 'htmlDescriptionTranslationId',
        'dynamic_mansion_description_translation_id' => 'dynamicMansionDescriptionTranslationId',
        'group_icon' => 'groupIcon',
        'executers' => 'executers',
        'attachments_visible' => 'attachmentsVisible',
        'details_visible' => 'detailsVisible',
        'profiles_visible' => 'profilesVisible',
        'notes_visible' => 'notesVisible',
        'history_visible' => 'historyVisible',
        'instruction_visible' => 'instructionVisible',
        'show_process_visible' => 'showProcessVisible',
        'variables_visible' => 'variablesVisible',
        'exit_state_combo_visible' => 'exitStateComboVisible',
        'operations_visible' => 'operationsVisible',
        'work_flow_name' => 'workFlowName',
        'work_flow_description' => 'workFlowDescription',
        'work_flow_details' => 'workFlowDetails',
        'work_flow_color' => 'workFlowColor',
        'show_designer_visible' => 'showDesignerVisible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'process_id' => 'setProcessId',
        'workflow_id' => 'setWorkflowId',
        'notes' => 'setNotes',
        'attachments' => 'setAttachments',
        'docnumber' => 'setDocnumber',
        'revision' => 'setRevision',
        'start_date' => 'setStartDate',
        'task_name' => 'setTaskName',
        'task_description' => 'setTaskDescription',
        'user' => 'setUser',
        'end_date' => 'setEndDate',
        'state' => 'setState',
        'expire_date' => 'setExpireDate',
        'principal_profile_security' => 'setPrincipalProfileSecurity',
        'node_id' => 'setNodeId',
        'user_enum_selection' => 'setUserEnumSelection',
        'new_profile_input' => 'setNewProfileInput',
        'profile_edit' => 'setProfileEdit',
        'folder_insert' => 'setFolderInsert',
        'priority' => 'setPriority',
        'model_id' => 'setModelId',
        'task_type' => 'setTaskType',
        'execution_mode' => 'setExecutionMode',
        'mail_notification' => 'setMailNotification',
        'automatic_task_feed_date' => 'setAutomaticTaskFeedDate',
        'password_required' => 'setPasswordRequired',
        'new_memo' => 'setNewMemo',
        'readed' => 'setReaded',
        'async_command' => 'setAsyncCommand',
        'edit_copy' => 'setEditCopy',
        'taking_charge_required' => 'setTakingChargeRequired',
        'task_deadline_date' => 'setTaskDeadlineDate',
        'task_activation_date' => 'setTaskActivationDate',
        'professional_role_selection_description' => 'setProfessionalRoleSelectionDescription',
        'process_variables_set_description' => 'setProcessVariablesSetDescription',
        'organization_chart_id' => 'setOrganizationChartId',
        'delegation_id' => 'setDelegationId',
        'opened_task_date' => 'setOpenedTaskDate',
        'exit_state' => 'setExitState',
        'group_task_id' => 'setGroupTaskId',
        'organization_chart_original_user_id' => 'setOrganizationChartOriginalUserId',
        'original_user_id' => 'setOriginalUserId',
        'external_task_type_id' => 'setExternalTaskTypeId',
        'manage_master' => 'setManageMaster',
        'wait_user_execution_mode' => 'setWaitUserExecutionMode',
        'manage_instruction' => 'setManageInstruction',
        'html_description_enabled' => 'setHtmlDescriptionEnabled',
        'dynamic_mansion_description' => 'setDynamicMansionDescription',
        'parts_visibility' => 'setPartsVisibility',
        'default_exit_state' => 'setDefaultExitState',
        'reassign_mode' => 'setReassignMode',
        'auto_assign_mode' => 'setAutoAssignMode',
        'name_translation_id' => 'setNameTranslationId',
        'description_translation_id' => 'setDescriptionTranslationId',
        'professional_roles_description_translation_id' => 'setProfessionalRolesDescriptionTranslationId',
        'variables_description_translation_id' => 'setVariablesDescriptionTranslationId',
        'html_description_translation_id' => 'setHtmlDescriptionTranslationId',
        'dynamic_mansion_description_translation_id' => 'setDynamicMansionDescriptionTranslationId',
        'group_icon' => 'setGroupIcon',
        'executers' => 'setExecuters',
        'attachments_visible' => 'setAttachmentsVisible',
        'details_visible' => 'setDetailsVisible',
        'profiles_visible' => 'setProfilesVisible',
        'notes_visible' => 'setNotesVisible',
        'history_visible' => 'setHistoryVisible',
        'instruction_visible' => 'setInstructionVisible',
        'show_process_visible' => 'setShowProcessVisible',
        'variables_visible' => 'setVariablesVisible',
        'exit_state_combo_visible' => 'setExitStateComboVisible',
        'operations_visible' => 'setOperationsVisible',
        'work_flow_name' => 'setWorkFlowName',
        'work_flow_description' => 'setWorkFlowDescription',
        'work_flow_details' => 'setWorkFlowDetails',
        'work_flow_color' => 'setWorkFlowColor',
        'show_designer_visible' => 'setShowDesignerVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'process_id' => 'getProcessId',
        'workflow_id' => 'getWorkflowId',
        'notes' => 'getNotes',
        'attachments' => 'getAttachments',
        'docnumber' => 'getDocnumber',
        'revision' => 'getRevision',
        'start_date' => 'getStartDate',
        'task_name' => 'getTaskName',
        'task_description' => 'getTaskDescription',
        'user' => 'getUser',
        'end_date' => 'getEndDate',
        'state' => 'getState',
        'expire_date' => 'getExpireDate',
        'principal_profile_security' => 'getPrincipalProfileSecurity',
        'node_id' => 'getNodeId',
        'user_enum_selection' => 'getUserEnumSelection',
        'new_profile_input' => 'getNewProfileInput',
        'profile_edit' => 'getProfileEdit',
        'folder_insert' => 'getFolderInsert',
        'priority' => 'getPriority',
        'model_id' => 'getModelId',
        'task_type' => 'getTaskType',
        'execution_mode' => 'getExecutionMode',
        'mail_notification' => 'getMailNotification',
        'automatic_task_feed_date' => 'getAutomaticTaskFeedDate',
        'password_required' => 'getPasswordRequired',
        'new_memo' => 'getNewMemo',
        'readed' => 'getReaded',
        'async_command' => 'getAsyncCommand',
        'edit_copy' => 'getEditCopy',
        'taking_charge_required' => 'getTakingChargeRequired',
        'task_deadline_date' => 'getTaskDeadlineDate',
        'task_activation_date' => 'getTaskActivationDate',
        'professional_role_selection_description' => 'getProfessionalRoleSelectionDescription',
        'process_variables_set_description' => 'getProcessVariablesSetDescription',
        'organization_chart_id' => 'getOrganizationChartId',
        'delegation_id' => 'getDelegationId',
        'opened_task_date' => 'getOpenedTaskDate',
        'exit_state' => 'getExitState',
        'group_task_id' => 'getGroupTaskId',
        'organization_chart_original_user_id' => 'getOrganizationChartOriginalUserId',
        'original_user_id' => 'getOriginalUserId',
        'external_task_type_id' => 'getExternalTaskTypeId',
        'manage_master' => 'getManageMaster',
        'wait_user_execution_mode' => 'getWaitUserExecutionMode',
        'manage_instruction' => 'getManageInstruction',
        'html_description_enabled' => 'getHtmlDescriptionEnabled',
        'dynamic_mansion_description' => 'getDynamicMansionDescription',
        'parts_visibility' => 'getPartsVisibility',
        'default_exit_state' => 'getDefaultExitState',
        'reassign_mode' => 'getReassignMode',
        'auto_assign_mode' => 'getAutoAssignMode',
        'name_translation_id' => 'getNameTranslationId',
        'description_translation_id' => 'getDescriptionTranslationId',
        'professional_roles_description_translation_id' => 'getProfessionalRolesDescriptionTranslationId',
        'variables_description_translation_id' => 'getVariablesDescriptionTranslationId',
        'html_description_translation_id' => 'getHtmlDescriptionTranslationId',
        'dynamic_mansion_description_translation_id' => 'getDynamicMansionDescriptionTranslationId',
        'group_icon' => 'getGroupIcon',
        'executers' => 'getExecuters',
        'attachments_visible' => 'getAttachmentsVisible',
        'details_visible' => 'getDetailsVisible',
        'profiles_visible' => 'getProfilesVisible',
        'notes_visible' => 'getNotesVisible',
        'history_visible' => 'getHistoryVisible',
        'instruction_visible' => 'getInstructionVisible',
        'show_process_visible' => 'getShowProcessVisible',
        'variables_visible' => 'getVariablesVisible',
        'exit_state_combo_visible' => 'getExitStateComboVisible',
        'operations_visible' => 'getOperationsVisible',
        'work_flow_name' => 'getWorkFlowName',
        'work_flow_description' => 'getWorkFlowDescription',
        'work_flow_details' => 'getWorkFlowDetails',
        'work_flow_color' => 'getWorkFlowColor',
        'show_designer_visible' => 'getShowDesignerVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['process_id'] = isset($data['process_id']) ? $data['process_id'] : null;
        $this->container['workflow_id'] = isset($data['workflow_id']) ? $data['workflow_id'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['docnumber'] = isset($data['docnumber']) ? $data['docnumber'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['task_name'] = isset($data['task_name']) ? $data['task_name'] : null;
        $this->container['task_description'] = isset($data['task_description']) ? $data['task_description'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['expire_date'] = isset($data['expire_date']) ? $data['expire_date'] : null;
        $this->container['principal_profile_security'] = isset($data['principal_profile_security']) ? $data['principal_profile_security'] : null;
        $this->container['node_id'] = isset($data['node_id']) ? $data['node_id'] : null;
        $this->container['user_enum_selection'] = isset($data['user_enum_selection']) ? $data['user_enum_selection'] : null;
        $this->container['new_profile_input'] = isset($data['new_profile_input']) ? $data['new_profile_input'] : null;
        $this->container['profile_edit'] = isset($data['profile_edit']) ? $data['profile_edit'] : null;
        $this->container['folder_insert'] = isset($data['folder_insert']) ? $data['folder_insert'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['model_id'] = isset($data['model_id']) ? $data['model_id'] : null;
        $this->container['task_type'] = isset($data['task_type']) ? $data['task_type'] : null;
        $this->container['execution_mode'] = isset($data['execution_mode']) ? $data['execution_mode'] : null;
        $this->container['mail_notification'] = isset($data['mail_notification']) ? $data['mail_notification'] : null;
        $this->container['automatic_task_feed_date'] = isset($data['automatic_task_feed_date']) ? $data['automatic_task_feed_date'] : null;
        $this->container['password_required'] = isset($data['password_required']) ? $data['password_required'] : null;
        $this->container['new_memo'] = isset($data['new_memo']) ? $data['new_memo'] : null;
        $this->container['readed'] = isset($data['readed']) ? $data['readed'] : null;
        $this->container['async_command'] = isset($data['async_command']) ? $data['async_command'] : null;
        $this->container['edit_copy'] = isset($data['edit_copy']) ? $data['edit_copy'] : null;
        $this->container['taking_charge_required'] = isset($data['taking_charge_required']) ? $data['taking_charge_required'] : null;
        $this->container['task_deadline_date'] = isset($data['task_deadline_date']) ? $data['task_deadline_date'] : null;
        $this->container['task_activation_date'] = isset($data['task_activation_date']) ? $data['task_activation_date'] : null;
        $this->container['professional_role_selection_description'] = isset($data['professional_role_selection_description']) ? $data['professional_role_selection_description'] : null;
        $this->container['process_variables_set_description'] = isset($data['process_variables_set_description']) ? $data['process_variables_set_description'] : null;
        $this->container['organization_chart_id'] = isset($data['organization_chart_id']) ? $data['organization_chart_id'] : null;
        $this->container['delegation_id'] = isset($data['delegation_id']) ? $data['delegation_id'] : null;
        $this->container['opened_task_date'] = isset($data['opened_task_date']) ? $data['opened_task_date'] : null;
        $this->container['exit_state'] = isset($data['exit_state']) ? $data['exit_state'] : null;
        $this->container['group_task_id'] = isset($data['group_task_id']) ? $data['group_task_id'] : null;
        $this->container['organization_chart_original_user_id'] = isset($data['organization_chart_original_user_id']) ? $data['organization_chart_original_user_id'] : null;
        $this->container['original_user_id'] = isset($data['original_user_id']) ? $data['original_user_id'] : null;
        $this->container['external_task_type_id'] = isset($data['external_task_type_id']) ? $data['external_task_type_id'] : null;
        $this->container['manage_master'] = isset($data['manage_master']) ? $data['manage_master'] : null;
        $this->container['wait_user_execution_mode'] = isset($data['wait_user_execution_mode']) ? $data['wait_user_execution_mode'] : null;
        $this->container['manage_instruction'] = isset($data['manage_instruction']) ? $data['manage_instruction'] : null;
        $this->container['html_description_enabled'] = isset($data['html_description_enabled']) ? $data['html_description_enabled'] : null;
        $this->container['dynamic_mansion_description'] = isset($data['dynamic_mansion_description']) ? $data['dynamic_mansion_description'] : null;
        $this->container['parts_visibility'] = isset($data['parts_visibility']) ? $data['parts_visibility'] : null;
        $this->container['default_exit_state'] = isset($data['default_exit_state']) ? $data['default_exit_state'] : null;
        $this->container['reassign_mode'] = isset($data['reassign_mode']) ? $data['reassign_mode'] : null;
        $this->container['auto_assign_mode'] = isset($data['auto_assign_mode']) ? $data['auto_assign_mode'] : null;
        $this->container['name_translation_id'] = isset($data['name_translation_id']) ? $data['name_translation_id'] : null;
        $this->container['description_translation_id'] = isset($data['description_translation_id']) ? $data['description_translation_id'] : null;
        $this->container['professional_roles_description_translation_id'] = isset($data['professional_roles_description_translation_id']) ? $data['professional_roles_description_translation_id'] : null;
        $this->container['variables_description_translation_id'] = isset($data['variables_description_translation_id']) ? $data['variables_description_translation_id'] : null;
        $this->container['html_description_translation_id'] = isset($data['html_description_translation_id']) ? $data['html_description_translation_id'] : null;
        $this->container['dynamic_mansion_description_translation_id'] = isset($data['dynamic_mansion_description_translation_id']) ? $data['dynamic_mansion_description_translation_id'] : null;
        $this->container['group_icon'] = isset($data['group_icon']) ? $data['group_icon'] : null;
        $this->container['executers'] = isset($data['executers']) ? $data['executers'] : null;
        $this->container['attachments_visible'] = isset($data['attachments_visible']) ? $data['attachments_visible'] : null;
        $this->container['details_visible'] = isset($data['details_visible']) ? $data['details_visible'] : null;
        $this->container['profiles_visible'] = isset($data['profiles_visible']) ? $data['profiles_visible'] : null;
        $this->container['notes_visible'] = isset($data['notes_visible']) ? $data['notes_visible'] : null;
        $this->container['history_visible'] = isset($data['history_visible']) ? $data['history_visible'] : null;
        $this->container['instruction_visible'] = isset($data['instruction_visible']) ? $data['instruction_visible'] : null;
        $this->container['show_process_visible'] = isset($data['show_process_visible']) ? $data['show_process_visible'] : null;
        $this->container['variables_visible'] = isset($data['variables_visible']) ? $data['variables_visible'] : null;
        $this->container['exit_state_combo_visible'] = isset($data['exit_state_combo_visible']) ? $data['exit_state_combo_visible'] : null;
        $this->container['operations_visible'] = isset($data['operations_visible']) ? $data['operations_visible'] : null;
        $this->container['work_flow_name'] = isset($data['work_flow_name']) ? $data['work_flow_name'] : null;
        $this->container['work_flow_description'] = isset($data['work_flow_description']) ? $data['work_flow_description'] : null;
        $this->container['work_flow_details'] = isset($data['work_flow_details']) ? $data['work_flow_details'] : null;
        $this->container['work_flow_color'] = isset($data['work_flow_color']) ? $data['work_flow_color'] : null;
        $this->container['show_designer_visible'] = isset($data['show_designer_visible']) ? $data['show_designer_visible'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets process_id
     *
     * @return int
     */
    public function getProcessId()
    {
        return $this->container['process_id'];
    }

    /**
     * Sets process_id
     *
     * @param int $process_id Process Identifier
     *
     * @return $this
     */
    public function setProcessId($process_id)
    {
        $this->container['process_id'] = $process_id;

        return $this;
    }

    /**
     * Gets workflow_id
     *
     * @return int
     */
    public function getWorkflowId()
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param int $workflow_id Workflow Identifier
     *
     * @return $this
     */
    public function setWorkflowId($workflow_id)
    {
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return bool
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param bool $notes Notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return bool
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param bool $attachments Attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets docnumber
     *
     * @return int
     */
    public function getDocnumber()
    {
        return $this->container['docnumber'];
    }

    /**
     * Sets docnumber
     *
     * @param int $docnumber Principal Document Identifier
     *
     * @return $this
     */
    public function setDocnumber($docnumber)
    {
        $this->container['docnumber'] = $docnumber;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision Principal Document Revision Number
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start Date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name Task Name
     *
     * @return $this
     */
    public function setTaskName($task_name)
    {
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets task_description
     *
     * @return string
     */
    public function getTaskDescription()
    {
        return $this->container['task_description'];
    }

    /**
     * Sets task_description
     *
     * @param string $task_description Description
     *
     * @return $this
     */
    public function setTaskDescription($task_description)
    {
        $this->container['task_description'] = $task_description;

        return $this;
    }

    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user Author Identifier
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date End Date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state Possible values:  0: Ended  1: Active  2: NotActive
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return \DateTime
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param \DateTime $expire_date Expiration Date
     *
     * @return $this
     */
    public function setExpireDate($expire_date)
    {
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets principal_profile_security
     *
     * @return int
     */
    public function getPrincipalProfileSecurity()
    {
        return $this->container['principal_profile_security'];
    }

    /**
     * Sets principal_profile_security
     *
     * @param int $principal_profile_security Possible values:  0: Read  1: Write  2: FromSecurity
     *
     * @return $this
     */
    public function setPrincipalProfileSecurity($principal_profile_security)
    {
        $this->container['principal_profile_security'] = $principal_profile_security;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return int
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param int $node_id Task Node Identifier
     *
     * @return $this
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets user_enum_selection
     *
     * @return int
     */
    public function getUserEnumSelection()
    {
        return $this->container['user_enum_selection'];
    }

    /**
     * Sets user_enum_selection
     *
     * @param int $user_enum_selection Possible values:  0: Standard  1: List  2: OrganizationChart
     *
     * @return $this
     */
    public function setUserEnumSelection($user_enum_selection)
    {
        $this->container['user_enum_selection'] = $user_enum_selection;

        return $this;
    }

    /**
     * Gets new_profile_input
     *
     * @return bool
     */
    public function getNewProfileInput()
    {
        return $this->container['new_profile_input'];
    }

    /**
     * Sets new_profile_input
     *
     * @param bool $new_profile_input Active the operation to insert a principal document
     *
     * @return $this
     */
    public function setNewProfileInput($new_profile_input)
    {
        $this->container['new_profile_input'] = $new_profile_input;

        return $this;
    }

    /**
     * Gets profile_edit
     *
     * @return bool
     */
    public function getProfileEdit()
    {
        return $this->container['profile_edit'];
    }

    /**
     * Sets profile_edit
     *
     * @param bool $profile_edit Active the operation to update a principal document
     *
     * @return $this
     */
    public function setProfileEdit($profile_edit)
    {
        $this->container['profile_edit'] = $profile_edit;

        return $this;
    }

    /**
     * Gets folder_insert
     *
     * @return bool
     */
    public function getFolderInsert()
    {
        return $this->container['folder_insert'];
    }

    /**
     * Sets folder_insert
     *
     * @param bool $folder_insert Active the operation to insert in folder a principal document
     *
     * @return $this
     */
    public function setFolderInsert($folder_insert)
    {
        $this->container['folder_insert'] = $folder_insert;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority Possible values:  0: Standard  1: Medium  2: High
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets model_id
     *
     * @return int
     */
    public function getModelId()
    {
        return $this->container['model_id'];
    }

    /**
     * Sets model_id
     *
     * @param int $model_id Model Identifier for operation to insert a principal document
     *
     * @return $this
     */
    public function setModelId($model_id)
    {
        $this->container['model_id'] = $model_id;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return int
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param int $task_type Possible values:  0: Standard  1: Connection  2: Process  3: Pause  5: Task5  6: Documentation  7: Chrono
     *
     * @return $this
     */
    public function setTaskType($task_type)
    {
        $this->container['task_type'] = $task_type;

        return $this;
    }

    /**
     * Gets execution_mode
     *
     * @return int
     */
    public function getExecutionMode()
    {
        return $this->container['execution_mode'];
    }

    /**
     * Sets execution_mode
     *
     * @param int $execution_mode Execution Mode
     *
     * @return $this
     */
    public function setExecutionMode($execution_mode)
    {
        $this->container['execution_mode'] = $execution_mode;

        return $this;
    }

    /**
     * Gets mail_notification
     *
     * @return bool
     */
    public function getMailNotification()
    {
        return $this->container['mail_notification'];
    }

    /**
     * Sets mail_notification
     *
     * @param bool $mail_notification Smtp for mail notification
     *
     * @return $this
     */
    public function setMailNotification($mail_notification)
    {
        $this->container['mail_notification'] = $mail_notification;

        return $this;
    }

    /**
     * Gets automatic_task_feed_date
     *
     * @return \DateTime
     */
    public function getAutomaticTaskFeedDate()
    {
        return $this->container['automatic_task_feed_date'];
    }

    /**
     * Sets automatic_task_feed_date
     *
     * @param \DateTime $automatic_task_feed_date Date of Automatic Feed
     *
     * @return $this
     */
    public function setAutomaticTaskFeedDate($automatic_task_feed_date)
    {
        $this->container['automatic_task_feed_date'] = $automatic_task_feed_date;

        return $this;
    }

    /**
     * Gets password_required
     *
     * @return bool
     */
    public function getPasswordRequired()
    {
        return $this->container['password_required'];
    }

    /**
     * Sets password_required
     *
     * @param bool $password_required Password request for the conclusion of the task
     *
     * @return $this
     */
    public function setPasswordRequired($password_required)
    {
        $this->container['password_required'] = $password_required;

        return $this;
    }

    /**
     * Gets new_memo
     *
     * @return bool
     */
    public function getNewMemo()
    {
        return $this->container['new_memo'];
    }

    /**
     * Sets new_memo
     *
     * @param bool $new_memo Creating a new memo
     *
     * @return $this
     */
    public function setNewMemo($new_memo)
    {
        $this->container['new_memo'] = $new_memo;

        return $this;
    }

    /**
     * Gets readed
     *
     * @return bool
     */
    public function getReaded()
    {
        return $this->container['readed'];
    }

    /**
     * Sets readed
     *
     * @param bool $readed The task was read
     *
     * @return $this
     */
    public function setReaded($readed)
    {
        $this->container['readed'] = $readed;

        return $this;
    }

    /**
     * Gets async_command
     *
     * @return bool
     */
    public function getAsyncCommand()
    {
        return $this->container['async_command'];
    }

    /**
     * Sets async_command
     *
     * @param bool $async_command Execution mode in the case of shell operation
     *
     * @return $this
     */
    public function setAsyncCommand($async_command)
    {
        $this->container['async_command'] = $async_command;

        return $this;
    }

    /**
     * Gets edit_copy
     *
     * @return bool
     */
    public function getEditCopy()
    {
        return $this->container['edit_copy'];
    }

    /**
     * Sets edit_copy
     *
     * @param bool $edit_copy Copy the file in the edit buffer
     *
     * @return $this
     */
    public function setEditCopy($edit_copy)
    {
        $this->container['edit_copy'] = $edit_copy;

        return $this;
    }

    /**
     * Gets taking_charge_required
     *
     * @return bool
     */
    public function getTakingChargeRequired()
    {
        return $this->container['taking_charge_required'];
    }

    /**
     * Sets taking_charge_required
     *
     * @param bool $taking_charge_required Taking Charge Request
     *
     * @return $this
     */
    public function setTakingChargeRequired($taking_charge_required)
    {
        $this->container['taking_charge_required'] = $taking_charge_required;

        return $this;
    }

    /**
     * Gets task_deadline_date
     *
     * @return \DateTime
     */
    public function getTaskDeadlineDate()
    {
        return $this->container['task_deadline_date'];
    }

    /**
     * Sets task_deadline_date
     *
     * @param \DateTime $task_deadline_date Date of expiration of the task
     *
     * @return $this
     */
    public function setTaskDeadlineDate($task_deadline_date)
    {
        $this->container['task_deadline_date'] = $task_deadline_date;

        return $this;
    }

    /**
     * Gets task_activation_date
     *
     * @return \DateTime
     */
    public function getTaskActivationDate()
    {
        return $this->container['task_activation_date'];
    }

    /**
     * Sets task_activation_date
     *
     * @param \DateTime $task_activation_date Task activation date
     *
     * @return $this
     */
    public function setTaskActivationDate($task_activation_date)
    {
        $this->container['task_activation_date'] = $task_activation_date;

        return $this;
    }

    /**
     * Gets professional_role_selection_description
     *
     * @return string
     */
    public function getProfessionalRoleSelectionDescription()
    {
        return $this->container['professional_role_selection_description'];
    }

    /**
     * Sets professional_role_selection_description
     *
     * @param string $professional_role_selection_description Description of the professionals role selection operation
     *
     * @return $this
     */
    public function setProfessionalRoleSelectionDescription($professional_role_selection_description)
    {
        $this->container['professional_role_selection_description'] = $professional_role_selection_description;

        return $this;
    }

    /**
     * Gets process_variables_set_description
     *
     * @return string
     */
    public function getProcessVariablesSetDescription()
    {
        return $this->container['process_variables_set_description'];
    }

    /**
     * Sets process_variables_set_description
     *
     * @param string $process_variables_set_description Description of the operation of process variables setting
     *
     * @return $this
     */
    public function setProcessVariablesSetDescription($process_variables_set_description)
    {
        $this->container['process_variables_set_description'] = $process_variables_set_description;

        return $this;
    }

    /**
     * Gets organization_chart_id
     *
     * @return int
     */
    public function getOrganizationChartId()
    {
        return $this->container['organization_chart_id'];
    }

    /**
     * Sets organization_chart_id
     *
     * @param int $organization_chart_id Organization Chart Identifier
     *
     * @return $this
     */
    public function setOrganizationChartId($organization_chart_id)
    {
        $this->container['organization_chart_id'] = $organization_chart_id;

        return $this;
    }

    /**
     * Gets delegation_id
     *
     * @return int
     */
    public function getDelegationId()
    {
        return $this->container['delegation_id'];
    }

    /**
     * Sets delegation_id
     *
     * @param int $delegation_id Delegation Identifier
     *
     * @return $this
     */
    public function setDelegationId($delegation_id)
    {
        $this->container['delegation_id'] = $delegation_id;

        return $this;
    }

    /**
     * Gets opened_task_date
     *
     * @return \DateTime
     */
    public function getOpenedTaskDate()
    {
        return $this->container['opened_task_date'];
    }

    /**
     * Sets opened_task_date
     *
     * @param \DateTime $opened_task_date Date of opening
     *
     * @return $this
     */
    public function setOpenedTaskDate($opened_task_date)
    {
        $this->container['opened_task_date'] = $opened_task_date;

        return $this;
    }

    /**
     * Gets exit_state
     *
     * @return string
     */
    public function getExitState()
    {
        return $this->container['exit_state'];
    }

    /**
     * Sets exit_state
     *
     * @param string $exit_state Exit State
     *
     * @return $this
     */
    public function setExitState($exit_state)
    {
        $this->container['exit_state'] = $exit_state;

        return $this;
    }

    /**
     * Gets group_task_id
     *
     * @return string
     */
    public function getGroupTaskId()
    {
        return $this->container['group_task_id'];
    }

    /**
     * Sets group_task_id
     *
     * @param string $group_task_id Group Task Identifier
     *
     * @return $this
     */
    public function setGroupTaskId($group_task_id)
    {
        $this->container['group_task_id'] = $group_task_id;

        return $this;
    }

    /**
     * Gets organization_chart_original_user_id
     *
     * @return int
     */
    public function getOrganizationChartOriginalUserId()
    {
        return $this->container['organization_chart_original_user_id'];
    }

    /**
     * Sets organization_chart_original_user_id
     *
     * @param int $organization_chart_original_user_id Organization Identifier associated with the original user.
     *
     * @return $this
     */
    public function setOrganizationChartOriginalUserId($organization_chart_original_user_id)
    {
        $this->container['organization_chart_original_user_id'] = $organization_chart_original_user_id;

        return $this;
    }

    /**
     * Gets original_user_id
     *
     * @return int
     */
    public function getOriginalUserId()
    {
        return $this->container['original_user_id'];
    }

    /**
     * Sets original_user_id
     *
     * @param int $original_user_id Identifier of Original User to delegation
     *
     * @return $this
     */
    public function setOriginalUserId($original_user_id)
    {
        $this->container['original_user_id'] = $original_user_id;

        return $this;
    }

    /**
     * Gets external_task_type_id
     *
     * @return string
     */
    public function getExternalTaskTypeId()
    {
        return $this->container['external_task_type_id'];
    }

    /**
     * Sets external_task_type_id
     *
     * @param string $external_task_type_id External Identifier
     *
     * @return $this
     */
    public function setExternalTaskTypeId($external_task_type_id)
    {
        $this->container['external_task_type_id'] = $external_task_type_id;

        return $this;
    }

    /**
     * Gets manage_master
     *
     * @return bool
     */
    public function getManageMaster()
    {
        return $this->container['manage_master'];
    }

    /**
     * Sets manage_master
     *
     * @param bool $manage_master It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process
     *
     * @return $this
     */
    public function setManageMaster($manage_master)
    {
        $this->container['manage_master'] = $manage_master;

        return $this;
    }

    /**
     * Gets wait_user_execution_mode
     *
     * @return int
     */
    public function getWaitUserExecutionMode()
    {
        return $this->container['wait_user_execution_mode'];
    }

    /**
     * Sets wait_user_execution_mode
     *
     * @param int $wait_user_execution_mode It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities
     *
     * @return $this
     */
    public function setWaitUserExecutionMode($wait_user_execution_mode)
    {
        $this->container['wait_user_execution_mode'] = $wait_user_execution_mode;

        return $this;
    }

    /**
     * Gets manage_instruction
     *
     * @return bool
     */
    public function getManageInstruction()
    {
        return $this->container['manage_instruction'];
    }

    /**
     * Sets manage_instruction
     *
     * @param bool $manage_instruction It allows to manage the operating instructions by means of an operation on the task
     *
     * @return $this
     */
    public function setManageInstruction($manage_instruction)
    {
        $this->container['manage_instruction'] = $manage_instruction;

        return $this;
    }

    /**
     * Gets html_description_enabled
     *
     * @return string
     */
    public function getHtmlDescriptionEnabled()
    {
        return $this->container['html_description_enabled'];
    }

    /**
     * Sets html_description_enabled
     *
     * @param string $html_description_enabled Specifies whether the task description is html
     *
     * @return $this
     */
    public function setHtmlDescriptionEnabled($html_description_enabled)
    {
        $this->container['html_description_enabled'] = $html_description_enabled;

        return $this;
    }

    /**
     * Gets dynamic_mansion_description
     *
     * @return string
     */
    public function getDynamicMansionDescription()
    {
        return $this->container['dynamic_mansion_description'];
    }

    /**
     * Sets dynamic_mansion_description
     *
     * @param string $dynamic_mansion_description Descritpion for the dynamic mansion operation
     *
     * @return $this
     */
    public function setDynamicMansionDescription($dynamic_mansion_description)
    {
        $this->container['dynamic_mansion_description'] = $dynamic_mansion_description;

        return $this;
    }

    /**
     * Gets parts_visibility
     *
     * @return int
     */
    public function getPartsVisibility()
    {
        return $this->container['parts_visibility'];
    }

    /**
     * Sets parts_visibility
     *
     * @param int $parts_visibility This flags enum indicates wich part is visible in the task
     *
     * @return $this
     */
    public function setPartsVisibility($parts_visibility)
    {
        $this->container['parts_visibility'] = $parts_visibility;

        return $this;
    }

    /**
     * Gets default_exit_state
     *
     * @return string
     */
    public function getDefaultExitState()
    {
        return $this->container['default_exit_state'];
    }

    /**
     * Sets default_exit_state
     *
     * @param string $default_exit_state Default exit state for the task
     *
     * @return $this
     */
    public function setDefaultExitState($default_exit_state)
    {
        $this->container['default_exit_state'] = $default_exit_state;

        return $this;
    }

    /**
     * Gets reassign_mode
     *
     * @return int
     */
    public function getReassignMode()
    {
        return $this->container['reassign_mode'];
    }

    /**
     * Sets reassign_mode
     *
     * @param int $reassign_mode Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected
     *
     * @return $this
     */
    public function setReassignMode($reassign_mode)
    {
        $this->container['reassign_mode'] = $reassign_mode;

        return $this;
    }

    /**
     * Gets auto_assign_mode
     *
     * @return int
     */
    public function getAutoAssignMode()
    {
        return $this->container['auto_assign_mode'];
    }

    /**
     * Sets auto_assign_mode
     *
     * @param int $auto_assign_mode Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected
     *
     * @return $this
     */
    public function setAutoAssignMode($auto_assign_mode)
    {
        $this->container['auto_assign_mode'] = $auto_assign_mode;

        return $this;
    }

    /**
     * Gets name_translation_id
     *
     * @return int
     */
    public function getNameTranslationId()
    {
        return $this->container['name_translation_id'];
    }

    /**
     * Sets name_translation_id
     *
     * @param int $name_translation_id Id of the translation for the name of the task
     *
     * @return $this
     */
    public function setNameTranslationId($name_translation_id)
    {
        $this->container['name_translation_id'] = $name_translation_id;

        return $this;
    }

    /**
     * Gets description_translation_id
     *
     * @return int
     */
    public function getDescriptionTranslationId()
    {
        return $this->container['description_translation_id'];
    }

    /**
     * Sets description_translation_id
     *
     * @param int $description_translation_id Id of the translation for the description of the task
     *
     * @return $this
     */
    public function setDescriptionTranslationId($description_translation_id)
    {
        $this->container['description_translation_id'] = $description_translation_id;

        return $this;
    }

    /**
     * Gets professional_roles_description_translation_id
     *
     * @return int
     */
    public function getProfessionalRolesDescriptionTranslationId()
    {
        return $this->container['professional_roles_description_translation_id'];
    }

    /**
     * Sets professional_roles_description_translation_id
     *
     * @param int $professional_roles_description_translation_id Id of the translation for the task professional figures selection operation description
     *
     * @return $this
     */
    public function setProfessionalRolesDescriptionTranslationId($professional_roles_description_translation_id)
    {
        $this->container['professional_roles_description_translation_id'] = $professional_roles_description_translation_id;

        return $this;
    }

    /**
     * Gets variables_description_translation_id
     *
     * @return int
     */
    public function getVariablesDescriptionTranslationId()
    {
        return $this->container['variables_description_translation_id'];
    }

    /**
     * Sets variables_description_translation_id
     *
     * @param int $variables_description_translation_id Id of the translation for task set variables operation description
     *
     * @return $this
     */
    public function setVariablesDescriptionTranslationId($variables_description_translation_id)
    {
        $this->container['variables_description_translation_id'] = $variables_description_translation_id;

        return $this;
    }

    /**
     * Gets html_description_translation_id
     *
     * @return int
     */
    public function getHtmlDescriptionTranslationId()
    {
        return $this->container['html_description_translation_id'];
    }

    /**
     * Sets html_description_translation_id
     *
     * @param int $html_description_translation_id Id of the translation for Html description of the task
     *
     * @return $this
     */
    public function setHtmlDescriptionTranslationId($html_description_translation_id)
    {
        $this->container['html_description_translation_id'] = $html_description_translation_id;

        return $this;
    }

    /**
     * Gets dynamic_mansion_description_translation_id
     *
     * @return int
     */
    public function getDynamicMansionDescriptionTranslationId()
    {
        return $this->container['dynamic_mansion_description_translation_id'];
    }

    /**
     * Sets dynamic_mansion_description_translation_id
     *
     * @param int $dynamic_mansion_description_translation_id Id of the translation for task dynamic mansion selection operation
     *
     * @return $this
     */
    public function setDynamicMansionDescriptionTranslationId($dynamic_mansion_description_translation_id)
    {
        $this->container['dynamic_mansion_description_translation_id'] = $dynamic_mansion_description_translation_id;

        return $this;
    }

    /**
     * Gets group_icon
     *
     * @return bool
     */
    public function getGroupIcon()
    {
        return $this->container['group_icon'];
    }

    /**
     * Sets group_icon
     *
     * @param bool $group_icon Icon for the group
     *
     * @return $this
     */
    public function setGroupIcon($group_icon)
    {
        $this->container['group_icon'] = $group_icon;

        return $this;
    }

    /**
     * Gets executers
     *
     * @return \Swagger\Client\Model\UserCompleteDTO[]
     */
    public function getExecuters()
    {
        return $this->container['executers'];
    }

    /**
     * Sets executers
     *
     * @param \Swagger\Client\Model\UserCompleteDTO[] $executers Executers of the task
     *
     * @return $this
     */
    public function setExecuters($executers)
    {
        $this->container['executers'] = $executers;

        return $this;
    }

    /**
     * Gets attachments_visible
     *
     * @return bool
     */
    public function getAttachmentsVisible()
    {
        return $this->container['attachments_visible'];
    }

    /**
     * Sets attachments_visible
     *
     * @param bool $attachments_visible Attachments part visibility
     *
     * @return $this
     */
    public function setAttachmentsVisible($attachments_visible)
    {
        $this->container['attachments_visible'] = $attachments_visible;

        return $this;
    }

    /**
     * Gets details_visible
     *
     * @return bool
     */
    public function getDetailsVisible()
    {
        return $this->container['details_visible'];
    }

    /**
     * Sets details_visible
     *
     * @param bool $details_visible Task details part visibility
     *
     * @return $this
     */
    public function setDetailsVisible($details_visible)
    {
        $this->container['details_visible'] = $details_visible;

        return $this;
    }

    /**
     * Gets profiles_visible
     *
     * @return bool
     */
    public function getProfilesVisible()
    {
        return $this->container['profiles_visible'];
    }

    /**
     * Sets profiles_visible
     *
     * @param bool $profiles_visible Profiles part visibility
     *
     * @return $this
     */
    public function setProfilesVisible($profiles_visible)
    {
        $this->container['profiles_visible'] = $profiles_visible;

        return $this;
    }

    /**
     * Gets notes_visible
     *
     * @return bool
     */
    public function getNotesVisible()
    {
        return $this->container['notes_visible'];
    }

    /**
     * Sets notes_visible
     *
     * @param bool $notes_visible Notes part visibility
     *
     * @return $this
     */
    public function setNotesVisible($notes_visible)
    {
        $this->container['notes_visible'] = $notes_visible;

        return $this;
    }

    /**
     * Gets history_visible
     *
     * @return bool
     */
    public function getHistoryVisible()
    {
        return $this->container['history_visible'];
    }

    /**
     * Sets history_visible
     *
     * @param bool $history_visible History part visibility
     *
     * @return $this
     */
    public function setHistoryVisible($history_visible)
    {
        $this->container['history_visible'] = $history_visible;

        return $this;
    }

    /**
     * Gets instruction_visible
     *
     * @return bool
     */
    public function getInstructionVisible()
    {
        return $this->container['instruction_visible'];
    }

    /**
     * Sets instruction_visible
     *
     * @param bool $instruction_visible Instructions part visibility
     *
     * @return $this
     */
    public function setInstructionVisible($instruction_visible)
    {
        $this->container['instruction_visible'] = $instruction_visible;

        return $this;
    }

    /**
     * Gets show_process_visible
     *
     * @return bool
     */
    public function getShowProcessVisible()
    {
        return $this->container['show_process_visible'];
    }

    /**
     * Sets show_process_visible
     *
     * @param bool $show_process_visible Show process command part visibility
     *
     * @return $this
     */
    public function setShowProcessVisible($show_process_visible)
    {
        $this->container['show_process_visible'] = $show_process_visible;

        return $this;
    }

    /**
     * Gets variables_visible
     *
     * @return bool
     */
    public function getVariablesVisible()
    {
        return $this->container['variables_visible'];
    }

    /**
     * Sets variables_visible
     *
     * @param bool $variables_visible Variables part visibility
     *
     * @return $this
     */
    public function setVariablesVisible($variables_visible)
    {
        $this->container['variables_visible'] = $variables_visible;

        return $this;
    }

    /**
     * Gets exit_state_combo_visible
     *
     * @return bool
     */
    public function getExitStateComboVisible()
    {
        return $this->container['exit_state_combo_visible'];
    }

    /**
     * Sets exit_state_combo_visible
     *
     * @param bool $exit_state_combo_visible Exit state part visibility
     *
     * @return $this
     */
    public function setExitStateComboVisible($exit_state_combo_visible)
    {
        $this->container['exit_state_combo_visible'] = $exit_state_combo_visible;

        return $this;
    }

    /**
     * Gets operations_visible
     *
     * @return bool
     */
    public function getOperationsVisible()
    {
        return $this->container['operations_visible'];
    }

    /**
     * Sets operations_visible
     *
     * @param bool $operations_visible Operations part visibility
     *
     * @return $this
     */
    public function setOperationsVisible($operations_visible)
    {
        $this->container['operations_visible'] = $operations_visible;

        return $this;
    }

    /**
     * Gets work_flow_name
     *
     * @return string
     */
    public function getWorkFlowName()
    {
        return $this->container['work_flow_name'];
    }

    /**
     * Sets work_flow_name
     *
     * @param string $work_flow_name Name of the workflow
     *
     * @return $this
     */
    public function setWorkFlowName($work_flow_name)
    {
        $this->container['work_flow_name'] = $work_flow_name;

        return $this;
    }

    /**
     * Gets work_flow_description
     *
     * @return string
     */
    public function getWorkFlowDescription()
    {
        return $this->container['work_flow_description'];
    }

    /**
     * Sets work_flow_description
     *
     * @param string $work_flow_description Description of the workflow
     *
     * @return $this
     */
    public function setWorkFlowDescription($work_flow_description)
    {
        $this->container['work_flow_description'] = $work_flow_description;

        return $this;
    }

    /**
     * Gets work_flow_details
     *
     * @return string
     */
    public function getWorkFlowDetails()
    {
        return $this->container['work_flow_details'];
    }

    /**
     * Sets work_flow_details
     *
     * @param string $work_flow_details Details of the workflow
     *
     * @return $this
     */
    public function setWorkFlowDetails($work_flow_details)
    {
        $this->container['work_flow_details'] = $work_flow_details;

        return $this;
    }

    /**
     * Gets work_flow_color
     *
     * @return int
     */
    public function getWorkFlowColor()
    {
        return $this->container['work_flow_color'];
    }

    /**
     * Sets work_flow_color
     *
     * @param int $work_flow_color The color of the workflow
     *
     * @return $this
     */
    public function setWorkFlowColor($work_flow_color)
    {
        $this->container['work_flow_color'] = $work_flow_color;

        return $this;
    }

    /**
     * Gets show_designer_visible
     *
     * @return bool
     */
    public function getShowDesignerVisible()
    {
        return $this->container['show_designer_visible'];
    }

    /**
     * Sets show_designer_visible
     *
     * @param bool $show_designer_visible Show designer command part visibility
     *
     * @return $this
     */
    public function setShowDesignerVisible($show_designer_visible)
    {
        $this->container['show_designer_visible'] = $show_designer_visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


