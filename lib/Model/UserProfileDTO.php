<?php
/**
 * UserProfileDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserProfileDTO Class Doc Comment
 *
 * @category Class
 * @description Class of user used to profiling
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserProfileDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserProfileDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'external_id' => 'string',
        'description' => 'string',
        'doc_number' => 'string',
        'type' => 'int',
        'contact_id' => 'int',
        'fax' => 'string',
        'address' => 'string',
        'postal_code' => 'string',
        'contact' => 'string',
        'job' => 'string',
        'locality' => 'string',
        'province' => 'string',
        'phone' => 'string',
        'mobile_phone' => 'string',
        'tel_name' => 'string',
        'fax_name' => 'string',
        'house' => 'string',
        'department' => 'string',
        'reference' => 'string',
        'office' => 'string',
        'vat' => 'string',
        'mail' => 'string',
        'priority' => 'string',
        'code' => 'string',
        'email' => 'string',
        'fiscal_code' => 'string',
        'nation' => 'string',
        'address_book_id' => 'int',
        'society' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'external_id' => null,
        'description' => null,
        'doc_number' => null,
        'type' => 'int32',
        'contact_id' => 'int32',
        'fax' => null,
        'address' => null,
        'postal_code' => null,
        'contact' => null,
        'job' => null,
        'locality' => null,
        'province' => null,
        'phone' => null,
        'mobile_phone' => null,
        'tel_name' => null,
        'fax_name' => null,
        'house' => null,
        'department' => null,
        'reference' => null,
        'office' => null,
        'vat' => null,
        'mail' => null,
        'priority' => null,
        'code' => null,
        'email' => null,
        'fiscal_code' => null,
        'nation' => null,
        'address_book_id' => 'int32',
        'society' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_id' => 'externalId',
        'description' => 'description',
        'doc_number' => 'docNumber',
        'type' => 'type',
        'contact_id' => 'contactId',
        'fax' => 'fax',
        'address' => 'address',
        'postal_code' => 'postalCode',
        'contact' => 'contact',
        'job' => 'job',
        'locality' => 'locality',
        'province' => 'province',
        'phone' => 'phone',
        'mobile_phone' => 'mobilePhone',
        'tel_name' => 'telName',
        'fax_name' => 'faxName',
        'house' => 'house',
        'department' => 'department',
        'reference' => 'reference',
        'office' => 'office',
        'vat' => 'vat',
        'mail' => 'mail',
        'priority' => 'priority',
        'code' => 'code',
        'email' => 'email',
        'fiscal_code' => 'fiscalCode',
        'nation' => 'nation',
        'address_book_id' => 'addressBookId',
        'society' => 'society'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'description' => 'setDescription',
        'doc_number' => 'setDocNumber',
        'type' => 'setType',
        'contact_id' => 'setContactId',
        'fax' => 'setFax',
        'address' => 'setAddress',
        'postal_code' => 'setPostalCode',
        'contact' => 'setContact',
        'job' => 'setJob',
        'locality' => 'setLocality',
        'province' => 'setProvince',
        'phone' => 'setPhone',
        'mobile_phone' => 'setMobilePhone',
        'tel_name' => 'setTelName',
        'fax_name' => 'setFaxName',
        'house' => 'setHouse',
        'department' => 'setDepartment',
        'reference' => 'setReference',
        'office' => 'setOffice',
        'vat' => 'setVat',
        'mail' => 'setMail',
        'priority' => 'setPriority',
        'code' => 'setCode',
        'email' => 'setEmail',
        'fiscal_code' => 'setFiscalCode',
        'nation' => 'setNation',
        'address_book_id' => 'setAddressBookId',
        'society' => 'setSociety'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'description' => 'getDescription',
        'doc_number' => 'getDocNumber',
        'type' => 'getType',
        'contact_id' => 'getContactId',
        'fax' => 'getFax',
        'address' => 'getAddress',
        'postal_code' => 'getPostalCode',
        'contact' => 'getContact',
        'job' => 'getJob',
        'locality' => 'getLocality',
        'province' => 'getProvince',
        'phone' => 'getPhone',
        'mobile_phone' => 'getMobilePhone',
        'tel_name' => 'getTelName',
        'fax_name' => 'getFaxName',
        'house' => 'getHouse',
        'department' => 'getDepartment',
        'reference' => 'getReference',
        'office' => 'getOffice',
        'vat' => 'getVat',
        'mail' => 'getMail',
        'priority' => 'getPriority',
        'code' => 'getCode',
        'email' => 'getEmail',
        'fiscal_code' => 'getFiscalCode',
        'nation' => 'getNation',
        'address_book_id' => 'getAddressBookId',
        'society' => 'getSociety'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['doc_number'] = isset($data['doc_number']) ? $data['doc_number'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['job'] = isset($data['job']) ? $data['job'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['tel_name'] = isset($data['tel_name']) ? $data['tel_name'] : null;
        $this->container['fax_name'] = isset($data['fax_name']) ? $data['fax_name'] : null;
        $this->container['house'] = isset($data['house']) ? $data['house'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['office'] = isset($data['office']) ? $data['office'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['mail'] = isset($data['mail']) ? $data['mail'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['fiscal_code'] = isset($data['fiscal_code']) ? $data['fiscal_code'] : null;
        $this->container['nation'] = isset($data['nation']) ? $data['nation'] : null;
        $this->container['address_book_id'] = isset($data['address_book_id']) ? $data['address_book_id'] : null;
        $this->container['society'] = isset($data['society']) ? $data['society'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id External Identifier
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets doc_number
     *
     * @return string
     */
    public function getDocNumber()
    {
        return $this->container['doc_number'];
    }

    /**
     * Sets doc_number
     *
     * @param string $doc_number Document Identifier
     *
     * @return $this
     */
    public function setDocNumber($doc_number)
    {
        $this->container['doc_number'] = $doc_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Possible values:  0: To  1: From  2: Cc  3: Senders
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id Contact Identifier
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax Fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal Code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string $contact Description
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets job
     *
     * @return string
     */
    public function getJob()
    {
        return $this->container['job'];
    }

    /**
     * Sets job
     *
     * @param string $job Job
     *
     * @return $this
     */
    public function setJob($job)
    {
        $this->container['job'] = $job;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string $locality Locality
     *
     * @return $this
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province Province
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Phone number
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone Mobile number
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets tel_name
     *
     * @return string
     */
    public function getTelName()
    {
        return $this->container['tel_name'];
    }

    /**
     * Sets tel_name
     *
     * @param string $tel_name Contact Phone number
     *
     * @return $this
     */
    public function setTelName($tel_name)
    {
        $this->container['tel_name'] = $tel_name;

        return $this;
    }

    /**
     * Gets fax_name
     *
     * @return string
     */
    public function getFaxName()
    {
        return $this->container['fax_name'];
    }

    /**
     * Sets fax_name
     *
     * @param string $fax_name Contact Fax
     *
     * @return $this
     */
    public function setFaxName($fax_name)
    {
        $this->container['fax_name'] = $fax_name;

        return $this;
    }

    /**
     * Gets house
     *
     * @return string
     */
    public function getHouse()
    {
        return $this->container['house'];
    }

    /**
     * Sets house
     *
     * @param string $house Contact House
     *
     * @return $this
     */
    public function setHouse($house)
    {
        $this->container['house'] = $house;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department Contact Department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets office
     *
     * @return string
     */
    public function getOffice()
    {
        return $this->container['office'];
    }

    /**
     * Sets office
     *
     * @param string $office Office
     *
     * @return $this
     */
    public function setOffice($office)
    {
        $this->container['office'] = $office;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string $vat Vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets mail
     *
     * @return string
     */
    public function getMail()
    {
        return $this->container['mail'];
    }

    /**
     * Sets mail
     *
     * @param string $mail Contact Email
     *
     * @return $this
     */
    public function setMail($mail)
    {
        $this->container['mail'] = $mail;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority Priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fiscal_code
     *
     * @return string
     */
    public function getFiscalCode()
    {
        return $this->container['fiscal_code'];
    }

    /**
     * Sets fiscal_code
     *
     * @param string $fiscal_code Fiscal Code
     *
     * @return $this
     */
    public function setFiscalCode($fiscal_code)
    {
        $this->container['fiscal_code'] = $fiscal_code;

        return $this;
    }

    /**
     * Gets nation
     *
     * @return string
     */
    public function getNation()
    {
        return $this->container['nation'];
    }

    /**
     * Sets nation
     *
     * @param string $nation Nation
     *
     * @return $this
     */
    public function setNation($nation)
    {
        $this->container['nation'] = $nation;

        return $this;
    }

    /**
     * Gets address_book_id
     *
     * @return int
     */
    public function getAddressBookId()
    {
        return $this->container['address_book_id'];
    }

    /**
     * Sets address_book_id
     *
     * @param int $address_book_id Address Book Identifier
     *
     * @return $this
     */
    public function setAddressBookId($address_book_id)
    {
        $this->container['address_book_id'] = $address_book_id;

        return $this;
    }

    /**
     * Gets society
     *
     * @return string
     */
    public function getSociety()
    {
        return $this->container['society'];
    }

    /**
     * Sets society
     *
     * @param string $society Society
     *
     * @return $this
     */
    public function setSociety($society)
    {
        $this->container['society'] = $society;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


