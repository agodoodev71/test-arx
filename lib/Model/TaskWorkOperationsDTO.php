<?php
/**
 * TaskWorkOperationsDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TaskWorkOperationsDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskWorkOperationsDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskWorkOperationsDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_work_commands_operations' => '\Swagger\Client\Model\TaskWorkCommandDTO[]',
        'task_work_variables_operation' => '\Swagger\Client\Model\TaskWorkVariableOperationDTO',
        'task_work_document_operations' => '\Swagger\Client\Model\TaskWorkDocumentOperationDTO[]',
        'task_work_professional_role_operations' => '\Swagger\Client\Model\ProfessionalRoleOperationsDTO',
        'task_work_operating_instructions' => 'string[]',
        'task_work_dynamic_job_operation' => '\Swagger\Client\Model\TaskWorkDynamicJobOperationsDTO',
        'task_work_sign_operations' => '\Swagger\Client\Model\TaskWorkSignOperationDTO[]',
        'can_re_assign_task' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_work_commands_operations' => null,
        'task_work_variables_operation' => null,
        'task_work_document_operations' => null,
        'task_work_professional_role_operations' => null,
        'task_work_operating_instructions' => null,
        'task_work_dynamic_job_operation' => null,
        'task_work_sign_operations' => null,
        'can_re_assign_task' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_work_commands_operations' => 'taskWorkCommandsOperations',
        'task_work_variables_operation' => 'taskWorkVariablesOperation',
        'task_work_document_operations' => 'taskWorkDocumentOperations',
        'task_work_professional_role_operations' => 'taskWorkProfessionalRoleOperations',
        'task_work_operating_instructions' => 'taskWorkOperatingInstructions',
        'task_work_dynamic_job_operation' => 'taskWorkDynamicJobOperation',
        'task_work_sign_operations' => 'taskWorkSignOperations',
        'can_re_assign_task' => 'canReAssignTask'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_work_commands_operations' => 'setTaskWorkCommandsOperations',
        'task_work_variables_operation' => 'setTaskWorkVariablesOperation',
        'task_work_document_operations' => 'setTaskWorkDocumentOperations',
        'task_work_professional_role_operations' => 'setTaskWorkProfessionalRoleOperations',
        'task_work_operating_instructions' => 'setTaskWorkOperatingInstructions',
        'task_work_dynamic_job_operation' => 'setTaskWorkDynamicJobOperation',
        'task_work_sign_operations' => 'setTaskWorkSignOperations',
        'can_re_assign_task' => 'setCanReAssignTask'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_work_commands_operations' => 'getTaskWorkCommandsOperations',
        'task_work_variables_operation' => 'getTaskWorkVariablesOperation',
        'task_work_document_operations' => 'getTaskWorkDocumentOperations',
        'task_work_professional_role_operations' => 'getTaskWorkProfessionalRoleOperations',
        'task_work_operating_instructions' => 'getTaskWorkOperatingInstructions',
        'task_work_dynamic_job_operation' => 'getTaskWorkDynamicJobOperation',
        'task_work_sign_operations' => 'getTaskWorkSignOperations',
        'can_re_assign_task' => 'getCanReAssignTask'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_work_commands_operations'] = isset($data['task_work_commands_operations']) ? $data['task_work_commands_operations'] : null;
        $this->container['task_work_variables_operation'] = isset($data['task_work_variables_operation']) ? $data['task_work_variables_operation'] : null;
        $this->container['task_work_document_operations'] = isset($data['task_work_document_operations']) ? $data['task_work_document_operations'] : null;
        $this->container['task_work_professional_role_operations'] = isset($data['task_work_professional_role_operations']) ? $data['task_work_professional_role_operations'] : null;
        $this->container['task_work_operating_instructions'] = isset($data['task_work_operating_instructions']) ? $data['task_work_operating_instructions'] : null;
        $this->container['task_work_dynamic_job_operation'] = isset($data['task_work_dynamic_job_operation']) ? $data['task_work_dynamic_job_operation'] : null;
        $this->container['task_work_sign_operations'] = isset($data['task_work_sign_operations']) ? $data['task_work_sign_operations'] : null;
        $this->container['can_re_assign_task'] = isset($data['can_re_assign_task']) ? $data['can_re_assign_task'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets task_work_commands_operations
     *
     * @return \Swagger\Client\Model\TaskWorkCommandDTO[]
     */
    public function getTaskWorkCommandsOperations()
    {
        return $this->container['task_work_commands_operations'];
    }

    /**
     * Sets task_work_commands_operations
     *
     * @param \Swagger\Client\Model\TaskWorkCommandDTO[] $task_work_commands_operations TaskWork commands
     *
     * @return $this
     */
    public function setTaskWorkCommandsOperations($task_work_commands_operations)
    {
        $this->container['task_work_commands_operations'] = $task_work_commands_operations;

        return $this;
    }

    /**
     * Gets task_work_variables_operation
     *
     * @return \Swagger\Client\Model\TaskWorkVariableOperationDTO
     */
    public function getTaskWorkVariablesOperation()
    {
        return $this->container['task_work_variables_operation'];
    }

    /**
     * Sets task_work_variables_operation
     *
     * @param \Swagger\Client\Model\TaskWorkVariableOperationDTO $task_work_variables_operation Process variables to set
     *
     * @return $this
     */
    public function setTaskWorkVariablesOperation($task_work_variables_operation)
    {
        $this->container['task_work_variables_operation'] = $task_work_variables_operation;

        return $this;
    }

    /**
     * Gets task_work_document_operations
     *
     * @return \Swagger\Client\Model\TaskWorkDocumentOperationDTO[]
     */
    public function getTaskWorkDocumentOperations()
    {
        return $this->container['task_work_document_operations'];
    }

    /**
     * Sets task_work_document_operations
     *
     * @param \Swagger\Client\Model\TaskWorkDocumentOperationDTO[] $task_work_document_operations Document operations
     *
     * @return $this
     */
    public function setTaskWorkDocumentOperations($task_work_document_operations)
    {
        $this->container['task_work_document_operations'] = $task_work_document_operations;

        return $this;
    }

    /**
     * Gets task_work_professional_role_operations
     *
     * @return \Swagger\Client\Model\ProfessionalRoleOperationsDTO
     */
    public function getTaskWorkProfessionalRoleOperations()
    {
        return $this->container['task_work_professional_role_operations'];
    }

    /**
     * Sets task_work_professional_role_operations
     *
     * @param \Swagger\Client\Model\ProfessionalRoleOperationsDTO $task_work_professional_role_operations Professional roles
     *
     * @return $this
     */
    public function setTaskWorkProfessionalRoleOperations($task_work_professional_role_operations)
    {
        $this->container['task_work_professional_role_operations'] = $task_work_professional_role_operations;

        return $this;
    }

    /**
     * Gets task_work_operating_instructions
     *
     * @return string[]
     */
    public function getTaskWorkOperatingInstructions()
    {
        return $this->container['task_work_operating_instructions'];
    }

    /**
     * Sets task_work_operating_instructions
     *
     * @param string[] $task_work_operating_instructions Operating Instruction
     *
     * @return $this
     */
    public function setTaskWorkOperatingInstructions($task_work_operating_instructions)
    {
        $this->container['task_work_operating_instructions'] = $task_work_operating_instructions;

        return $this;
    }

    /**
     * Gets task_work_dynamic_job_operation
     *
     * @return \Swagger\Client\Model\TaskWorkDynamicJobOperationsDTO
     */
    public function getTaskWorkDynamicJobOperation()
    {
        return $this->container['task_work_dynamic_job_operation'];
    }

    /**
     * Sets task_work_dynamic_job_operation
     *
     * @param \Swagger\Client\Model\TaskWorkDynamicJobOperationsDTO $task_work_dynamic_job_operation Dynamic jobs
     *
     * @return $this
     */
    public function setTaskWorkDynamicJobOperation($task_work_dynamic_job_operation)
    {
        $this->container['task_work_dynamic_job_operation'] = $task_work_dynamic_job_operation;

        return $this;
    }

    /**
     * Gets task_work_sign_operations
     *
     * @return \Swagger\Client\Model\TaskWorkSignOperationDTO[]
     */
    public function getTaskWorkSignOperations()
    {
        return $this->container['task_work_sign_operations'];
    }

    /**
     * Sets task_work_sign_operations
     *
     * @param \Swagger\Client\Model\TaskWorkSignOperationDTO[] $task_work_sign_operations Sign operations
     *
     * @return $this
     */
    public function setTaskWorkSignOperations($task_work_sign_operations)
    {
        $this->container['task_work_sign_operations'] = $task_work_sign_operations;

        return $this;
    }

    /**
     * Gets can_re_assign_task
     *
     * @return bool
     */
    public function getCanReAssignTask()
    {
        return $this->container['can_re_assign_task'];
    }

    /**
     * Sets can_re_assign_task
     *
     * @param bool $can_re_assign_task Reassign task opertiona
     *
     * @return $this
     */
    public function setCanReAssignTask($can_re_assign_task)
    {
        $this->container['can_re_assign_task'] = $can_re_assign_task;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


