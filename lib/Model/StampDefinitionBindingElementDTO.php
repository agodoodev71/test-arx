<?php
/**
 * StampDefinitionBindingElementDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StampDefinitionBindingElementDTO Class Doc Comment
 *
 * @category Class
 * @description Object that define a binding configuration for a stamp.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StampDefinitionBindingElementDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StampDefinitionBindingElementDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'id_element' => 'string',
        'element_property' => 'string',
        'binding_description' => 'string',
        'field_binding' => 'string',
        'default_value' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'id_element' => null,
        'element_property' => null,
        'binding_description' => null,
        'field_binding' => null,
        'default_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'id_element' => 'idElement',
        'element_property' => 'elementProperty',
        'binding_description' => 'bindingDescription',
        'field_binding' => 'fieldBinding',
        'default_value' => 'defaultValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'id_element' => 'setIdElement',
        'element_property' => 'setElementProperty',
        'binding_description' => 'setBindingDescription',
        'field_binding' => 'setFieldBinding',
        'default_value' => 'setDefaultValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'id_element' => 'getIdElement',
        'element_property' => 'getElementProperty',
        'binding_description' => 'getBindingDescription',
        'field_binding' => 'getFieldBinding',
        'default_value' => 'getDefaultValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['id_element'] = isset($data['id_element']) ? $data['id_element'] : null;
        $this->container['element_property'] = isset($data['element_property']) ? $data['element_property'] : null;
        $this->container['binding_description'] = isset($data['binding_description']) ? $data['binding_description'] : null;
        $this->container['field_binding'] = isset($data['field_binding']) ? $data['field_binding'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id of binding definition.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id_element
     *
     * @return string
     */
    public function getIdElement()
    {
        return $this->container['id_element'];
    }

    /**
     * Sets id_element
     *
     * @param string $id_element Element Id.
     *
     * @return $this
     */
    public function setIdElement($id_element)
    {
        $this->container['id_element'] = $id_element;

        return $this;
    }

    /**
     * Gets element_property
     *
     * @return string
     */
    public function getElementProperty()
    {
        return $this->container['element_property'];
    }

    /**
     * Sets element_property
     *
     * @param string $element_property Property name.
     *
     * @return $this
     */
    public function setElementProperty($element_property)
    {
        $this->container['element_property'] = $element_property;

        return $this;
    }

    /**
     * Gets binding_description
     *
     * @return string
     */
    public function getBindingDescription()
    {
        return $this->container['binding_description'];
    }

    /**
     * Sets binding_description
     *
     * @param string $binding_description Description for binding.
     *
     * @return $this
     */
    public function setBindingDescription($binding_description)
    {
        $this->container['binding_description'] = $binding_description;

        return $this;
    }

    /**
     * Gets field_binding
     *
     * @return string
     */
    public function getFieldBinding()
    {
        return $this->container['field_binding'];
    }

    /**
     * Sets field_binding
     *
     * @param string $field_binding Binding field for association.
     *
     * @return $this
     */
    public function setFieldBinding($field_binding)
    {
        $this->container['field_binding'] = $field_binding;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return object
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param object $default_value Default value.
     *
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


