<?php
/**
 * DocumentTicketsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DocumentTicketsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentTicketsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation documentTicketsGetDocumentByRevisionId
     *
     * This call returns the ticket for downloading a document associated to a specified revision
     *
     * @param  int $revision_id Identifier of revision (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function documentTicketsGetDocumentByRevisionId($revision_id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetDocumentByRevisionIdWithHttpInfo($revision_id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetDocumentByRevisionIdWithHttpInfo
     *
     * This call returns the ticket for downloading a document associated to a specified revision
     *
     * @param  int $revision_id Identifier of revision (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetDocumentByRevisionIdWithHttpInfo($revision_id, $for_view = null)
    {
        $returnType = 'string';
        $request = $this->documentTicketsGetDocumentByRevisionIdRequest($revision_id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetDocumentByRevisionIdAsync
     *
     * This call returns the ticket for downloading a document associated to a specified revision
     *
     * @param  int $revision_id Identifier of revision (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetDocumentByRevisionIdAsync($revision_id, $for_view = null)
    {
        return $this->documentTicketsGetDocumentByRevisionIdAsyncWithHttpInfo($revision_id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetDocumentByRevisionIdAsyncWithHttpInfo
     *
     * This call returns the ticket for downloading a document associated to a specified revision
     *
     * @param  int $revision_id Identifier of revision (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetDocumentByRevisionIdAsyncWithHttpInfo($revision_id, $for_view = null)
    {
        $returnType = 'string';
        $request = $this->documentTicketsGetDocumentByRevisionIdRequest($revision_id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetDocumentByRevisionId'
     *
     * @param  int $revision_id Identifier of revision (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetDocumentByRevisionIdRequest($revision_id, $for_view = null)
    {
        // verify the required parameter 'revision_id' is set
        if ($revision_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revision_id when calling documentTicketsGetDocumentByRevisionId'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticketByRevision/{revisionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($revision_id !== null) {
            $resourcePath = str_replace(
                '{' . 'revisionId' . '}',
                ObjectSerializer::toPathValue($revision_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentTicketsGetForExternalAttachment
     *
     * This call retrieve a ticket for downloading a file for an external profile attachment
     *
     * @param  int $id Identifier of attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function documentTicketsGetForExternalAttachment($id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetForExternalAttachmentWithHttpInfo($id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetForExternalAttachmentWithHttpInfo
     *
     * This call retrieve a ticket for downloading a file for an external profile attachment
     *
     * @param  int $id Identifier of attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetForExternalAttachmentWithHttpInfo($id, $for_view = null)
    {
        $returnType = 'string';
        $request = $this->documentTicketsGetForExternalAttachmentRequest($id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetForExternalAttachmentAsync
     *
     * This call retrieve a ticket for downloading a file for an external profile attachment
     *
     * @param  int $id Identifier of attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForExternalAttachmentAsync($id, $for_view = null)
    {
        return $this->documentTicketsGetForExternalAttachmentAsyncWithHttpInfo($id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetForExternalAttachmentAsyncWithHttpInfo
     *
     * This call retrieve a ticket for downloading a file for an external profile attachment
     *
     * @param  int $id Identifier of attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForExternalAttachmentAsyncWithHttpInfo($id, $for_view = null)
    {
        $returnType = 'string';
        $request = $this->documentTicketsGetForExternalAttachmentRequest($id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetForExternalAttachment'
     *
     * @param  int $id Identifier of attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetForExternalAttachmentRequest($id, $for_view = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentTicketsGetForExternalAttachment'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticketProfileAttachment/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentTicketsGetForProcessAttachement
     *
     * This call returns the ticket for downloading a file associated with the attachment into in a process workflow
     *
     * @param  int $attachementid Identifier of attachment (required)
     * @param  int $process_id Identifier of process (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function documentTicketsGetForProcessAttachement($attachementid, $process_id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetForProcessAttachementWithHttpInfo($attachementid, $process_id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetForProcessAttachementWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with the attachment into in a process workflow
     *
     * @param  int $attachementid Identifier of attachment (required)
     * @param  int $process_id Identifier of process (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetForProcessAttachementWithHttpInfo($attachementid, $process_id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForProcessAttachementRequest($attachementid, $process_id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetForProcessAttachementAsync
     *
     * This call returns the ticket for downloading a file associated with the attachment into in a process workflow
     *
     * @param  int $attachementid Identifier of attachment (required)
     * @param  int $process_id Identifier of process (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForProcessAttachementAsync($attachementid, $process_id, $for_view = null)
    {
        return $this->documentTicketsGetForProcessAttachementAsyncWithHttpInfo($attachementid, $process_id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetForProcessAttachementAsyncWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with the attachment into in a process workflow
     *
     * @param  int $attachementid Identifier of attachment (required)
     * @param  int $process_id Identifier of process (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForProcessAttachementAsyncWithHttpInfo($attachementid, $process_id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForProcessAttachementRequest($attachementid, $process_id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetForProcessAttachement'
     *
     * @param  int $attachementid Identifier of attachment (required)
     * @param  int $process_id Identifier of process (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetForProcessAttachementRequest($attachementid, $process_id, $for_view = null)
    {
        // verify the required parameter 'attachementid' is set
        if ($attachementid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachementid when calling documentTicketsGetForProcessAttachement'
            );
        }
        // verify the required parameter 'process_id' is set
        if ($process_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_id when calling documentTicketsGetForProcessAttachement'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticketProcessattachments/{processId}/{attachementid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($attachementid !== null) {
            $resourcePath = str_replace(
                '{' . 'attachementid' . '}',
                ObjectSerializer::toPathValue($attachementid),
                $resourcePath
            );
        }
        // path params
        if ($process_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($process_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentTicketsGetForProcessDocument
     *
     * This call returns the ticket for downloading a file associated with the document process into in a process workflow
     *
     * @param  int $processdocid Identifier of document process (required)
     * @param  int $process_id Identifier of process workflow (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function documentTicketsGetForProcessDocument($processdocid, $process_id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetForProcessDocumentWithHttpInfo($processdocid, $process_id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetForProcessDocumentWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with the document process into in a process workflow
     *
     * @param  int $processdocid Identifier of document process (required)
     * @param  int $process_id Identifier of process workflow (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetForProcessDocumentWithHttpInfo($processdocid, $process_id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForProcessDocumentRequest($processdocid, $process_id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetForProcessDocumentAsync
     *
     * This call returns the ticket for downloading a file associated with the document process into in a process workflow
     *
     * @param  int $processdocid Identifier of document process (required)
     * @param  int $process_id Identifier of process workflow (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForProcessDocumentAsync($processdocid, $process_id, $for_view = null)
    {
        return $this->documentTicketsGetForProcessDocumentAsyncWithHttpInfo($processdocid, $process_id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetForProcessDocumentAsyncWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with the document process into in a process workflow
     *
     * @param  int $processdocid Identifier of document process (required)
     * @param  int $process_id Identifier of process workflow (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForProcessDocumentAsyncWithHttpInfo($processdocid, $process_id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForProcessDocumentRequest($processdocid, $process_id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetForProcessDocument'
     *
     * @param  int $processdocid Identifier of document process (required)
     * @param  int $process_id Identifier of process workflow (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetForProcessDocumentRequest($processdocid, $process_id, $for_view = null)
    {
        // verify the required parameter 'processdocid' is set
        if ($processdocid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processdocid when calling documentTicketsGetForProcessDocument'
            );
        }
        // verify the required parameter 'process_id' is set
        if ($process_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_id when calling documentTicketsGetForProcessDocument'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticketProcessdocument/{processId}/{processdocid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($processdocid !== null) {
            $resourcePath = str_replace(
                '{' . 'processdocid' . '}',
                ObjectSerializer::toPathValue($processdocid),
                $resourcePath
            );
        }
        // path params
        if ($process_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($process_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentTicketsGetForProfile
     *
     * This call returns the ticket for downloading a file associated with a specified profile
     *
     * @param  int $id Document Identifier (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function documentTicketsGetForProfile($id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetForProfileWithHttpInfo($id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetForProfileWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with a specified profile
     *
     * @param  int $id Document Identifier (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetForProfileWithHttpInfo($id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForProfileRequest($id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetForProfileAsync
     *
     * This call returns the ticket for downloading a file associated with a specified profile
     *
     * @param  int $id Document Identifier (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForProfileAsync($id, $for_view = null)
    {
        return $this->documentTicketsGetForProfileAsyncWithHttpInfo($id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetForProfileAsyncWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with a specified profile
     *
     * @param  int $id Document Identifier (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForProfileAsyncWithHttpInfo($id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForProfileRequest($id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetForProfile'
     *
     * @param  int $id Document Identifier (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetForProfileRequest($id, $for_view = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentTicketsGetForProfile'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticket/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentTicketsGetForTask
     *
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function documentTicketsGetForTask($process_doc_id, $task_work_id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetForTaskWithHttpInfo($process_doc_id, $task_work_id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetForTaskWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetForTaskWithHttpInfo($process_doc_id, $task_work_id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForTaskRequest($process_doc_id, $task_work_id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetForTaskAsync
     *
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForTaskAsync($process_doc_id, $task_work_id, $for_view = null)
    {
        return $this->documentTicketsGetForTaskAsyncWithHttpInfo($process_doc_id, $task_work_id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetForTaskAsyncWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForTaskAsyncWithHttpInfo($process_doc_id, $task_work_id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForTaskRequest($process_doc_id, $task_work_id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetForTask'
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetForTaskRequest($process_doc_id, $task_work_id, $for_view = null)
    {
        // verify the required parameter 'process_doc_id' is set
        if ($process_doc_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_doc_id when calling documentTicketsGetForTask'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling documentTicketsGetForTask'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticketForTask/{processDocId}/{taskWorkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($process_doc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDocId' . '}',
                ObjectSerializer::toPathValue($process_doc_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentTicketsGetForTaskAttachement
     *
     * This call returns the ticket for downloading a file associated with the task attachment
     *
     * @param  int $id Identifier of task attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function documentTicketsGetForTaskAttachement($id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetForTaskAttachementWithHttpInfo($id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetForTaskAttachementWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with the task attachment
     *
     * @param  int $id Identifier of task attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetForTaskAttachementWithHttpInfo($id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForTaskAttachementRequest($id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetForTaskAttachementAsync
     *
     * This call returns the ticket for downloading a file associated with the task attachment
     *
     * @param  int $id Identifier of task attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForTaskAttachementAsync($id, $for_view = null)
    {
        return $this->documentTicketsGetForTaskAttachementAsyncWithHttpInfo($id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetForTaskAttachementAsyncWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with the task attachment
     *
     * @param  int $id Identifier of task attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForTaskAttachementAsyncWithHttpInfo($id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForTaskAttachementRequest($id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetForTaskAttachement'
     *
     * @param  int $id Identifier of task attachment (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetForTaskAttachementRequest($id, $for_view = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentTicketsGetForTaskAttachement'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticketTaskattachments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentTicketsGetForTaskReadOnly
     *
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function documentTicketsGetForTaskReadOnly($process_doc_id, $task_work_id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetForTaskReadOnlyWithHttpInfo($process_doc_id, $task_work_id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetForTaskReadOnlyWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetForTaskReadOnlyWithHttpInfo($process_doc_id, $task_work_id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForTaskReadOnlyRequest($process_doc_id, $task_work_id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetForTaskReadOnlyAsync
     *
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForTaskReadOnlyAsync($process_doc_id, $task_work_id, $for_view = null)
    {
        return $this->documentTicketsGetForTaskReadOnlyAsyncWithHttpInfo($process_doc_id, $task_work_id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetForTaskReadOnlyAsyncWithHttpInfo
     *
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetForTaskReadOnlyAsyncWithHttpInfo($process_doc_id, $task_work_id, $for_view = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->documentTicketsGetForTaskReadOnlyRequest($process_doc_id, $task_work_id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetForTaskReadOnly'
     *
     * @param  int $process_doc_id Identifier of document process (required)
     * @param  int $task_work_id Identifier of taskwork (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetForTaskReadOnlyRequest($process_doc_id, $task_work_id, $for_view = null)
    {
        // verify the required parameter 'process_doc_id' is set
        if ($process_doc_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_doc_id when calling documentTicketsGetForTaskReadOnly'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling documentTicketsGetForTaskReadOnly'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticketForTaskReadOnly/{processDocId}/{taskWorkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($process_doc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDocId' . '}',
                ObjectSerializer::toPathValue($process_doc_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentTicketsGetRevisionDocumentById
     *
     * This call retrieve the ticket for downloading an attachemnt file by its revision
     *
     * @param  int $attachment_id Identifier of attachment (required)
     * @param  int $revision_id Revision Number (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function documentTicketsGetRevisionDocumentById($attachment_id, $revision_id, $for_view = null)
    {
        list($response) = $this->documentTicketsGetRevisionDocumentByIdWithHttpInfo($attachment_id, $revision_id, $for_view);
        return $response;
    }

    /**
     * Operation documentTicketsGetRevisionDocumentByIdWithHttpInfo
     *
     * This call retrieve the ticket for downloading an attachemnt file by its revision
     *
     * @param  int $attachment_id Identifier of attachment (required)
     * @param  int $revision_id Revision Number (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentTicketsGetRevisionDocumentByIdWithHttpInfo($attachment_id, $revision_id, $for_view = null)
    {
        $returnType = 'string';
        $request = $this->documentTicketsGetRevisionDocumentByIdRequest($attachment_id, $revision_id, $for_view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentTicketsGetRevisionDocumentByIdAsync
     *
     * This call retrieve the ticket for downloading an attachemnt file by its revision
     *
     * @param  int $attachment_id Identifier of attachment (required)
     * @param  int $revision_id Revision Number (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetRevisionDocumentByIdAsync($attachment_id, $revision_id, $for_view = null)
    {
        return $this->documentTicketsGetRevisionDocumentByIdAsyncWithHttpInfo($attachment_id, $revision_id, $for_view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentTicketsGetRevisionDocumentByIdAsyncWithHttpInfo
     *
     * This call retrieve the ticket for downloading an attachemnt file by its revision
     *
     * @param  int $attachment_id Identifier of attachment (required)
     * @param  int $revision_id Revision Number (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentTicketsGetRevisionDocumentByIdAsyncWithHttpInfo($attachment_id, $revision_id, $for_view = null)
    {
        $returnType = 'string';
        $request = $this->documentTicketsGetRevisionDocumentByIdRequest($attachment_id, $revision_id, $for_view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentTicketsGetRevisionDocumentById'
     *
     * @param  int $attachment_id Identifier of attachment (required)
     * @param  int $revision_id Revision Number (required)
     * @param  bool $for_view Cryptographic envelope removed and stylesheet applied if available (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function documentTicketsGetRevisionDocumentByIdRequest($attachment_id, $revision_id, $for_view = null)
    {
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling documentTicketsGetRevisionDocumentById'
            );
        }
        // verify the required parameter 'revision_id' is set
        if ($revision_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revision_id when calling documentTicketsGetRevisionDocumentById'
            );
        }

        $resourcePath = '/api/DocumentTickets/ticketProfileAttachment/{attachmentId}/revisions/{revisionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($for_view !== null) {
            $queryParams['forView'] = ObjectSerializer::toQueryValue($for_view);
        }

        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }
        // path params
        if ($revision_id !== null) {
            $resourcePath = str_replace(
                '{' . 'revisionId' . '}',
                ObjectSerializer::toPathValue($revision_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
