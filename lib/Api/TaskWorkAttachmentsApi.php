<?php
/**
 * TaskWorkAttachmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TaskWorkAttachmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskWorkAttachmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation taskWorkAttachmentsAddNewExternalAttachments
     *
     * This call adds a new external attachment to a process
     *
     * @param  string $buffer_id Identifier of the buffer file (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkAttachmentsAddNewExternalAttachments($buffer_id, $task_work_id)
    {
        $this->taskWorkAttachmentsAddNewExternalAttachmentsWithHttpInfo($buffer_id, $task_work_id);
    }

    /**
     * Operation taskWorkAttachmentsAddNewExternalAttachmentsWithHttpInfo
     *
     * This call adds a new external attachment to a process
     *
     * @param  string $buffer_id Identifier of the buffer file (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkAttachmentsAddNewExternalAttachmentsWithHttpInfo($buffer_id, $task_work_id)
    {
        $returnType = '';
        $request = $this->taskWorkAttachmentsAddNewExternalAttachmentsRequest($buffer_id, $task_work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkAttachmentsAddNewExternalAttachmentsAsync
     *
     * This call adds a new external attachment to a process
     *
     * @param  string $buffer_id Identifier of the buffer file (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsAddNewExternalAttachmentsAsync($buffer_id, $task_work_id)
    {
        return $this->taskWorkAttachmentsAddNewExternalAttachmentsAsyncWithHttpInfo($buffer_id, $task_work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkAttachmentsAddNewExternalAttachmentsAsyncWithHttpInfo
     *
     * This call adds a new external attachment to a process
     *
     * @param  string $buffer_id Identifier of the buffer file (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsAddNewExternalAttachmentsAsyncWithHttpInfo($buffer_id, $task_work_id)
    {
        $returnType = '';
        $request = $this->taskWorkAttachmentsAddNewExternalAttachmentsRequest($buffer_id, $task_work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkAttachmentsAddNewExternalAttachments'
     *
     * @param  string $buffer_id Identifier of the buffer file (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkAttachmentsAddNewExternalAttachmentsRequest($buffer_id, $task_work_id)
    {
        // verify the required parameter 'buffer_id' is set
        if ($buffer_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buffer_id when calling taskWorkAttachmentsAddNewExternalAttachments'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkAttachmentsAddNewExternalAttachments'
            );
        }

        $resourcePath = '/api/TaskAttachments/bytaskwork/{taskWorkId}/external/{bufferId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($buffer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bufferId' . '}',
                ObjectSerializer::toPathValue($buffer_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkAttachmentsAddNewInternalAttachments
     *
     * This call adds a new internal attachments to a process
     *
     * @param  int $docnumber Document identifier (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkAttachmentsAddNewInternalAttachments($docnumber, $task_work_id)
    {
        $this->taskWorkAttachmentsAddNewInternalAttachmentsWithHttpInfo($docnumber, $task_work_id);
    }

    /**
     * Operation taskWorkAttachmentsAddNewInternalAttachmentsWithHttpInfo
     *
     * This call adds a new internal attachments to a process
     *
     * @param  int $docnumber Document identifier (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkAttachmentsAddNewInternalAttachmentsWithHttpInfo($docnumber, $task_work_id)
    {
        $returnType = '';
        $request = $this->taskWorkAttachmentsAddNewInternalAttachmentsRequest($docnumber, $task_work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkAttachmentsAddNewInternalAttachmentsAsync
     *
     * This call adds a new internal attachments to a process
     *
     * @param  int $docnumber Document identifier (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsAddNewInternalAttachmentsAsync($docnumber, $task_work_id)
    {
        return $this->taskWorkAttachmentsAddNewInternalAttachmentsAsyncWithHttpInfo($docnumber, $task_work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkAttachmentsAddNewInternalAttachmentsAsyncWithHttpInfo
     *
     * This call adds a new internal attachments to a process
     *
     * @param  int $docnumber Document identifier (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsAddNewInternalAttachmentsAsyncWithHttpInfo($docnumber, $task_work_id)
    {
        $returnType = '';
        $request = $this->taskWorkAttachmentsAddNewInternalAttachmentsRequest($docnumber, $task_work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkAttachmentsAddNewInternalAttachments'
     *
     * @param  int $docnumber Document identifier (required)
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkAttachmentsAddNewInternalAttachmentsRequest($docnumber, $task_work_id)
    {
        // verify the required parameter 'docnumber' is set
        if ($docnumber === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docnumber when calling taskWorkAttachmentsAddNewInternalAttachments'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkAttachmentsAddNewInternalAttachments'
            );
        }

        $resourcePath = '/api/TaskAttachments/bytaskwork/{taskWorkId}/internal/{docnumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($docnumber !== null) {
            $resourcePath = str_replace(
                '{' . 'docnumber' . '}',
                ObjectSerializer::toPathValue($docnumber),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkAttachmentsChangeToSendForTaskAttachments
     *
     * this call changes the value of the 'to send' flag for an attachment
     *
     * @param  int $attachment_id Attachment identifier (required)
     * @param  bool $tosend Value of &#39;to send&#39; flag (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkAttachmentsChangeToSendForTaskAttachments($attachment_id, $tosend)
    {
        $this->taskWorkAttachmentsChangeToSendForTaskAttachmentsWithHttpInfo($attachment_id, $tosend);
    }

    /**
     * Operation taskWorkAttachmentsChangeToSendForTaskAttachmentsWithHttpInfo
     *
     * this call changes the value of the 'to send' flag for an attachment
     *
     * @param  int $attachment_id Attachment identifier (required)
     * @param  bool $tosend Value of &#39;to send&#39; flag (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkAttachmentsChangeToSendForTaskAttachmentsWithHttpInfo($attachment_id, $tosend)
    {
        $returnType = '';
        $request = $this->taskWorkAttachmentsChangeToSendForTaskAttachmentsRequest($attachment_id, $tosend);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkAttachmentsChangeToSendForTaskAttachmentsAsync
     *
     * this call changes the value of the 'to send' flag for an attachment
     *
     * @param  int $attachment_id Attachment identifier (required)
     * @param  bool $tosend Value of &#39;to send&#39; flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsChangeToSendForTaskAttachmentsAsync($attachment_id, $tosend)
    {
        return $this->taskWorkAttachmentsChangeToSendForTaskAttachmentsAsyncWithHttpInfo($attachment_id, $tosend)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkAttachmentsChangeToSendForTaskAttachmentsAsyncWithHttpInfo
     *
     * this call changes the value of the 'to send' flag for an attachment
     *
     * @param  int $attachment_id Attachment identifier (required)
     * @param  bool $tosend Value of &#39;to send&#39; flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsChangeToSendForTaskAttachmentsAsyncWithHttpInfo($attachment_id, $tosend)
    {
        $returnType = '';
        $request = $this->taskWorkAttachmentsChangeToSendForTaskAttachmentsRequest($attachment_id, $tosend);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkAttachmentsChangeToSendForTaskAttachments'
     *
     * @param  int $attachment_id Attachment identifier (required)
     * @param  bool $tosend Value of &#39;to send&#39; flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkAttachmentsChangeToSendForTaskAttachmentsRequest($attachment_id, $tosend)
    {
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling taskWorkAttachmentsChangeToSendForTaskAttachments'
            );
        }
        // verify the required parameter 'tosend' is set
        if ($tosend === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tosend when calling taskWorkAttachmentsChangeToSendForTaskAttachments'
            );
        }

        $resourcePath = '/api/TaskAttachments/{attachmentId}/tosend/{tosend}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }
        // path params
        if ($tosend !== null) {
            $resourcePath = str_replace(
                '{' . 'tosend' . '}',
                ObjectSerializer::toPathValue($tosend),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkAttachmentsDeleteTaskAttachementById
     *
     * This call deletes a process attachment
     *
     * @param  int $attachment_id Attachment identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkAttachmentsDeleteTaskAttachementById($attachment_id)
    {
        $this->taskWorkAttachmentsDeleteTaskAttachementByIdWithHttpInfo($attachment_id);
    }

    /**
     * Operation taskWorkAttachmentsDeleteTaskAttachementByIdWithHttpInfo
     *
     * This call deletes a process attachment
     *
     * @param  int $attachment_id Attachment identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkAttachmentsDeleteTaskAttachementByIdWithHttpInfo($attachment_id)
    {
        $returnType = '';
        $request = $this->taskWorkAttachmentsDeleteTaskAttachementByIdRequest($attachment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkAttachmentsDeleteTaskAttachementByIdAsync
     *
     * This call deletes a process attachment
     *
     * @param  int $attachment_id Attachment identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsDeleteTaskAttachementByIdAsync($attachment_id)
    {
        return $this->taskWorkAttachmentsDeleteTaskAttachementByIdAsyncWithHttpInfo($attachment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkAttachmentsDeleteTaskAttachementByIdAsyncWithHttpInfo
     *
     * This call deletes a process attachment
     *
     * @param  int $attachment_id Attachment identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsDeleteTaskAttachementByIdAsyncWithHttpInfo($attachment_id)
    {
        $returnType = '';
        $request = $this->taskWorkAttachmentsDeleteTaskAttachementByIdRequest($attachment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkAttachmentsDeleteTaskAttachementById'
     *
     * @param  int $attachment_id Attachment identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkAttachmentsDeleteTaskAttachementByIdRequest($attachment_id)
    {
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling taskWorkAttachmentsDeleteTaskAttachementById'
            );
        }

        $resourcePath = '/api/TaskAttachments/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkAttachmentsGetAttachmentsByProcessId
     *
     * This call returns all attachments of a process
     *
     * @param  int $process_id Process identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RowSearchResult[]
     */
    public function taskWorkAttachmentsGetAttachmentsByProcessId($process_id)
    {
        list($response) = $this->taskWorkAttachmentsGetAttachmentsByProcessIdWithHttpInfo($process_id);
        return $response;
    }

    /**
     * Operation taskWorkAttachmentsGetAttachmentsByProcessIdWithHttpInfo
     *
     * This call returns all attachments of a process
     *
     * @param  int $process_id Process identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RowSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkAttachmentsGetAttachmentsByProcessIdWithHttpInfo($process_id)
    {
        $returnType = '\Swagger\Client\Model\RowSearchResult[]';
        $request = $this->taskWorkAttachmentsGetAttachmentsByProcessIdRequest($process_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RowSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkAttachmentsGetAttachmentsByProcessIdAsync
     *
     * This call returns all attachments of a process
     *
     * @param  int $process_id Process identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsGetAttachmentsByProcessIdAsync($process_id)
    {
        return $this->taskWorkAttachmentsGetAttachmentsByProcessIdAsyncWithHttpInfo($process_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkAttachmentsGetAttachmentsByProcessIdAsyncWithHttpInfo
     *
     * This call returns all attachments of a process
     *
     * @param  int $process_id Process identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkAttachmentsGetAttachmentsByProcessIdAsyncWithHttpInfo($process_id)
    {
        $returnType = '\Swagger\Client\Model\RowSearchResult[]';
        $request = $this->taskWorkAttachmentsGetAttachmentsByProcessIdRequest($process_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkAttachmentsGetAttachmentsByProcessId'
     *
     * @param  int $process_id Process identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkAttachmentsGetAttachmentsByProcessIdRequest($process_id)
    {
        // verify the required parameter 'process_id' is set
        if ($process_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_id when calling taskWorkAttachmentsGetAttachmentsByProcessId'
            );
        }

        $resourcePath = '/api/TaskAttachments/byprocessid/{processId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($process_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
