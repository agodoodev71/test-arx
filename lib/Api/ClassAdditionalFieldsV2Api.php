<?php
/**
 * ClassAdditionalFieldsV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ClassAdditionalFieldsV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClassAdditionalFieldsV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation classAdditionalFieldsV2AdditionalFieldClassComposeValues
     *
     * This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type Document type of first level (required)
     * @param  int $tipo2 Document type of second level (required)
     * @param  int $tipo3 Document type of third level (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function classAdditionalFieldsV2AdditionalFieldClassComposeValues($field_name, $document_type, $tipo2, $tipo3, $doc_numbers)
    {
        list($response) = $this->classAdditionalFieldsV2AdditionalFieldClassComposeValuesWithHttpInfo($field_name, $document_type, $tipo2, $tipo3, $doc_numbers);
        return $response;
    }

    /**
     * Operation classAdditionalFieldsV2AdditionalFieldClassComposeValuesWithHttpInfo
     *
     * This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type Document type of first level (required)
     * @param  int $tipo2 Document type of second level (required)
     * @param  int $tipo3 Document type of third level (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function classAdditionalFieldsV2AdditionalFieldClassComposeValuesWithHttpInfo($field_name, $document_type, $tipo2, $tipo3, $doc_numbers)
    {
        $returnType = 'object';
        $request = $this->classAdditionalFieldsV2AdditionalFieldClassComposeValuesRequest($field_name, $document_type, $tipo2, $tipo3, $doc_numbers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation classAdditionalFieldsV2AdditionalFieldClassComposeValuesAsync
     *
     * This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type Document type of first level (required)
     * @param  int $tipo2 Document type of second level (required)
     * @param  int $tipo3 Document type of third level (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function classAdditionalFieldsV2AdditionalFieldClassComposeValuesAsync($field_name, $document_type, $tipo2, $tipo3, $doc_numbers)
    {
        return $this->classAdditionalFieldsV2AdditionalFieldClassComposeValuesAsyncWithHttpInfo($field_name, $document_type, $tipo2, $tipo3, $doc_numbers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation classAdditionalFieldsV2AdditionalFieldClassComposeValuesAsyncWithHttpInfo
     *
     * This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type Document type of first level (required)
     * @param  int $tipo2 Document type of second level (required)
     * @param  int $tipo3 Document type of third level (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function classAdditionalFieldsV2AdditionalFieldClassComposeValuesAsyncWithHttpInfo($field_name, $document_type, $tipo2, $tipo3, $doc_numbers)
    {
        $returnType = 'object';
        $request = $this->classAdditionalFieldsV2AdditionalFieldClassComposeValuesRequest($field_name, $document_type, $tipo2, $tipo3, $doc_numbers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'classAdditionalFieldsV2AdditionalFieldClassComposeValues'
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type Document type of first level (required)
     * @param  int $tipo2 Document type of second level (required)
     * @param  int $tipo3 Document type of third level (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function classAdditionalFieldsV2AdditionalFieldClassComposeValuesRequest($field_name, $document_type, $tipo2, $tipo3, $doc_numbers)
    {
        // verify the required parameter 'field_name' is set
        if ($field_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_name when calling classAdditionalFieldsV2AdditionalFieldClassComposeValues'
            );
        }
        // verify the required parameter 'document_type' is set
        if ($document_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type when calling classAdditionalFieldsV2AdditionalFieldClassComposeValues'
            );
        }
        // verify the required parameter 'tipo2' is set
        if ($tipo2 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tipo2 when calling classAdditionalFieldsV2AdditionalFieldClassComposeValues'
            );
        }
        // verify the required parameter 'tipo3' is set
        if ($tipo3 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tipo3 when calling classAdditionalFieldsV2AdditionalFieldClassComposeValues'
            );
        }
        // verify the required parameter 'doc_numbers' is set
        if ($doc_numbers === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doc_numbers when calling classAdditionalFieldsV2AdditionalFieldClassComposeValues'
            );
        }

        $resourcePath = '/api/v2/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldName' . '}',
                ObjectSerializer::toPathValue($field_name),
                $resourcePath
            );
        }
        // path params
        if ($document_type !== null) {
            $resourcePath = str_replace(
                '{' . 'documentType' . '}',
                ObjectSerializer::toPathValue($document_type),
                $resourcePath
            );
        }
        // path params
        if ($tipo2 !== null) {
            $resourcePath = str_replace(
                '{' . 'tipo2' . '}',
                ObjectSerializer::toPathValue($tipo2),
                $resourcePath
            );
        }
        // path params
        if ($tipo3 !== null) {
            $resourcePath = str_replace(
                '{' . 'tipo3' . '}',
                ObjectSerializer::toPathValue($tipo3),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($doc_numbers)) {
            $_tempBody = $doc_numbers;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation classAdditionalFieldsV2AdditionalFieldClassComposeValues_0
     *
     * This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type_system_id Document type (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function classAdditionalFieldsV2AdditionalFieldClassComposeValues_0($field_name, $document_type_system_id, $doc_numbers)
    {
        list($response) = $this->classAdditionalFieldsV2AdditionalFieldClassComposeValues_0WithHttpInfo($field_name, $document_type_system_id, $doc_numbers);
        return $response;
    }

    /**
     * Operation classAdditionalFieldsV2AdditionalFieldClassComposeValues_0WithHttpInfo
     *
     * This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type_system_id Document type (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function classAdditionalFieldsV2AdditionalFieldClassComposeValues_0WithHttpInfo($field_name, $document_type_system_id, $doc_numbers)
    {
        $returnType = 'object';
        $request = $this->classAdditionalFieldsV2AdditionalFieldClassComposeValues_0Request($field_name, $document_type_system_id, $doc_numbers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation classAdditionalFieldsV2AdditionalFieldClassComposeValues_0Async
     *
     * This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type_system_id Document type (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function classAdditionalFieldsV2AdditionalFieldClassComposeValues_0Async($field_name, $document_type_system_id, $doc_numbers)
    {
        return $this->classAdditionalFieldsV2AdditionalFieldClassComposeValues_0AsyncWithHttpInfo($field_name, $document_type_system_id, $doc_numbers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation classAdditionalFieldsV2AdditionalFieldClassComposeValues_0AsyncWithHttpInfo
     *
     * This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type_system_id Document type (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function classAdditionalFieldsV2AdditionalFieldClassComposeValues_0AsyncWithHttpInfo($field_name, $document_type_system_id, $doc_numbers)
    {
        $returnType = 'object';
        $request = $this->classAdditionalFieldsV2AdditionalFieldClassComposeValues_0Request($field_name, $document_type_system_id, $doc_numbers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'classAdditionalFieldsV2AdditionalFieldClassComposeValues_0'
     *
     * @param  string $field_name Name of the additional field (required)
     * @param  int $document_type_system_id Document type (required)
     * @param  int[] $doc_numbers Documents Identifier in the additional field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function classAdditionalFieldsV2AdditionalFieldClassComposeValues_0Request($field_name, $document_type_system_id, $doc_numbers)
    {
        // verify the required parameter 'field_name' is set
        if ($field_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_name when calling classAdditionalFieldsV2AdditionalFieldClassComposeValues_0'
            );
        }
        // verify the required parameter 'document_type_system_id' is set
        if ($document_type_system_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_system_id when calling classAdditionalFieldsV2AdditionalFieldClassComposeValues_0'
            );
        }
        // verify the required parameter 'doc_numbers' is set
        if ($doc_numbers === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doc_numbers when calling classAdditionalFieldsV2AdditionalFieldClassComposeValues_0'
            );
        }

        $resourcePath = '/api/v2/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldName' . '}',
                ObjectSerializer::toPathValue($field_name),
                $resourcePath
            );
        }
        // path params
        if ($document_type_system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentTypeSystemId' . '}',
                ObjectSerializer::toPathValue($document_type_system_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($doc_numbers)) {
            $_tempBody = $doc_numbers;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
