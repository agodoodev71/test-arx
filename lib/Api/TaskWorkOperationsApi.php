<?php
/**
 * TaskWorkOperationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TaskWorkOperationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskWorkOperationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation taskWorkOperationsExecuteSignOperation
     *
     * @param  \Swagger\Client\Model\TaskWorkSignOperationRequestDTO $request request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkOperationsExecuteSignOperation($request)
    {
        $this->taskWorkOperationsExecuteSignOperationWithHttpInfo($request);
    }

    /**
     * Operation taskWorkOperationsExecuteSignOperationWithHttpInfo
     *
     * @param  \Swagger\Client\Model\TaskWorkSignOperationRequestDTO $request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsExecuteSignOperationWithHttpInfo($request)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsExecuteSignOperationRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsExecuteSignOperationAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\TaskWorkSignOperationRequestDTO $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsExecuteSignOperationAsync($request)
    {
        return $this->taskWorkOperationsExecuteSignOperationAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsExecuteSignOperationAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\TaskWorkSignOperationRequestDTO $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsExecuteSignOperationAsyncWithHttpInfo($request)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsExecuteSignOperationRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsExecuteSignOperation'
     *
     * @param  \Swagger\Client\Model\TaskWorkSignOperationRequestDTO $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsExecuteSignOperationRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling taskWorkOperationsExecuteSignOperation'
            );
        }

        $resourcePath = '/api/TaskOperations/ExecuteSignOperation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetByTaskWorkId
     *
     * This call returns all the operations in a task work
     *
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TaskWorkOperationsDTO
     */
    public function taskWorkOperationsGetByTaskWorkId($task_work_id)
    {
        list($response) = $this->taskWorkOperationsGetByTaskWorkIdWithHttpInfo($task_work_id);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetByTaskWorkIdWithHttpInfo
     *
     * This call returns all the operations in a task work
     *
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TaskWorkOperationsDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetByTaskWorkIdWithHttpInfo($task_work_id)
    {
        $returnType = '\Swagger\Client\Model\TaskWorkOperationsDTO';
        $request = $this->taskWorkOperationsGetByTaskWorkIdRequest($task_work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TaskWorkOperationsDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetByTaskWorkIdAsync
     *
     * This call returns all the operations in a task work
     *
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetByTaskWorkIdAsync($task_work_id)
    {
        return $this->taskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo($task_work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo
     *
     * This call returns all the operations in a task work
     *
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo($task_work_id)
    {
        $returnType = '\Swagger\Client\Model\TaskWorkOperationsDTO';
        $request = $this->taskWorkOperationsGetByTaskWorkIdRequest($task_work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetByTaskWorkId'
     *
     * @param  int $task_work_id Taskwork identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetByTaskWorkIdRequest($task_work_id)
    {
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsGetByTaskWorkId'
            );
        }

        $resourcePath = '/api/TaskOperations/byTaskWork/{taskWorkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetDocumentForSignOperation
     *
     * @param  int $task_work_id task_work_id (required)
     * @param  int $sign_operation_id sign_operation_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SignDocumentDataDTO[]
     */
    public function taskWorkOperationsGetDocumentForSignOperation($task_work_id, $sign_operation_id)
    {
        list($response) = $this->taskWorkOperationsGetDocumentForSignOperationWithHttpInfo($task_work_id, $sign_operation_id);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetDocumentForSignOperationWithHttpInfo
     *
     * @param  int $task_work_id (required)
     * @param  int $sign_operation_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SignDocumentDataDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetDocumentForSignOperationWithHttpInfo($task_work_id, $sign_operation_id)
    {
        $returnType = '\Swagger\Client\Model\SignDocumentDataDTO[]';
        $request = $this->taskWorkOperationsGetDocumentForSignOperationRequest($task_work_id, $sign_operation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SignDocumentDataDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetDocumentForSignOperationAsync
     *
     * 
     *
     * @param  int $task_work_id (required)
     * @param  int $sign_operation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetDocumentForSignOperationAsync($task_work_id, $sign_operation_id)
    {
        return $this->taskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo($task_work_id, $sign_operation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $task_work_id (required)
     * @param  int $sign_operation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo($task_work_id, $sign_operation_id)
    {
        $returnType = '\Swagger\Client\Model\SignDocumentDataDTO[]';
        $request = $this->taskWorkOperationsGetDocumentForSignOperationRequest($task_work_id, $sign_operation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetDocumentForSignOperation'
     *
     * @param  int $task_work_id (required)
     * @param  int $sign_operation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetDocumentForSignOperationRequest($task_work_id, $sign_operation_id)
    {
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsGetDocumentForSignOperation'
            );
        }
        // verify the required parameter 'sign_operation_id' is set
        if ($sign_operation_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sign_operation_id when calling taskWorkOperationsGetDocumentForSignOperation'
            );
        }

        $resourcePath = '/api/TaskOperations/{taskWorkId}/signOperationInfo/{signOperationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }
        // path params
        if ($sign_operation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signOperationId' . '}',
                ObjectSerializer::toPathValue($sign_operation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds
     *
     * This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TaskWorkDynamicJobOperationDTO[]
     */
    public function taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds($task_exit_code)
    {
        list($response) = $this->taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo($task_exit_code);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo
     *
     * This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TaskWorkDynamicJobOperationDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo($task_exit_code)
    {
        $returnType = '\Swagger\Client\Model\TaskWorkDynamicJobOperationDTO[]';
        $request = $this->taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsRequest($task_exit_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TaskWorkDynamicJobOperationDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync
     *
     * This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync($task_exit_code)
    {
        return $this->taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo($task_exit_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo
     *
     * This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo($task_exit_code)
    {
        $returnType = '\Swagger\Client\Model\TaskWorkDynamicJobOperationDTO[]';
        $request = $this->taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsRequest($task_exit_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds'
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsRequest($task_exit_code)
    {
        // verify the required parameter 'task_exit_code' is set
        if ($task_exit_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_exit_code when calling taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds'
            );
        }

        $resourcePath = '/api/TaskOperations/getdynamicjoboperations/exitcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($task_exit_code)) {
            $_tempBody = $task_exit_code;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetFieldValuesByProcessVariable
     *
     * This call returns the possibile values for a process variable (combo or table)
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\VariablesValuesCriteriaDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FieldValuesDTO
     */
    public function taskWorkOperationsGetFieldValuesByProcessVariable($process_variable_id, $task_work_id, $process_variables)
    {
        list($response) = $this->taskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo($process_variable_id, $task_work_id, $process_variables);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo
     *
     * This call returns the possibile values for a process variable (combo or table)
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\VariablesValuesCriteriaDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FieldValuesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo($process_variable_id, $task_work_id, $process_variables)
    {
        $returnType = '\Swagger\Client\Model\FieldValuesDTO';
        $request = $this->taskWorkOperationsGetFieldValuesByProcessVariableRequest($process_variable_id, $task_work_id, $process_variables);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FieldValuesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetFieldValuesByProcessVariableAsync
     *
     * This call returns the possibile values for a process variable (combo or table)
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\VariablesValuesCriteriaDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetFieldValuesByProcessVariableAsync($process_variable_id, $task_work_id, $process_variables)
    {
        return $this->taskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo($process_variable_id, $task_work_id, $process_variables)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo
     *
     * This call returns the possibile values for a process variable (combo or table)
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\VariablesValuesCriteriaDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo($process_variable_id, $task_work_id, $process_variables)
    {
        $returnType = '\Swagger\Client\Model\FieldValuesDTO';
        $request = $this->taskWorkOperationsGetFieldValuesByProcessVariableRequest($process_variable_id, $task_work_id, $process_variables);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetFieldValuesByProcessVariable'
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\VariablesValuesCriteriaDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetFieldValuesByProcessVariableRequest($process_variable_id, $task_work_id, $process_variables)
    {
        // verify the required parameter 'process_variable_id' is set
        if ($process_variable_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_variable_id when calling taskWorkOperationsGetFieldValuesByProcessVariable'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsGetFieldValuesByProcessVariable'
            );
        }
        // verify the required parameter 'process_variables' is set
        if ($process_variables === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_variables when calling taskWorkOperationsGetFieldValuesByProcessVariable'
            );
        }

        $resourcePath = '/api/TaskOperations/{taskWorkId}/processvariable/{processVariableId}/getValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_variable_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processVariableId' . '}',
                ObjectSerializer::toPathValue($process_variable_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($process_variables)) {
            $_tempBody = $process_variables;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetFiltersByProcessVariables
     *
     * This call returns the possibile filters for a table process variable
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FieldFilterConcreteDTO
     */
    public function taskWorkOperationsGetFiltersByProcessVariables($process_variable_id, $process_variables)
    {
        list($response) = $this->taskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo($process_variable_id, $process_variables);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo
     *
     * This call returns the possibile filters for a table process variable
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FieldFilterConcreteDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo($process_variable_id, $process_variables)
    {
        $returnType = '\Swagger\Client\Model\FieldFilterConcreteDTO';
        $request = $this->taskWorkOperationsGetFiltersByProcessVariablesRequest($process_variable_id, $process_variables);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FieldFilterConcreteDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetFiltersByProcessVariablesAsync
     *
     * This call returns the possibile filters for a table process variable
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetFiltersByProcessVariablesAsync($process_variable_id, $process_variables)
    {
        return $this->taskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo($process_variable_id, $process_variables)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo
     *
     * This call returns the possibile filters for a table process variable
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo($process_variable_id, $process_variables)
    {
        $returnType = '\Swagger\Client\Model\FieldFilterConcreteDTO';
        $request = $this->taskWorkOperationsGetFiltersByProcessVariablesRequest($process_variable_id, $process_variables);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetFiltersByProcessVariables'
     *
     * @param  int $process_variable_id Id of the process variable (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Actual values of the process variables (for value dependant query) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetFiltersByProcessVariablesRequest($process_variable_id, $process_variables)
    {
        // verify the required parameter 'process_variable_id' is set
        if ($process_variable_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_variable_id when calling taskWorkOperationsGetFiltersByProcessVariables'
            );
        }
        // verify the required parameter 'process_variables' is set
        if ($process_variables === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_variables when calling taskWorkOperationsGetFiltersByProcessVariables'
            );
        }

        $resourcePath = '/api/TaskOperations/processvariable/{processVariableId}/getFilters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_variable_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processVariableId' . '}',
                ObjectSerializer::toPathValue($process_variable_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($process_variables)) {
            $_tempBody = $process_variables;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetProfessionalRoleByTaskIds
     *
     * This call returns all professional role operations by multiple TaskWork
     *
     * @param  int[] $task_work_ids Ids of the TaskWorks (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProfessionalRoleOperationDTO[]
     */
    public function taskWorkOperationsGetProfessionalRoleByTaskIds($task_work_ids)
    {
        list($response) = $this->taskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo($task_work_ids);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo
     *
     * This call returns all professional role operations by multiple TaskWork
     *
     * @param  int[] $task_work_ids Ids of the TaskWorks (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProfessionalRoleOperationDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo($task_work_ids)
    {
        $returnType = '\Swagger\Client\Model\ProfessionalRoleOperationDTO[]';
        $request = $this->taskWorkOperationsGetProfessionalRoleByTaskIdsRequest($task_work_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProfessionalRoleOperationDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetProfessionalRoleByTaskIdsAsync
     *
     * This call returns all professional role operations by multiple TaskWork
     *
     * @param  int[] $task_work_ids Ids of the TaskWorks (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetProfessionalRoleByTaskIdsAsync($task_work_ids)
    {
        return $this->taskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo($task_work_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo
     *
     * This call returns all professional role operations by multiple TaskWork
     *
     * @param  int[] $task_work_ids Ids of the TaskWorks (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo($task_work_ids)
    {
        $returnType = '\Swagger\Client\Model\ProfessionalRoleOperationDTO[]';
        $request = $this->taskWorkOperationsGetProfessionalRoleByTaskIdsRequest($task_work_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetProfessionalRoleByTaskIds'
     *
     * @param  int[] $task_work_ids Ids of the TaskWorks (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetProfessionalRoleByTaskIdsRequest($task_work_ids)
    {
        // verify the required parameter 'task_work_ids' is set
        if ($task_work_ids === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_ids when calling taskWorkOperationsGetProfessionalRoleByTaskIds'
            );
        }

        $resourcePath = '/api/TaskOperations/professionalroleoperation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($task_work_ids)) {
            $_tempBody = $task_work_ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds
     *
     * This call returns the professional role operation to execute for a taskwork list close action by an exit code
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProfessionalRoleOperationDTO[]
     */
    public function taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds($task_exit_code)
    {
        list($response) = $this->taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo($task_exit_code);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo
     *
     * This call returns the professional role operation to execute for a taskwork list close action by an exit code
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProfessionalRoleOperationDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo($task_exit_code)
    {
        $returnType = '\Swagger\Client\Model\ProfessionalRoleOperationDTO[]';
        $request = $this->taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsRequest($task_exit_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProfessionalRoleOperationDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync
     *
     * This call returns the professional role operation to execute for a taskwork list close action by an exit code
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync($task_exit_code)
    {
        return $this->taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo($task_exit_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo
     *
     * This call returns the professional role operation to execute for a taskwork list close action by an exit code
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo($task_exit_code)
    {
        $returnType = '\Swagger\Client\Model\ProfessionalRoleOperationDTO[]';
        $request = $this->taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsRequest($task_exit_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds'
     *
     * @param  \Swagger\Client\Model\TaskExitCodeDTO $task_exit_code exit code for close action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsRequest($task_exit_code)
    {
        // verify the required parameter 'task_exit_code' is set
        if ($task_exit_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_exit_code when calling taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds'
            );
        }

        $resourcePath = '/api/TaskOperations/getprofessionalroleoperations/exitcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($task_exit_code)) {
            $_tempBody = $task_exit_code;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetSelectedUsersForDynamicJob
     *
     * This call returns the selected users list for a dynamic job in a process
     *
     * @param  int $dynamic_job_user Id of the dynamic job (required)
     * @param  int $process_id Id of the process (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserCompleteDTO[]
     */
    public function taskWorkOperationsGetSelectedUsersForDynamicJob($dynamic_job_user, $process_id)
    {
        list($response) = $this->taskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo($dynamic_job_user, $process_id);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo
     *
     * This call returns the selected users list for a dynamic job in a process
     *
     * @param  int $dynamic_job_user Id of the dynamic job (required)
     * @param  int $process_id Id of the process (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserCompleteDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo($dynamic_job_user, $process_id)
    {
        $returnType = '\Swagger\Client\Model\UserCompleteDTO[]';
        $request = $this->taskWorkOperationsGetSelectedUsersForDynamicJobRequest($dynamic_job_user, $process_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserCompleteDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetSelectedUsersForDynamicJobAsync
     *
     * This call returns the selected users list for a dynamic job in a process
     *
     * @param  int $dynamic_job_user Id of the dynamic job (required)
     * @param  int $process_id Id of the process (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetSelectedUsersForDynamicJobAsync($dynamic_job_user, $process_id)
    {
        return $this->taskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo($dynamic_job_user, $process_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo
     *
     * This call returns the selected users list for a dynamic job in a process
     *
     * @param  int $dynamic_job_user Id of the dynamic job (required)
     * @param  int $process_id Id of the process (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo($dynamic_job_user, $process_id)
    {
        $returnType = '\Swagger\Client\Model\UserCompleteDTO[]';
        $request = $this->taskWorkOperationsGetSelectedUsersForDynamicJobRequest($dynamic_job_user, $process_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetSelectedUsersForDynamicJob'
     *
     * @param  int $dynamic_job_user Id of the dynamic job (required)
     * @param  int $process_id Id of the process (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetSelectedUsersForDynamicJobRequest($dynamic_job_user, $process_id)
    {
        // verify the required parameter 'dynamic_job_user' is set
        if ($dynamic_job_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dynamic_job_user when calling taskWorkOperationsGetSelectedUsersForDynamicJob'
            );
        }
        // verify the required parameter 'process_id' is set
        if ($process_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_id when calling taskWorkOperationsGetSelectedUsersForDynamicJob'
            );
        }

        $resourcePath = '/api/TaskOperations/dynamicjob/{dynamicJobUser}/byprocessid/{processId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dynamic_job_user !== null) {
            $resourcePath = str_replace(
                '{' . 'dynamicJobUser' . '}',
                ObjectSerializer::toPathValue($dynamic_job_user),
                $resourcePath
            );
        }
        // path params
        if ($process_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($process_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetUsersForDynamicJob
     *
     * This call returns al possibile user for a dynamic job attribution
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserCompleteDTO[]
     */
    public function taskWorkOperationsGetUsersForDynamicJob()
    {
        list($response) = $this->taskWorkOperationsGetUsersForDynamicJobWithHttpInfo();
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetUsersForDynamicJobWithHttpInfo
     *
     * This call returns al possibile user for a dynamic job attribution
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserCompleteDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetUsersForDynamicJobWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\UserCompleteDTO[]';
        $request = $this->taskWorkOperationsGetUsersForDynamicJobRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserCompleteDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetUsersForDynamicJobAsync
     *
     * This call returns al possibile user for a dynamic job attribution
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetUsersForDynamicJobAsync()
    {
        return $this->taskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo
     *
     * This call returns al possibile user for a dynamic job attribution
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\UserCompleteDTO[]';
        $request = $this->taskWorkOperationsGetUsersForDynamicJobRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetUsersForDynamicJob'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetUsersForDynamicJobRequest()
    {

        $resourcePath = '/api/TaskOperations/dynamicjobusers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsGetUsersForProfessionalRoleSelection
     *
     * This call returns the professional role possibile users for a professional role operation
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserCompleteDTO[]
     */
    public function taskWorkOperationsGetUsersForProfessionalRoleSelection($task_work_id, $professional_role_id)
    {
        list($response) = $this->taskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo($task_work_id, $professional_role_id);
        return $response;
    }

    /**
     * Operation taskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo
     *
     * This call returns the professional role possibile users for a professional role operation
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserCompleteDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo($task_work_id, $professional_role_id)
    {
        $returnType = '\Swagger\Client\Model\UserCompleteDTO[]';
        $request = $this->taskWorkOperationsGetUsersForProfessionalRoleSelectionRequest($task_work_id, $professional_role_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserCompleteDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsGetUsersForProfessionalRoleSelectionAsync
     *
     * This call returns the professional role possibile users for a professional role operation
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetUsersForProfessionalRoleSelectionAsync($task_work_id, $professional_role_id)
    {
        return $this->taskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo($task_work_id, $professional_role_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo
     *
     * This call returns the professional role possibile users for a professional role operation
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo($task_work_id, $professional_role_id)
    {
        $returnType = '\Swagger\Client\Model\UserCompleteDTO[]';
        $request = $this->taskWorkOperationsGetUsersForProfessionalRoleSelectionRequest($task_work_id, $professional_role_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsGetUsersForProfessionalRoleSelection'
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsGetUsersForProfessionalRoleSelectionRequest($task_work_id, $professional_role_id)
    {
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsGetUsersForProfessionalRoleSelection'
            );
        }
        // verify the required parameter 'professional_role_id' is set
        if ($professional_role_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $professional_role_id when calling taskWorkOperationsGetUsersForProfessionalRoleSelection'
            );
        }

        $resourcePath = '/api/TaskOperations/professionalroleoperation/{professionalRoleId}/usersbytaskwork/{taskWorkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }
        // path params
        if ($professional_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'professionalRoleId' . '}',
                ObjectSerializer::toPathValue($professional_role_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsSetDynamicJob
     *
     * This call sets the users for a process dynamic job
     *
     * @param  int $dynamic_job_id Id of the dynamic job (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\UserCompleteDTO[] $users users list to add (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkOperationsSetDynamicJob($dynamic_job_id, $task_work_id, $users)
    {
        $this->taskWorkOperationsSetDynamicJobWithHttpInfo($dynamic_job_id, $task_work_id, $users);
    }

    /**
     * Operation taskWorkOperationsSetDynamicJobWithHttpInfo
     *
     * This call sets the users for a process dynamic job
     *
     * @param  int $dynamic_job_id Id of the dynamic job (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\UserCompleteDTO[] $users users list to add (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsSetDynamicJobWithHttpInfo($dynamic_job_id, $task_work_id, $users)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetDynamicJobRequest($dynamic_job_id, $task_work_id, $users);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsSetDynamicJobAsync
     *
     * This call sets the users for a process dynamic job
     *
     * @param  int $dynamic_job_id Id of the dynamic job (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\UserCompleteDTO[] $users users list to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetDynamicJobAsync($dynamic_job_id, $task_work_id, $users)
    {
        return $this->taskWorkOperationsSetDynamicJobAsyncWithHttpInfo($dynamic_job_id, $task_work_id, $users)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsSetDynamicJobAsyncWithHttpInfo
     *
     * This call sets the users for a process dynamic job
     *
     * @param  int $dynamic_job_id Id of the dynamic job (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\UserCompleteDTO[] $users users list to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetDynamicJobAsyncWithHttpInfo($dynamic_job_id, $task_work_id, $users)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetDynamicJobRequest($dynamic_job_id, $task_work_id, $users);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsSetDynamicJob'
     *
     * @param  int $dynamic_job_id Id of the dynamic job (required)
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\UserCompleteDTO[] $users users list to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsSetDynamicJobRequest($dynamic_job_id, $task_work_id, $users)
    {
        // verify the required parameter 'dynamic_job_id' is set
        if ($dynamic_job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dynamic_job_id when calling taskWorkOperationsSetDynamicJob'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsSetDynamicJob'
            );
        }
        // verify the required parameter 'users' is set
        if ($users === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $users when calling taskWorkOperationsSetDynamicJob'
            );
        }

        $resourcePath = '/api/TaskOperations/dynamicjob/{dynamicJobId}/taskwork/{taskWorkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dynamic_job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dynamicJobId' . '}',
                ObjectSerializer::toPathValue($dynamic_job_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($users)) {
            $_tempBody = $users;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsSetDynamicJobMultiple
     *
     * This call sets the users for multiple process dynamic job
     *
     * @param  \Swagger\Client\Model\DynamicJobMultipleSetRequestDTO $dynamic_job_multiple_set_request Request for multiple dynamic job set (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkOperationsSetDynamicJobMultiple($dynamic_job_multiple_set_request)
    {
        $this->taskWorkOperationsSetDynamicJobMultipleWithHttpInfo($dynamic_job_multiple_set_request);
    }

    /**
     * Operation taskWorkOperationsSetDynamicJobMultipleWithHttpInfo
     *
     * This call sets the users for multiple process dynamic job
     *
     * @param  \Swagger\Client\Model\DynamicJobMultipleSetRequestDTO $dynamic_job_multiple_set_request Request for multiple dynamic job set (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsSetDynamicJobMultipleWithHttpInfo($dynamic_job_multiple_set_request)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetDynamicJobMultipleRequest($dynamic_job_multiple_set_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsSetDynamicJobMultipleAsync
     *
     * This call sets the users for multiple process dynamic job
     *
     * @param  \Swagger\Client\Model\DynamicJobMultipleSetRequestDTO $dynamic_job_multiple_set_request Request for multiple dynamic job set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetDynamicJobMultipleAsync($dynamic_job_multiple_set_request)
    {
        return $this->taskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo($dynamic_job_multiple_set_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo
     *
     * This call sets the users for multiple process dynamic job
     *
     * @param  \Swagger\Client\Model\DynamicJobMultipleSetRequestDTO $dynamic_job_multiple_set_request Request for multiple dynamic job set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo($dynamic_job_multiple_set_request)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetDynamicJobMultipleRequest($dynamic_job_multiple_set_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsSetDynamicJobMultiple'
     *
     * @param  \Swagger\Client\Model\DynamicJobMultipleSetRequestDTO $dynamic_job_multiple_set_request Request for multiple dynamic job set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsSetDynamicJobMultipleRequest($dynamic_job_multiple_set_request)
    {
        // verify the required parameter 'dynamic_job_multiple_set_request' is set
        if ($dynamic_job_multiple_set_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dynamic_job_multiple_set_request when calling taskWorkOperationsSetDynamicJobMultiple'
            );
        }

        $resourcePath = '/api/TaskOperations/dynamicjobmultiple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($dynamic_job_multiple_set_request)) {
            $_tempBody = $dynamic_job_multiple_set_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsSetProcessVariableValueByTaskWorkId
     *
     * This call sets the values for the process variables
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Process variables informations (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkOperationsSetProcessVariableValueByTaskWorkId($task_work_id, $process_variables)
    {
        $this->taskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo($task_work_id, $process_variables);
    }

    /**
     * Operation taskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo
     *
     * This call sets the values for the process variables
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Process variables informations (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo($task_work_id, $process_variables)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetProcessVariableValueByTaskWorkIdRequest($task_work_id, $process_variables);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync
     *
     * This call sets the values for the process variables
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Process variables informations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync($task_work_id, $process_variables)
    {
        return $this->taskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo($task_work_id, $process_variables)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo
     *
     * This call sets the values for the process variables
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Process variables informations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo($task_work_id, $process_variables)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetProcessVariableValueByTaskWorkIdRequest($task_work_id, $process_variables);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsSetProcessVariableValueByTaskWorkId'
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  \Swagger\Client\Model\ProcessVariablesFieldsDTO $process_variables Process variables informations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsSetProcessVariableValueByTaskWorkIdRequest($task_work_id, $process_variables)
    {
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsSetProcessVariableValueByTaskWorkId'
            );
        }
        // verify the required parameter 'process_variables' is set
        if ($process_variables === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_variables when calling taskWorkOperationsSetProcessVariableValueByTaskWorkId'
            );
        }

        $resourcePath = '/api/TaskOperations/{taskWorkId}/setprocessvariables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($process_variables)) {
            $_tempBody = $process_variables;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsSetProfessionalRoleByTaskIds
     *
     * This call sets the professional roles users for multiple TaskWork Ids
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_to_assign_id If of user (required)
     * @param  int[] $task_work_ids List of taskwork id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkOperationsSetProfessionalRoleByTaskIds($professional_role_id, $user_to_assign_id, $task_work_ids)
    {
        $this->taskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo($professional_role_id, $user_to_assign_id, $task_work_ids);
    }

    /**
     * Operation taskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo
     *
     * This call sets the professional roles users for multiple TaskWork Ids
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_to_assign_id If of user (required)
     * @param  int[] $task_work_ids List of taskwork id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo($professional_role_id, $user_to_assign_id, $task_work_ids)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetProfessionalRoleByTaskIdsRequest($professional_role_id, $user_to_assign_id, $task_work_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsSetProfessionalRoleByTaskIdsAsync
     *
     * This call sets the professional roles users for multiple TaskWork Ids
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_to_assign_id If of user (required)
     * @param  int[] $task_work_ids List of taskwork id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetProfessionalRoleByTaskIdsAsync($professional_role_id, $user_to_assign_id, $task_work_ids)
    {
        return $this->taskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo($professional_role_id, $user_to_assign_id, $task_work_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo
     *
     * This call sets the professional roles users for multiple TaskWork Ids
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_to_assign_id If of user (required)
     * @param  int[] $task_work_ids List of taskwork id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo($professional_role_id, $user_to_assign_id, $task_work_ids)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetProfessionalRoleByTaskIdsRequest($professional_role_id, $user_to_assign_id, $task_work_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsSetProfessionalRoleByTaskIds'
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_to_assign_id If of user (required)
     * @param  int[] $task_work_ids List of taskwork id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsSetProfessionalRoleByTaskIdsRequest($professional_role_id, $user_to_assign_id, $task_work_ids)
    {
        // verify the required parameter 'professional_role_id' is set
        if ($professional_role_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $professional_role_id when calling taskWorkOperationsSetProfessionalRoleByTaskIds'
            );
        }
        // verify the required parameter 'user_to_assign_id' is set
        if ($user_to_assign_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_to_assign_id when calling taskWorkOperationsSetProfessionalRoleByTaskIds'
            );
        }
        // verify the required parameter 'task_work_ids' is set
        if ($task_work_ids === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_ids when calling taskWorkOperationsSetProfessionalRoleByTaskIds'
            );
        }

        $resourcePath = '/api/TaskOperations/professionalroleoperation/{professionalRoleId}/{userToAssignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($professional_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'professionalRoleId' . '}',
                ObjectSerializer::toPathValue($professional_role_id),
                $resourcePath
            );
        }
        // path params
        if ($user_to_assign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userToAssignId' . '}',
                ObjectSerializer::toPathValue($user_to_assign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($task_work_ids)) {
            $_tempBody = $task_work_ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsSetUsersForProfessionalRoleSelection
     *
     * This call sets the user for a professional role operation
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_id Id of the user (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkOperationsSetUsersForProfessionalRoleSelection($task_work_id, $professional_role_id, $user_id)
    {
        $this->taskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo($task_work_id, $professional_role_id, $user_id);
    }

    /**
     * Operation taskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo
     *
     * This call sets the user for a professional role operation
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_id Id of the user (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo($task_work_id, $professional_role_id, $user_id)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetUsersForProfessionalRoleSelectionRequest($task_work_id, $professional_role_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsSetUsersForProfessionalRoleSelectionAsync
     *
     * This call sets the user for a professional role operation
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_id Id of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetUsersForProfessionalRoleSelectionAsync($task_work_id, $professional_role_id, $user_id)
    {
        return $this->taskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo($task_work_id, $professional_role_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo
     *
     * This call sets the user for a professional role operation
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_id Id of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo($task_work_id, $professional_role_id, $user_id)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsSetUsersForProfessionalRoleSelectionRequest($task_work_id, $professional_role_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsSetUsersForProfessionalRoleSelection'
     *
     * @param  int $task_work_id Id of the task work (required)
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $user_id Id of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsSetUsersForProfessionalRoleSelectionRequest($task_work_id, $professional_role_id, $user_id)
    {
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsSetUsersForProfessionalRoleSelection'
            );
        }
        // verify the required parameter 'professional_role_id' is set
        if ($professional_role_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $professional_role_id when calling taskWorkOperationsSetUsersForProfessionalRoleSelection'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling taskWorkOperationsSetUsersForProfessionalRoleSelection'
            );
        }

        $resourcePath = '/api/TaskOperations/professionalroleoperation/{professionalRoleId}/setuserbytaskwork/{taskWorkId}/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }
        // path params
        if ($professional_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'professionalRoleId' . '}',
                ObjectSerializer::toPathValue($professional_role_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsTaskWorkCommandExecute
     *
     * this call executes a command task operation
     *
     * @param  int $task_work_id Task id of the operation (required)
     * @param  int $task_work_command_id Id of the command operation (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkOperationsTaskWorkCommandExecute($task_work_id, $task_work_command_id)
    {
        $this->taskWorkOperationsTaskWorkCommandExecuteWithHttpInfo($task_work_id, $task_work_command_id);
    }

    /**
     * Operation taskWorkOperationsTaskWorkCommandExecuteWithHttpInfo
     *
     * this call executes a command task operation
     *
     * @param  int $task_work_id Task id of the operation (required)
     * @param  int $task_work_command_id Id of the command operation (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsTaskWorkCommandExecuteWithHttpInfo($task_work_id, $task_work_command_id)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsTaskWorkCommandExecuteRequest($task_work_id, $task_work_command_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsTaskWorkCommandExecuteAsync
     *
     * this call executes a command task operation
     *
     * @param  int $task_work_id Task id of the operation (required)
     * @param  int $task_work_command_id Id of the command operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsTaskWorkCommandExecuteAsync($task_work_id, $task_work_command_id)
    {
        return $this->taskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo($task_work_id, $task_work_command_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo
     *
     * this call executes a command task operation
     *
     * @param  int $task_work_id Task id of the operation (required)
     * @param  int $task_work_command_id Id of the command operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo($task_work_id, $task_work_command_id)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsTaskWorkCommandExecuteRequest($task_work_id, $task_work_command_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsTaskWorkCommandExecute'
     *
     * @param  int $task_work_id Task id of the operation (required)
     * @param  int $task_work_command_id Id of the command operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsTaskWorkCommandExecuteRequest($task_work_id, $task_work_command_id)
    {
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsTaskWorkCommandExecute'
            );
        }
        // verify the required parameter 'task_work_command_id' is set
        if ($task_work_command_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_command_id when calling taskWorkOperationsTaskWorkCommandExecute'
            );
        }

        $resourcePath = '/api/TaskOperations/{taskWorkId}/taskworkcommand/{taskWorkCommandId}/execute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkCommandId' . '}',
                ObjectSerializer::toPathValue($task_work_command_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsUnSetProfessionalRoleSelection
     *
     * This call deletes the professional role actual value
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $task_work_id Id of the task work (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function taskWorkOperationsUnSetProfessionalRoleSelection($professional_role_id, $task_work_id)
    {
        $this->taskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo($professional_role_id, $task_work_id);
    }

    /**
     * Operation taskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo
     *
     * This call deletes the professional role actual value
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $task_work_id Id of the task work (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo($professional_role_id, $task_work_id)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsUnSetProfessionalRoleSelectionRequest($professional_role_id, $task_work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsUnSetProfessionalRoleSelectionAsync
     *
     * This call deletes the professional role actual value
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $task_work_id Id of the task work (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsUnSetProfessionalRoleSelectionAsync($professional_role_id, $task_work_id)
    {
        return $this->taskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo($professional_role_id, $task_work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo
     *
     * This call deletes the professional role actual value
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $task_work_id Id of the task work (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo($professional_role_id, $task_work_id)
    {
        $returnType = '';
        $request = $this->taskWorkOperationsUnSetProfessionalRoleSelectionRequest($professional_role_id, $task_work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsUnSetProfessionalRoleSelection'
     *
     * @param  int $professional_role_id Id of the professional role (required)
     * @param  int $task_work_id Id of the task work (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsUnSetProfessionalRoleSelectionRequest($professional_role_id, $task_work_id)
    {
        // verify the required parameter 'professional_role_id' is set
        if ($professional_role_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $professional_role_id when calling taskWorkOperationsUnSetProfessionalRoleSelection'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsUnSetProfessionalRoleSelection'
            );
        }

        $resourcePath = '/api/TaskOperations/professionalroleoperation/{professionalRoleId}/bytaskwork/{taskWorkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($professional_role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'professionalRoleId' . '}',
                ObjectSerializer::toPathValue($professional_role_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taskWorkOperationsValidateVariabile
     *
     * @param  int $task_work_id task_work_id (required)
     * @param  \Swagger\Client\Model\ProcessVariableValidationDTO $validation_data validation_data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ValidationFieldResultDTO
     */
    public function taskWorkOperationsValidateVariabile($task_work_id, $validation_data)
    {
        list($response) = $this->taskWorkOperationsValidateVariabileWithHttpInfo($task_work_id, $validation_data);
        return $response;
    }

    /**
     * Operation taskWorkOperationsValidateVariabileWithHttpInfo
     *
     * @param  int $task_work_id (required)
     * @param  \Swagger\Client\Model\ProcessVariableValidationDTO $validation_data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ValidationFieldResultDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function taskWorkOperationsValidateVariabileWithHttpInfo($task_work_id, $validation_data)
    {
        $returnType = '\Swagger\Client\Model\ValidationFieldResultDTO';
        $request = $this->taskWorkOperationsValidateVariabileRequest($task_work_id, $validation_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidationFieldResultDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taskWorkOperationsValidateVariabileAsync
     *
     * 
     *
     * @param  int $task_work_id (required)
     * @param  \Swagger\Client\Model\ProcessVariableValidationDTO $validation_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsValidateVariabileAsync($task_work_id, $validation_data)
    {
        return $this->taskWorkOperationsValidateVariabileAsyncWithHttpInfo($task_work_id, $validation_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taskWorkOperationsValidateVariabileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $task_work_id (required)
     * @param  \Swagger\Client\Model\ProcessVariableValidationDTO $validation_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taskWorkOperationsValidateVariabileAsyncWithHttpInfo($task_work_id, $validation_data)
    {
        $returnType = '\Swagger\Client\Model\ValidationFieldResultDTO';
        $request = $this->taskWorkOperationsValidateVariabileRequest($task_work_id, $validation_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taskWorkOperationsValidateVariabile'
     *
     * @param  int $task_work_id (required)
     * @param  \Swagger\Client\Model\ProcessVariableValidationDTO $validation_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taskWorkOperationsValidateVariabileRequest($task_work_id, $validation_data)
    {
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling taskWorkOperationsValidateVariabile'
            );
        }
        // verify the required parameter 'validation_data' is set
        if ($validation_data === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_data when calling taskWorkOperationsValidateVariabile'
            );
        }

        $resourcePath = '/api/TaskOperations/{taskWorkId}/validation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($validation_data)) {
            $_tempBody = $validation_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
