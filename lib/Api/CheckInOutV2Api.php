<?php
/**
 * CheckInOutV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CheckInOutV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckInOutV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkInOutV2CheckIn
     *
     * This call set file and remove document from checkout list
     *
     * @param  int $docnumber Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     * @param  int $option State option (required)
     * @param  bool $undo_check_out If import fails execute undo checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkInOutV2CheckIn($docnumber, $file_id, $option, $undo_check_out)
    {
        $this->checkInOutV2CheckInWithHttpInfo($docnumber, $file_id, $option, $undo_check_out);
    }

    /**
     * Operation checkInOutV2CheckInWithHttpInfo
     *
     * This call set file and remove document from checkout list
     *
     * @param  int $docnumber Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     * @param  int $option State option (required)
     * @param  bool $undo_check_out If import fails execute undo checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInOutV2CheckInWithHttpInfo($docnumber, $file_id, $option, $undo_check_out)
    {
        $returnType = '';
        $request = $this->checkInOutV2CheckInRequest($docnumber, $file_id, $option, $undo_check_out);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StateExceptionDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkInOutV2CheckInAsync
     *
     * This call set file and remove document from checkout list
     *
     * @param  int $docnumber Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     * @param  int $option State option (required)
     * @param  bool $undo_check_out If import fails execute undo checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2CheckInAsync($docnumber, $file_id, $option, $undo_check_out)
    {
        return $this->checkInOutV2CheckInAsyncWithHttpInfo($docnumber, $file_id, $option, $undo_check_out)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInOutV2CheckInAsyncWithHttpInfo
     *
     * This call set file and remove document from checkout list
     *
     * @param  int $docnumber Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     * @param  int $option State option (required)
     * @param  bool $undo_check_out If import fails execute undo checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2CheckInAsyncWithHttpInfo($docnumber, $file_id, $option, $undo_check_out)
    {
        $returnType = '';
        $request = $this->checkInOutV2CheckInRequest($docnumber, $file_id, $option, $undo_check_out);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInOutV2CheckIn'
     *
     * @param  int $docnumber Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     * @param  int $option State option (required)
     * @param  bool $undo_check_out If import fails execute undo checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkInOutV2CheckInRequest($docnumber, $file_id, $option, $undo_check_out)
    {
        // verify the required parameter 'docnumber' is set
        if ($docnumber === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docnumber when calling checkInOutV2CheckIn'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling checkInOutV2CheckIn'
            );
        }
        // verify the required parameter 'option' is set
        if ($option === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option when calling checkInOutV2CheckIn'
            );
        }
        // verify the required parameter 'undo_check_out' is set
        if ($undo_check_out === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $undo_check_out when calling checkInOutV2CheckIn'
            );
        }

        $resourcePath = '/api/v2/CheckInOut/checkIn/{docnumber}/{fileId}/{option}/{undoCheckOut}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($docnumber !== null) {
            $resourcePath = str_replace(
                '{' . 'docnumber' . '}',
                ObjectSerializer::toPathValue($docnumber),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }
        // path params
        if ($option !== null) {
            $resourcePath = str_replace(
                '{' . 'option' . '}',
                ObjectSerializer::toPathValue($option),
                $resourcePath
            );
        }
        // path params
        if ($undo_check_out !== null) {
            $resourcePath = str_replace(
                '{' . 'undoCheckOut' . '}',
                ObjectSerializer::toPathValue($undo_check_out),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkInOutV2CheckInForTask
     *
     * This call set file and remove document from checkout list when document is used in taskwork
     *
     * @param  int $process_doc_id Identifier of the document you want to checkin (required)
     * @param  int $task_work_id Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkInOutV2CheckInForTask($process_doc_id, $task_work_id, $file_id)
    {
        $this->checkInOutV2CheckInForTaskWithHttpInfo($process_doc_id, $task_work_id, $file_id);
    }

    /**
     * Operation checkInOutV2CheckInForTaskWithHttpInfo
     *
     * This call set file and remove document from checkout list when document is used in taskwork
     *
     * @param  int $process_doc_id Identifier of the document you want to checkin (required)
     * @param  int $task_work_id Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInOutV2CheckInForTaskWithHttpInfo($process_doc_id, $task_work_id, $file_id)
    {
        $returnType = '';
        $request = $this->checkInOutV2CheckInForTaskRequest($process_doc_id, $task_work_id, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StateExceptionDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkInOutV2CheckInForTaskAsync
     *
     * This call set file and remove document from checkout list when document is used in taskwork
     *
     * @param  int $process_doc_id Identifier of the document you want to checkin (required)
     * @param  int $task_work_id Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2CheckInForTaskAsync($process_doc_id, $task_work_id, $file_id)
    {
        return $this->checkInOutV2CheckInForTaskAsyncWithHttpInfo($process_doc_id, $task_work_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInOutV2CheckInForTaskAsyncWithHttpInfo
     *
     * This call set file and remove document from checkout list when document is used in taskwork
     *
     * @param  int $process_doc_id Identifier of the document you want to checkin (required)
     * @param  int $task_work_id Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2CheckInForTaskAsyncWithHttpInfo($process_doc_id, $task_work_id, $file_id)
    {
        $returnType = '';
        $request = $this->checkInOutV2CheckInForTaskRequest($process_doc_id, $task_work_id, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInOutV2CheckInForTask'
     *
     * @param  int $process_doc_id Identifier of the document you want to checkin (required)
     * @param  int $task_work_id Identifier of the document you want to checkin (required)
     * @param  string $file_id Identifier of file you want to upload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkInOutV2CheckInForTaskRequest($process_doc_id, $task_work_id, $file_id)
    {
        // verify the required parameter 'process_doc_id' is set
        if ($process_doc_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_doc_id when calling checkInOutV2CheckInForTask'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling checkInOutV2CheckInForTask'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling checkInOutV2CheckInForTask'
            );
        }

        $resourcePath = '/api/v2/CheckInOut/checkInForTask/{processDocId}/{taskWorkId}/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_doc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDocId' . '}',
                ObjectSerializer::toPathValue($process_doc_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkInOutV2CheckOut
     *
     * This call allows checkout document
     *
     * @param  int $doc_number The identifier of document to checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkInOutV2CheckOut($doc_number)
    {
        $this->checkInOutV2CheckOutWithHttpInfo($doc_number);
    }

    /**
     * Operation checkInOutV2CheckOutWithHttpInfo
     *
     * This call allows checkout document
     *
     * @param  int $doc_number The identifier of document to checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInOutV2CheckOutWithHttpInfo($doc_number)
    {
        $returnType = '';
        $request = $this->checkInOutV2CheckOutRequest($doc_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation checkInOutV2CheckOutAsync
     *
     * This call allows checkout document
     *
     * @param  int $doc_number The identifier of document to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2CheckOutAsync($doc_number)
    {
        return $this->checkInOutV2CheckOutAsyncWithHttpInfo($doc_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInOutV2CheckOutAsyncWithHttpInfo
     *
     * This call allows checkout document
     *
     * @param  int $doc_number The identifier of document to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2CheckOutAsyncWithHttpInfo($doc_number)
    {
        $returnType = '';
        $request = $this->checkInOutV2CheckOutRequest($doc_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInOutV2CheckOut'
     *
     * @param  int $doc_number The identifier of document to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkInOutV2CheckOutRequest($doc_number)
    {
        // verify the required parameter 'doc_number' is set
        if ($doc_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doc_number when calling checkInOutV2CheckOut'
            );
        }

        $resourcePath = '/api/v2/CheckInOut/checkOut/{docNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($doc_number !== null) {
            $resourcePath = str_replace(
                '{' . 'docNumber' . '}',
                ObjectSerializer::toPathValue($doc_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkInOutV2CheckOutForTask
     *
     * This call allows checkout document for task
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkInOutV2CheckOutForTask($process_doc_id, $task_work_id)
    {
        $this->checkInOutV2CheckOutForTaskWithHttpInfo($process_doc_id, $task_work_id);
    }

    /**
     * Operation checkInOutV2CheckOutForTaskWithHttpInfo
     *
     * This call allows checkout document for task
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInOutV2CheckOutForTaskWithHttpInfo($process_doc_id, $task_work_id)
    {
        $returnType = '';
        $request = $this->checkInOutV2CheckOutForTaskRequest($process_doc_id, $task_work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation checkInOutV2CheckOutForTaskAsync
     *
     * This call allows checkout document for task
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2CheckOutForTaskAsync($process_doc_id, $task_work_id)
    {
        return $this->checkInOutV2CheckOutForTaskAsyncWithHttpInfo($process_doc_id, $task_work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInOutV2CheckOutForTaskAsyncWithHttpInfo
     *
     * This call allows checkout document for task
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2CheckOutForTaskAsyncWithHttpInfo($process_doc_id, $task_work_id)
    {
        $returnType = '';
        $request = $this->checkInOutV2CheckOutForTaskRequest($process_doc_id, $task_work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInOutV2CheckOutForTask'
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkInOutV2CheckOutForTaskRequest($process_doc_id, $task_work_id)
    {
        // verify the required parameter 'process_doc_id' is set
        if ($process_doc_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_doc_id when calling checkInOutV2CheckOutForTask'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling checkInOutV2CheckOutForTask'
            );
        }

        $resourcePath = '/api/v2/CheckInOut/checkOutTask/{processDocId}/{taskWorkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_doc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDocId' . '}',
                ObjectSerializer::toPathValue($process_doc_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkInOutV2GetCheckOutProfilesList
     *
     * This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut
     *
     * @param  \Swagger\Client\Model\SelectDTO $select_dto Seleted data for search (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function checkInOutV2GetCheckOutProfilesList($select_dto)
    {
        list($response) = $this->checkInOutV2GetCheckOutProfilesListWithHttpInfo($select_dto);
        return $response;
    }

    /**
     * Operation checkInOutV2GetCheckOutProfilesListWithHttpInfo
     *
     * This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut
     *
     * @param  \Swagger\Client\Model\SelectDTO $select_dto Seleted data for search (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInOutV2GetCheckOutProfilesListWithHttpInfo($select_dto)
    {
        $returnType = 'object';
        $request = $this->checkInOutV2GetCheckOutProfilesListRequest($select_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkInOutV2GetCheckOutProfilesListAsync
     *
     * This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut
     *
     * @param  \Swagger\Client\Model\SelectDTO $select_dto Seleted data for search (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2GetCheckOutProfilesListAsync($select_dto)
    {
        return $this->checkInOutV2GetCheckOutProfilesListAsyncWithHttpInfo($select_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInOutV2GetCheckOutProfilesListAsyncWithHttpInfo
     *
     * This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut
     *
     * @param  \Swagger\Client\Model\SelectDTO $select_dto Seleted data for search (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2GetCheckOutProfilesListAsyncWithHttpInfo($select_dto)
    {
        $returnType = 'object';
        $request = $this->checkInOutV2GetCheckOutProfilesListRequest($select_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInOutV2GetCheckOutProfilesList'
     *
     * @param  \Swagger\Client\Model\SelectDTO $select_dto Seleted data for search (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkInOutV2GetCheckOutProfilesListRequest($select_dto)
    {
        // verify the required parameter 'select_dto' is set
        if ($select_dto === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $select_dto when calling checkInOutV2GetCheckOutProfilesList'
            );
        }

        $resourcePath = '/api/v2/CheckInOut';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($select_dto)) {
            $_tempBody = $select_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkInOutV2IsAlreadyInCheckOutByUserConnected
     *
     * This call allows to know if the document is in checkout
     *
     * @param  int $docnumber Document identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function checkInOutV2IsAlreadyInCheckOutByUserConnected($docnumber)
    {
        list($response) = $this->checkInOutV2IsAlreadyInCheckOutByUserConnectedWithHttpInfo($docnumber);
        return $response;
    }

    /**
     * Operation checkInOutV2IsAlreadyInCheckOutByUserConnectedWithHttpInfo
     *
     * This call allows to know if the document is in checkout
     *
     * @param  int $docnumber Document identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInOutV2IsAlreadyInCheckOutByUserConnectedWithHttpInfo($docnumber)
    {
        $returnType = 'bool';
        $request = $this->checkInOutV2IsAlreadyInCheckOutByUserConnectedRequest($docnumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkInOutV2IsAlreadyInCheckOutByUserConnectedAsync
     *
     * This call allows to know if the document is in checkout
     *
     * @param  int $docnumber Document identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2IsAlreadyInCheckOutByUserConnectedAsync($docnumber)
    {
        return $this->checkInOutV2IsAlreadyInCheckOutByUserConnectedAsyncWithHttpInfo($docnumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInOutV2IsAlreadyInCheckOutByUserConnectedAsyncWithHttpInfo
     *
     * This call allows to know if the document is in checkout
     *
     * @param  int $docnumber Document identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2IsAlreadyInCheckOutByUserConnectedAsyncWithHttpInfo($docnumber)
    {
        $returnType = 'bool';
        $request = $this->checkInOutV2IsAlreadyInCheckOutByUserConnectedRequest($docnumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInOutV2IsAlreadyInCheckOutByUserConnected'
     *
     * @param  int $docnumber Document identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkInOutV2IsAlreadyInCheckOutByUserConnectedRequest($docnumber)
    {
        // verify the required parameter 'docnumber' is set
        if ($docnumber === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docnumber when calling checkInOutV2IsAlreadyInCheckOutByUserConnected'
            );
        }

        $resourcePath = '/api/v2/CheckInOut/isInCheckOut/{docnumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($docnumber !== null) {
            $resourcePath = str_replace(
                '{' . 'docnumber' . '}',
                ObjectSerializer::toPathValue($docnumber),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkInOutV2UndoCheckOut
     *
     * This call allows undo checkout document
     *
     * @param  int[] $doc_numbers Array of document identifiers (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkInOutV2UndoCheckOut($doc_numbers)
    {
        $this->checkInOutV2UndoCheckOutWithHttpInfo($doc_numbers);
    }

    /**
     * Operation checkInOutV2UndoCheckOutWithHttpInfo
     *
     * This call allows undo checkout document
     *
     * @param  int[] $doc_numbers Array of document identifiers (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInOutV2UndoCheckOutWithHttpInfo($doc_numbers)
    {
        $returnType = '';
        $request = $this->checkInOutV2UndoCheckOutRequest($doc_numbers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation checkInOutV2UndoCheckOutAsync
     *
     * This call allows undo checkout document
     *
     * @param  int[] $doc_numbers Array of document identifiers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2UndoCheckOutAsync($doc_numbers)
    {
        return $this->checkInOutV2UndoCheckOutAsyncWithHttpInfo($doc_numbers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInOutV2UndoCheckOutAsyncWithHttpInfo
     *
     * This call allows undo checkout document
     *
     * @param  int[] $doc_numbers Array of document identifiers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2UndoCheckOutAsyncWithHttpInfo($doc_numbers)
    {
        $returnType = '';
        $request = $this->checkInOutV2UndoCheckOutRequest($doc_numbers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInOutV2UndoCheckOut'
     *
     * @param  int[] $doc_numbers Array of document identifiers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkInOutV2UndoCheckOutRequest($doc_numbers)
    {
        // verify the required parameter 'doc_numbers' is set
        if ($doc_numbers === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doc_numbers when calling checkInOutV2UndoCheckOut'
            );
        }

        $resourcePath = '/api/v2/CheckInOut/undoCheckOut';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($doc_numbers)) {
            $_tempBody = $doc_numbers;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkInOutV2UndoCheckOutForTask
     *
     * This call allows undo checkout document for task
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkInOutV2UndoCheckOutForTask($process_doc_id, $task_work_id)
    {
        $this->checkInOutV2UndoCheckOutForTaskWithHttpInfo($process_doc_id, $task_work_id);
    }

    /**
     * Operation checkInOutV2UndoCheckOutForTaskWithHttpInfo
     *
     * This call allows undo checkout document for task
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInOutV2UndoCheckOutForTaskWithHttpInfo($process_doc_id, $task_work_id)
    {
        $returnType = '';
        $request = $this->checkInOutV2UndoCheckOutForTaskRequest($process_doc_id, $task_work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation checkInOutV2UndoCheckOutForTaskAsync
     *
     * This call allows undo checkout document for task
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2UndoCheckOutForTaskAsync($process_doc_id, $task_work_id)
    {
        return $this->checkInOutV2UndoCheckOutForTaskAsyncWithHttpInfo($process_doc_id, $task_work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInOutV2UndoCheckOutForTaskAsyncWithHttpInfo
     *
     * This call allows undo checkout document for task
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInOutV2UndoCheckOutForTaskAsyncWithHttpInfo($process_doc_id, $task_work_id)
    {
        $returnType = '';
        $request = $this->checkInOutV2UndoCheckOutForTaskRequest($process_doc_id, $task_work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInOutV2UndoCheckOutForTask'
     *
     * @param  int $process_doc_id The process document identifier of profile to checkout (required)
     * @param  int $task_work_id The taskWork identifier for the profile to checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkInOutV2UndoCheckOutForTaskRequest($process_doc_id, $task_work_id)
    {
        // verify the required parameter 'process_doc_id' is set
        if ($process_doc_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_doc_id when calling checkInOutV2UndoCheckOutForTask'
            );
        }
        // verify the required parameter 'task_work_id' is set
        if ($task_work_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_work_id when calling checkInOutV2UndoCheckOutForTask'
            );
        }

        $resourcePath = '/api/v2/CheckInOut/undoCheckOutForTask/{processDocId}/{taskWorkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_doc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDocId' . '}',
                ObjectSerializer::toPathValue($process_doc_id),
                $resourcePath
            );
        }
        // path params
        if ($task_work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskWorkId' . '}',
                ObjectSerializer::toPathValue($task_work_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
